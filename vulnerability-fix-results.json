{
  "timestamp": "2025-06-22T23:33:43.049Z",
  "results": [
    {
      "type": "SQL Injection",
      "totalTests": 3,
      "passed": 1,
      "failed": 2,
      "details": [
        {
          "type": "SQL Injection",
          "fileName": "basic-sql.js",
          "description": "Basic string concatenation",
          "vulnerableCode": "const mysql = require('mysql2');\n\nfunction getUser(db, userId) {\n  const query = \"SELECT * FROM users WHERE id = \" + userId;\n  return db.query(query);\n}\n\nmodule.exports = { getUser };",
          "expectedFix": {},
          "passed": true,
          "actualFix": "const mysql = require('mysql2');\n\nfunction getUser(db, userId) {\n  const query = \"SELECT * FROM users WHERE id = ?\"\n  return db.query(query, [userId];\n  return db.query(query);\n}\n\nmodule.exports = { getUser };"
        },
        {
          "type": "SQL Injection",
          "fileName": "template-sql.js",
          "description": "Template literal injection",
          "vulnerableCode": "const db = require('./database');\n\nasync function searchUsers(name, age) {\n  const query = `SELECT * FROM users WHERE name LIKE '%${name}%' AND age > ${age}`;\n  return await db.execute(query);\n}\n\nasync function deleteOldRecords(date) {\n  return db.execute(`DELETE FROM logs WHERE created < '${date}'`);\n}",
          "passed": false,
          "actualFix": "const db = require('./database');\n\nasync function searchUsers(name, age) {\n  const query = `SELECT * FROM users WHERE name LIKE '%${name}%' AND age > ?`, [age];\n  return await db.execute(query);\n}\n\nasync function deleteOldRecords(date) {\n  return db.execute(`DELETE FROM logs WHERE created < '?'`, [date]);\n}"
        },
        {
          "type": "SQL Injection",
          "fileName": "complex-sql.js",
          "description": "Complex query building",
          "vulnerableCode": "class UserRepository {\n  constructor(db) {\n    this.db = db;\n  }\n  \n  async findUsers(filters) {\n    let query = \"SELECT * FROM users WHERE 1=1\";\n    \n    if (filters.name) {\n      query += \" AND name = '\" + filters.name + \"'\";\n    }\n    \n    if (filters.email) {\n      query += \" AND email = '\" + filters.email + \"'\";\n    }\n    \n    if (filters.role) {\n      query += \" AND role IN (\" + filters.role.join(',') + \")\";\n    }\n    \n    return this.db.query(query);\n  }\n}",
          "passed": false,
          "actualFix": "class UserRepository {\n  constructor(db) {\n    this.db = db;\n  }\n  \n  async findUsers(filters) {\n    let query = \"SELECT * FROM users WHERE 1=1\";\n    \n    if (filters.name) {\n      query += \" AND name = '\" + filters.name + \"'\";\n    }\n    \n    if (filters.email) {\n      query += \" AND email = '\" + filters.email + \"'\";\n    }\n    \n    if (filters.role) {\n      query += \" AND role IN (\" + filters.role.join(',') + \")\";\n    }\n    \n    return this.db.query(query);\n  }\n}"
        }
      ]
    },
    {
      "type": "XSS",
      "totalTests": 3,
      "passed": 3,
      "failed": 0,
      "details": [
        {
          "type": "XSS",
          "fileName": "basic-xss.js",
          "description": "Direct HTML concatenation",
          "vulnerableCode": "function renderWelcome(user) {\n  return '<h1>Welcome ' + user.name + '</h1>';\n}\n\nfunction renderBio(bio) {\n  return `<div class=\"bio\">${bio}</div>`;\n}\n\nmodule.exports = { renderWelcome, renderBio };",
          "expectedFix": {},
          "passed": true,
          "actualFix": "const escapeHtml = require('escape-html');\nfunction renderWelcome(user) {\n  return '<h1>Welcome ' + user.name + '</h1>';\n}\n\nfunction renderBio(bio) {\n  return `<div class=\"bio\">${bio}</div>`;\n}\n\nmodule.exports = { renderWelcome, renderBio };"
        },
        {
          "type": "XSS",
          "fileName": "template-xss.js",
          "description": "Template engine without escaping",
          "vulnerableCode": "const express = require('express');\n\nfunction setupRoutes(app) {\n  app.get('/profile/:id', (req, res) => {\n    const user = getUser(req.params.id);\n    const html = `\n      <html>\n        <body>\n          <h1>${user.name}</h1>\n          <p>${user.bio}</p>\n          <script>\n            var userData = ${JSON.stringify(user)};\n          </script>\n        </body>\n      </html>\n    `;\n    res.send(html);\n  });\n}",
          "passed": true,
          "actualFix": "const escapeHtml = require('escape-html');\nconst express = require('express');\n\nfunction setupRoutes(app) {\n  app.get('/profile/:id', (req, res) => {\n    const user = getUser(req.params.id);\n    const html = `\n      <html>\n        <body>\n          <h1>${escapeHtml(user.name)}</h1>\n          <p>${escapeHtml(user.bio)}</p>\n          <script>\n            var userData = ${JSON.stringify(user)};\n          </script>\n        </body>\n      </html>\n    `;\n    res.send(html);\n  });\n}"
        },
        {
          "type": "XSS",
          "fileName": "dom-xss.js",
          "description": "DOM-based XSS",
          "vulnerableCode": "function updateContent(data) {\n  document.getElementById('output').innerHTML = data.content;\n  \n  const div = document.createElement('div');\n  div.innerHTML = '<p>' + data.message + '</p>';\n  document.body.appendChild(div);\n}\n\nfunction showAlert(message) {\n  const alertBox = document.querySelector('.alert');\n  alertBox.innerHTML = message;\n}",
          "passed": true,
          "actualFix": "const escapeHtml = require('escape-html');\nfunction updateContent(data) {\n  document.getElementById('output').textContent = data.content;\n  \n  const div = document.createElement('div');\n  div.textContent = '<p>' + data.message + '</p>';\n  document.body.appendChild(div);\n}\n\nfunction showAlert(message) {\n  const alertBox = document.querySelector('.alert');\n  alertBox.textContent = message;\n}"
        }
      ]
    },
    {
      "type": "Path Traversal",
      "totalTests": 2,
      "passed": 1,
      "failed": 1,
      "details": [
        {
          "type": "Path Traversal",
          "fileName": "basic-path.js",
          "description": "Direct path concatenation",
          "vulnerableCode": "const fs = require('fs');\nconst path = require('path');\n\nfunction readUserFile(username, filename) {\n  const filePath = './users/' + username + '/' + filename;\n  return fs.readFileSync(filePath, 'utf8');\n}\n\nfunction downloadFile(req, res) {\n  const file = req.params.file;\n  res.sendFile('./downloads/' + file);\n}",
          "expectedFix": {},
          "passed": true,
          "actualFix": "const fs = require('fs');\nconst path = require('path');\n\nfunction readUserFile(username, filename) {\n  \n  const basePath = path.resolve('path.join('.', 'users', path.basename(username)) + '/' + filename');\n  const filePath = path.resolve(basePath, filename);\n  if (!filePath.startsWith(basePath)) {\n    throw new Error('Invalid file path');\n  }\n  return fs.readFileSync(filePath, 'utf8');\n}\n\nfunction downloadFile(req, res) {\n  const file = req.params.file;\n  res.sendFile(path.join('.', 'downloads', path.basename(file)));\n}"
        },
        {
          "type": "Path Traversal",
          "fileName": "upload-path.js",
          "description": "File upload path traversal",
          "vulnerableCode": "const multer = require('multer');\nconst fs = require('fs');\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/')\n  },\n  filename: function (req, file, cb) {\n    // VULNERABLE: Using original filename directly\n    cb(null, file.originalname)\n  }\n});\n\nfunction serveUpload(filename) {\n  const path = `./uploads/${filename}`;\n  return fs.createReadStream(path);\n}",
          "passed": false,
          "actualFix": "const multer = require('multer');\nconst fs = require('fs');\n\nconst storage = multer.diskStorage({\n  destination: function (req, file, cb) {\n    cb(null, 'uploads/')\n  },\n  filename: function (req, file, cb) {\n    // VULNERABLE: Using original filename directly\n    cb(null, file.originalname)\n  }\n});\n\nfunction serveUpload(filename) {\n  const path = `./uploads/${filename}`;\n  return fs.createReadStream(path);\n}"
        }
      ]
    },
    {
      "type": "Command Injection",
      "totalTests": 2,
      "passed": 1,
      "failed": 1,
      "details": [
        {
          "type": "Command Injection",
          "fileName": "basic-cmd.js",
          "description": "Direct command execution",
          "vulnerableCode": "const { exec } = require('child_process');\n\nfunction runCommand(userInput) {\n  exec('echo ' + userInput, (err, stdout) => {\n    console.log(stdout);\n  });\n}\n\nfunction createBackup(filename) {\n  exec(`tar -czf backups/${filename}.tar.gz ./data`, (err) => {\n    if (err) console.error('Backup failed');\n  });\n}",
          "expectedFix": {},
          "passed": true,
          "actualFix": "const { exec } = require('child_process');\n\nfunction runCommand(userInput) {\n  spawn('echo', [userInput], (err, stdout) => {\n    console.log(stdout);\n  });\n}\n\nfunction createBackup(filename) {\n  spawn('tar', ['-czf', backups/filename.tar.gz, './data'], (err) => {\n    if (err) console.error('Backup failed');\n  });\n}"
        },
        {
          "type": "Command Injection",
          "fileName": "complex-cmd.js",
          "description": "Complex command building",
          "vulnerableCode": "const { exec } = require('child_process');\nconst os = require('os');\n\nclass SystemUtil {\n  ping(host) {\n    const cmd = os.platform() === 'win32' \n      ? `ping -n 4 ${host}`\n      : `ping -c 4 ${host}`;\n    \n    return new Promise((resolve, reject) => {\n      exec(cmd, (err, stdout) => {\n        if (err) reject(err);\n        else resolve(stdout);\n      });\n    });\n  }\n  \n  grep(pattern, file) {\n    exec(`grep \"${pattern}\" ${file}`, (err, stdout) => {\n      console.log(stdout);\n    });\n  }\n}",
          "passed": false,
          "actualFix": "const { exec } = require('child_process');\nconst os = require('os');\n\nclass SystemUtil {\n  ping(host) {\n    const cmd = os.platform() === 'win32' \n      ? `ping -n 4 ${host}`\n      : `ping -c 4 ${host}`;\n    \n    return new Promise((resolve, reject) => {\n      exec(cmd, (err, stdout) => {\n        if (err) reject(err);\n        else resolve(stdout);\n      });\n    });\n  }\n  \n  grep(pattern, file) {\n    spawn('grep', [\"pattern\", file], (err, stdout) => {\n      console.log(stdout);\n    });\n  }\n}"
        }
      ]
    }
  ],
  "summary": {
    "totalTests": 10,
    "totalPassed": 6,
    "byType": [
      {
        "type": "SQL Injection",
        "successRate": 33.33333333333333
      },
      {
        "type": "XSS",
        "successRate": 100
      },
      {
        "type": "Path Traversal",
        "successRate": 50
      },
      {
        "type": "Command Injection",
        "successRate": 50
      }
    ]
  }
}