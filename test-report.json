{
  "numTotalTestSuites": 470,
  "numPassedTestSuites": 443,
  "numFailedTestSuites": 27,
  "numPendingTestSuites": 0,
  "numTotalTests": 800,
  "numPassedTests": 730,
  "numFailedTests": 16,
  "numPendingTests": 54,
  "numTodoTests": 0,
  "startTime": 1756408773139,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection via string concatenation",
          "status": "skipped",
          "title": "should detect SQL injection via string concatenation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection with f-strings",
          "status": "skipped",
          "title": "should detect SQL injection with f-strings",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "JavaScript SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) JavaScript SQL Injection Detection should detect SQL injection in JavaScript",
          "status": "skipped",
          "title": "should detect SQL injection in JavaScript",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Ruby Command Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Ruby Command Injection Detection should detect command injection in Ruby",
          "status": "skipped",
          "title": "should detect command injection in Ruby",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "PHP XSS Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) PHP XSS Detection should detect XSS in PHP echo statements",
          "status": "skipped",
          "title": "should detect XSS in PHP echo statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Accuracy Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Accuracy Metrics should achieve >90% accuracy on test corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on test corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Performance Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Performance Metrics should analyze files with acceptable latency",
          "status": "skipped",
          "title": "should analyze files with acceptable latency",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408773139,
      "endTime": 1756408773139,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ast-service-verification.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check pattern loading without detection",
          "status": "passed",
          "title": "should check pattern loading without detection",
          "duration": 2.3436579999997775,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should test small code detection",
          "status": "passed",
          "title": "should test small code detection",
          "duration": 1.1509610000002795,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check AST interpreter directly",
          "status": "passed",
          "title": "should check AST interpreter directly",
          "duration": 0.35263899999972637,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408776013,
      "endTime": 1756408776017.3525,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/memory-investigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should use ElixirASTAnalyzer when API key is provided",
          "status": "passed",
          "title": "should use ElixirASTAnalyzer when API key is provided",
          "duration": 0.4727370000000519,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should fall back to client-side AST when no API key",
          "status": "passed",
          "title": "should fall back to client-side AST when no API key",
          "duration": 0.377458000000388,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should support multiple languages with server AST",
          "status": "passed",
          "title": "should support multiple languages with server AST",
          "duration": 0.5152219999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should only support JS/TS without server AST",
          "status": "passed",
          "title": "should only support JS/TS without server AST",
          "duration": 0.3308860000001914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should handle Python code through server AST",
          "status": "skipped",
          "title": "should handle Python code through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should reject unsupported languages gracefully",
          "status": "passed",
          "title": "should reject unsupported languages gracefully",
          "duration": 0.5320050000000265,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should respect useServerAST=false even with API key",
          "status": "passed",
          "title": "should respect useServerAST=false even with API key",
          "duration": 0.31243599999970684,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should use environment variables as fallback",
          "status": "passed",
          "title": "should use environment variables as fallback",
          "duration": 0.1956529999997656,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775914,
      "endTime": 1756408775917.3125,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-green-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use ASTPatternInterpreter for vulnerability detection",
          "status": "passed",
          "title": "should use ASTPatternInterpreter for vulnerability detection",
          "duration": 1.066447000000153,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect JavaScript eval injection",
          "status": "passed",
          "title": "should detect JavaScript eval injection",
          "duration": 5.807874999999967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Python SQL injection via server AST",
          "status": "skipped",
          "title": "should detect Python SQL injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Ruby command injection via server AST",
          "status": "skipped",
          "title": "should detect Ruby command injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect PHP XSS via server AST",
          "status": "skipped",
          "title": "should detect PHP XSS via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should achieve >90% accuracy on mixed language corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on mixed language corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use server-side AST service endpoint",
          "status": "skipped",
          "title": "should use server-side AST service endpoint",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "Test Infrastructure"
          ],
          "fullName": "Server-Side AST Integration Test Infrastructure should have ElixirASTAnalyzer class available",
          "status": "passed",
          "title": "should have ElixirASTAnalyzer class available",
          "duration": 0.5874800000001414,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775325,
      "endTime": 1756408775332.5874,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with singular \"file\" property",
          "duration": 0.15225099999997838,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with plural \"files\" property",
          "duration": 0.09884400000009919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 0.1171369999997296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should return empty array for vulnerabilities without file properties",
          "status": "passed",
          "title": "should return empty array for vulnerabilities without file properties",
          "duration": 0.07537600000023303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) OLD BROKEN CODE: should demonstrate the bug",
          "status": "passed",
          "title": "OLD BROKEN CODE: should demonstrate the bug",
          "duration": 0.05602200000021185,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775948,
      "endTime": 1756408775949.0754,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/vendor-detection-file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should slice issues array when maxIssues is set",
          "status": "passed",
          "title": "should slice issues array when maxIssues is set",
          "duration": 0.21613099999967744,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is not set",
          "status": "passed",
          "title": "should return all issues when maxIssues is not set",
          "duration": 0.11071399999991627,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is 0",
          "status": "passed",
          "title": "should return all issues when maxIssues is 0",
          "duration": 0.06975000000011278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is greater than issue count",
          "status": "passed",
          "title": "should return all issues when maxIssues is greater than issue count",
          "duration": 0.04971000000023196,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle single issue limit",
          "status": "passed",
          "title": "should handle single issue limit",
          "duration": 0.06118299999980081,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle exact match of maxIssues and issue count",
          "status": "passed",
          "title": "should handle exact match of maxIssues and issue count",
          "duration": 0.047250999999960186,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775962,
      "endTime": 1756408775963.1106,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/index-maxissues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should timeout workflow after 2 minutes",
          "status": "passed",
          "title": "should timeout workflow after 2 minutes",
          "duration": 101.26677999999993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should complete successfully before timeout",
          "status": "passed",
          "title": "should complete successfully before timeout",
          "duration": 1.328416999999945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should handle no issues gracefully without timeout",
          "status": "passed",
          "title": "should handle no issues gracefully without timeout",
          "duration": 0.7776939999998831,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should include timeout information in error message",
          "status": "passed",
          "title": "should include timeout information in error message",
          "duration": 101.53963199999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should use configured processing options",
          "status": "passed",
          "title": "should use configured processing options",
          "duration": 1.4502359999999044,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774904,
      "endTime": 1756408775110.4502,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/workflow-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use default API URL if not provided",
          "status": "passed",
          "title": "should use default API URL if not provided",
          "duration": 1.077493000000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use provided API URL",
          "status": "passed",
          "title": "should use provided API URL",
          "duration": 0.6765560000001187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use API key from config",
          "status": "passed",
          "title": "should use API key from config",
          "duration": 0.39958599999999933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use API key from environment if not in config",
          "status": "passed",
          "title": "should use API key from environment if not in config",
          "duration": 0.30976399999985915,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should fetch patterns for a language",
          "status": "passed",
          "title": "should fetch patterns for a language",
          "duration": 3.2991230000000087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 2.2308349999998427,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should use cached patterns within TTL",
          "status": "passed",
          "title": "should use cached patterns within TTL",
          "duration": 1.4181550000000698,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should handle patterns without API key (public only)",
          "status": "passed",
          "title": "should handle patterns without API key (public only)",
          "duration": 1.4738859999999931,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "PatternAPIClient enhanced patterns"
          ],
          "fullName": "PatternAPIClient PatternAPIClient enhanced patterns should handle enhanced patterns with AST rules",
          "status": "passed",
          "title": "should handle enhanced patterns with AST rules",
          "duration": 1.6635539999999764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "PatternAPIClient enhanced patterns"
          ],
          "fullName": "PatternAPIClient PatternAPIClient enhanced patterns should handle patterns without enhanced features",
          "status": "passed",
          "title": "should handle patterns without enhanced features",
          "duration": 1.0823609999999917,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774528,
      "endTime": 1756408774543.0823,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-api-client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Integration"
          ],
          "fullName": "Container Integration setupContainer should set up a container environment",
          "status": "passed",
          "title": "setupContainer should set up a container environment",
          "duration": 1.4857419999998456,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Integration"
          ],
          "fullName": "Container Integration setupContainer should skip setup if containers are disabled",
          "status": "passed",
          "title": "setupContainer should skip setup if containers are disabled",
          "duration": 0.42905000000018845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Integration"
          ],
          "fullName": "Container Integration setupContainer should validate container configuration",
          "status": "passed",
          "title": "setupContainer should validate container configuration",
          "duration": 0.6819759999998496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Integration"
          ],
          "fullName": "Container Integration runInContainer should execute a command in a container",
          "status": "passed",
          "title": "runInContainer should execute a command in a container",
          "duration": 0.7039030000000821,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Integration"
          ],
          "fullName": "Container Integration runInContainer should handle container execution failure",
          "status": "passed",
          "title": "runInContainer should handle container execution failure",
          "duration": 0.9045110000001841,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775872,
      "endTime": 1756408775875.9045,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/container.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should sanitize Anthropic-specific errors",
          "status": "passed",
          "title": "should sanitize Anthropic-specific errors",
          "duration": 0.9077309999997851,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should sanitize OpenAI-specific errors",
          "status": "passed",
          "title": "should sanitize OpenAI-specific errors",
          "duration": 0.6176649999997608,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should handle API key errors generically",
          "status": "passed",
          "title": "should handle API key errors generically",
          "duration": 0.37666699999999764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should handle unsupported provider errors without exposing internal details",
          "status": "passed",
          "title": "should handle unsupported provider errors without exposing internal details",
          "duration": 0.27950200000032055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should sanitize network errors",
          "status": "passed",
          "title": "should sanitize network errors",
          "duration": 0.43140500000026805,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Message Sanitization"
          ],
          "fullName": "Error Message Sanitization should provide helpful error messages without exposing implementation details",
          "status": "passed",
          "title": "should provide helpful error messages without exposing implementation details",
          "duration": 0.4665070000000924,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775831,
      "endTime": 1756408775834.4666,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/error-sanitization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Jira Integration Workflow"
          ],
          "fullName": "Jira Integration Workflow demonstrates the complete workflow from Jira issue to PR",
          "status": "passed",
          "title": "demonstrates the complete workflow from Jira issue to PR",
          "duration": 1.7145249999998668,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Integration Workflow"
          ],
          "fullName": "Jira Integration Workflow shows how repository info is extracted from Jira",
          "status": "passed",
          "title": "shows how repository info is extracted from Jira",
          "duration": 1.4026519999997618,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Integration Workflow"
          ],
          "fullName": "Jira Integration Workflow shows the Jira configuration in action.yml",
          "status": "passed",
          "title": "shows the Jira configuration in action.yml",
          "duration": 1.3547419999999875,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775769,
      "endTime": 1756408775773.3547,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/jira-workflow.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor processes issues with basic configuration",
          "status": "passed",
          "title": "processes issues with basic configuration",
          "duration": 1.043971000000056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor processes issues with security analysis enabled",
          "status": "passed",
          "title": "processes issues with security analysis enabled",
          "duration": 0.39256799999975556,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor processes issues with enhanced context",
          "status": "passed",
          "title": "processes issues with enhanced context",
          "duration": 0.4355230000001029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor handles multiple issues",
          "status": "passed",
          "title": "handles multiple issues",
          "duration": 0.33470200000010664,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor handles processing errors gracefully",
          "status": "passed",
          "title": "handles processing errors gracefully",
          "duration": 0.34908199999972567,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor"
          ],
          "fullName": "Unified Processor respects processing options",
          "status": "passed",
          "title": "respects processing options",
          "duration": 0.2994889999999941,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775513,
      "endTime": 1756408775516.2996,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/unified-processor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify RsolvApiClient is imported in pr.ts",
          "status": "passed",
          "title": "should verify RsolvApiClient is imported in pr.ts",
          "duration": 0.26319899999998597,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify recordFixAttempt is called after PR creation",
          "status": "passed",
          "title": "should verify recordFixAttempt is called after PR creation",
          "duration": 0.16228300000011586,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408776022,
      "endTime": 1756408776023.1624,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/integration/pr-tracking.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should split 14-file vulnerability into chunks of 3",
          "status": "passed",
          "title": "should split 14-file vulnerability into chunks of 3",
          "duration": 1.0317589999999655,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should respect token limits per chunk",
          "status": "passed",
          "title": "should respect token limits per chunk",
          "duration": 0.46652799999992567,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should keep related files together when possible",
          "status": "passed",
          "title": "should keep related files together when possible",
          "duration": 0.3229180000000724,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by module",
          "status": "passed",
          "title": "should group files by module",
          "duration": 0.3995950000000903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by severity",
          "status": "passed",
          "title": "should group files by severity",
          "duration": 0.2708390000000236,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should analyze file dependencies",
          "status": "passed",
          "title": "should analyze file dependencies",
          "duration": 0.4707389999998668,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should generate multiple PRs for chunked vulnerability",
          "status": "passed",
          "title": "should generate multiple PRs for chunked vulnerability",
          "duration": 5.887760000000071,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should link PRs in series with dependencies",
          "status": "passed",
          "title": "should link PRs in series with dependencies",
          "duration": 0.6172099999998863,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should calculate complexity based on file count",
          "status": "passed",
          "title": "should calculate complexity based on file count",
          "duration": 7.410956999999826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should route complex vulnerabilities to manual guide",
          "status": "passed",
          "title": "should route complex vulnerabilities to manual guide",
          "duration": 0.7730579999999918,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should handle hardcoded secrets with environment variables",
          "status": "passed",
          "title": "should handle hardcoded secrets with environment variables",
          "duration": 14.385536000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should not break functionality when removing secrets",
          "status": "passed",
          "title": "should not break functionality when removing secrets",
          "duration": 1.1581280000000334,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774458,
      "endTime": 1756408774493.1582,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/chunking/__tests__/vulnerability-chunker.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 tests for SQL injection vulnerability",
          "status": "passed",
          "title": "should generate JUnit 5 tests for SQL injection vulnerability",
          "duration": 1.3944590000000971,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 parameterized tests for multiple attack vectors",
          "status": "passed",
          "title": "should generate JUnit 5 parameterized tests for multiple attack vectors",
          "duration": 0.821976000000177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG tests for XXE vulnerability",
          "status": "passed",
          "title": "should generate TestNG tests for XXE vulnerability",
          "duration": 0.9242389999999432,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG data provider tests",
          "status": "passed",
          "title": "should generate TestNG data provider tests",
          "duration": 0.7052939999998671,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "Spring Boot Integration"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support Spring Boot Integration should generate Spring Boot test annotations for JUnit 5",
          "status": "passed",
          "title": "should generate Spring Boot test annotations for JUnit 5",
          "duration": 0.5770849999998973,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774570,
      "endTime": 1756408774574.5771,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/adaptive-test-generator-java.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should check if Claude Code CLI is actually available",
          "status": "skipped",
          "title": "should check if Claude Code CLI is actually available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should generate real solution using Claude Code",
          "status": "skipped",
          "title": "should generate real solution using Claude Code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should work with enhanced prompts in live mode",
          "status": "skipped",
          "title": "should work with enhanced prompts in live mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code File System Integration"
          ],
          "fullName": "Claude Code File System Integration should handle real file operations",
          "status": "skipped",
          "title": "should handle real file operations",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408773139,
      "endTime": 1756408773139,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-code-live.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation regardless of other settings",
          "status": "passed",
          "title": "should skip validation regardless of other settings",
          "duration": 2.9444360000002234,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation even if testGeneration.enabled is true",
          "status": "passed",
          "title": "should skip validation even if testGeneration.enabled is true",
          "duration": 0.4025469999996858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.07647300000007817,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.03940499999998792,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip regardless of testGeneration settings when disabled",
          "status": "passed",
          "title": "should skip regardless of testGeneration settings when disabled",
          "duration": 0.03290900000001784,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775924,
      "endTime": 1756408775928.0764,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/disable-validation-bug.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback generates a solution with feedback integration",
          "status": "passed",
          "title": "generates a solution with feedback integration",
          "duration": 0.2636600000000726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback should integrate feedback when enhancing AI prompts",
          "status": "passed",
          "title": "should integrate feedback when enhancing AI prompts",
          "duration": 0.20150199999989127,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775944,
      "endTime": 1756408775944.2637,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/feedbackEnhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should ignore .rsolv/ directory in git status check",
          "status": "passed",
          "title": "should ignore .rsolv/ directory in git status check",
          "duration": 1.3536379999995916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should still detect real uncommitted changes",
          "status": "passed",
          "title": "should still detect real uncommitted changes",
          "duration": 0.2339830000000802,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775957,
      "endTime": 1756408775959.234,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-status-rsolv-ignore.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle Java SQL injection with multiple fix attempts",
          "status": "passed",
          "title": "should handle Java SQL injection with multiple fix attempts",
          "duration": 1.8922410000000127,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle PHP SQL injection with PDO migration",
          "status": "passed",
          "title": "should handle PHP SQL injection with PDO migration",
          "duration": 3.925912000000153,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should respect max iteration limits for complex vulnerabilities",
          "status": "passed",
          "title": "should respect max iteration limits for complex vulnerabilities",
          "duration": 0.32792399999993904,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper Java test context for Claude Code",
          "status": "passed",
          "title": "should generate proper Java test context for Claude Code",
          "duration": 0.2201910000001135,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper PHP test context for Claude Code",
          "status": "passed",
          "title": "should generate proper PHP test context for Claude Code",
          "duration": 0.20164299999987634,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate Java fixes use approved patterns",
          "status": "passed",
          "title": "should validate Java fixes use approved patterns",
          "duration": 0.3934480000000349,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate PHP fixes use approved patterns",
          "status": "passed",
          "title": "should validate PHP fixes use approved patterns",
          "duration": 0.25181800000018484,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774323,
      "endTime": 1756408774330.3936,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6e-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect SQL injection vulnerabilities in code",
          "status": "passed",
          "title": "should detect SQL injection vulnerabilities in code",
          "duration": 32.40596199999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect XSS vulnerabilities in code",
          "status": "passed",
          "title": "should detect XSS vulnerabilities in code",
          "duration": 1.0967239999999947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should calculate appropriate risk levels",
          "status": "passed",
          "title": "should calculate appropriate risk levels",
          "duration": 0.9686670000000959,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should adjust complexity based on security risk",
          "status": "passed",
          "title": "should adjust complexity based on security risk",
          "duration": 1.4835779999998522,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle files with no vulnerabilities",
          "status": "passed",
          "title": "should handle files with no vulnerabilities",
          "duration": 0.7378690000000461,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle mixed languages",
          "status": "passed",
          "title": "should handle mixed languages",
          "duration": 0.8734910000000582,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect security issues from title and body",
          "status": "passed",
          "title": "should detect security issues from title and body",
          "duration": 0.23117900000011105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect bug issues",
          "status": "passed",
          "title": "should detect bug issues",
          "duration": 0.19974600000000464,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774608,
      "endTime": 1756408774646.2312,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/security-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.1379960000003848,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.06813300000021627,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is undefined",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is undefined",
          "duration": 0.04785799999990559,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "status": "passed",
          "title": "FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "duration": 0.06164200000011988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) correctly skips when both are false",
          "status": "passed",
          "title": "correctly skips when both are false",
          "duration": 0.04886399999986679,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "status": "passed",
          "title": "should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "duration": 0.0553660000000491,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when fixValidation.enabled is true",
          "status": "passed",
          "title": "should enter validation when fixValidation.enabled is true",
          "duration": 0.04252200000019002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when testGeneration.validateFixes is true and not disabled",
          "status": "passed",
          "title": "should enter validation when testGeneration.validateFixes is true and not disabled",
          "duration": 0.04089899999962654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should not enter validation when both are false/undefined",
          "status": "passed",
          "title": "should not enter validation when both are false/undefined",
          "duration": 0.04802500000005239,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775844,
      "endTime": 1756408775845.068,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/validation-skip-logic.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should run command successfully",
          "status": "passed",
          "title": "should run command successfully",
          "duration": 2.1265470000003006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should fail when containers are disabled",
          "status": "passed",
          "title": "should fail when containers are disabled",
          "duration": 2.397292000000107,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should create and clean up temporary directory",
          "status": "passed",
          "title": "should create and clean up temporary directory",
          "duration": 0.9588699999999335,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use provided working directory",
          "status": "passed",
          "title": "should use provided working directory",
          "duration": 1.1330989999996746,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle command execution failure",
          "status": "passed",
          "title": "should handle command execution failure",
          "duration": 1.1394839999998112,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should include environment variables in Docker command",
          "status": "passed",
          "title": "should include environment variables in Docker command",
          "duration": 0.9812839999999596,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should apply resource limits",
          "status": "passed",
          "title": "should apply resource limits",
          "duration": 0.8593309999996563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should add security options",
          "status": "passed",
          "title": "should add security options",
          "duration": 0.8125060000002122,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle volume mounts",
          "status": "passed",
          "title": "should handle volume mounts",
          "duration": 1.0963440000000446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should escape shell arguments properly",
          "status": "passed",
          "title": "should escape shell arguments properly",
          "duration": 0.9156920000000355,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use custom timeout",
          "status": "passed",
          "title": "should use custom timeout",
          "duration": 0.7237759999998161,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle timeout errors",
          "status": "passed",
          "title": "should handle timeout errors",
          "duration": 1.0410580000002483,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775252,
      "endTime": 1756408775267.041,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/containers/__tests__/run.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "initialize"
          ],
          "fullName": "RSOLVCredentialManager initialize should exchange RSOLV API key for temporary credentials",
          "status": "passed",
          "title": "should exchange RSOLV API key for temporary credentials",
          "duration": 3.581666999999925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "initialize"
          ],
          "fullName": "RSOLVCredentialManager initialize should throw error on failed API response",
          "status": "passed",
          "title": "should throw error on failed API response",
          "duration": 5.791635999999926,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "initialize"
          ],
          "fullName": "RSOLVCredentialManager initialize should throw error on network failure",
          "status": "passed",
          "title": "should throw error on network failure",
          "duration": 1.885392000000138,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "initialize"
          ],
          "fullName": "RSOLVCredentialManager initialize should schedule credential refresh before expiration",
          "status": "passed",
          "title": "should schedule credential refresh before expiration",
          "duration": 0.8063239999999041,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "getCredential"
          ],
          "fullName": "RSOLVCredentialManager getCredential should return valid credential",
          "status": "passed",
          "title": "should return valid credential",
          "duration": 0.6882680000001073,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "getCredential"
          ],
          "fullName": "RSOLVCredentialManager getCredential should throw error for expired credential",
          "status": "passed",
          "title": "should throw error for expired credential",
          "duration": 0.7636400000001231,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "getCredential"
          ],
          "fullName": "RSOLVCredentialManager getCredential should throw error for non-existent provider",
          "status": "passed",
          "title": "should throw error for non-existent provider",
          "duration": 0.6408870000000206,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "reportUsage"
          ],
          "fullName": "RSOLVCredentialManager reportUsage should report usage metrics",
          "status": "passed",
          "title": "should report usage metrics",
          "duration": 0.6974710000001778,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "reportUsage"
          ],
          "fullName": "RSOLVCredentialManager reportUsage should handle usage reporting failure gracefully",
          "status": "passed",
          "title": "should handle usage reporting failure gracefully",
          "duration": 0.5641539999999168,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RSOLVCredentialManager",
            "cleanup"
          ],
          "fullName": "RSOLVCredentialManager cleanup should clear credentials and cancel refresh timers",
          "status": "passed",
          "title": "should clear credentials and cancel refresh timers",
          "duration": 0.5545489999999518,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774410,
      "endTime": 1756408774426.5642,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/credentials/__tests__/manager.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent",
          "duration": 0.5311259999998583,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent with modifications",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent with modifications",
          "duration": 0.374648999999863,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid PromptEnhancementContext",
          "status": "passed",
          "title": "should allow creating a valid PromptEnhancementContext",
          "duration": 0.5828930000002401,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should enforce proper enumeration values",
          "status": "passed",
          "title": "should enforce proper enumeration values",
          "duration": 0.6876419999998689,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775893,
      "endTime": 1756408775895.6877,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/types.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should analyze issue and determine if fixable",
          "status": "passed",
          "title": "executeScanForIssue should analyze issue and determine if fixable",
          "duration": 80.377432,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should fail if git has uncommitted changes",
          "status": "passed",
          "title": "executeScanForIssue should fail if git has uncommitted changes",
          "duration": 0.35498900000004596,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should store scan results in PhaseDataClient",
          "status": "passed",
          "title": "executeScanForIssue should store scan results in PhaseDataClient",
          "duration": 1.3512759999999844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should generate tests for vulnerability",
          "status": "passed",
          "title": "executeValidateForIssue should generate tests for vulnerability",
          "duration": 14.496564999999919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "status": "passed",
          "title": "executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "duration": 8.372838000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should store validation results",
          "status": "passed",
          "title": "executeValidateForIssue should store validation results",
          "duration": 2.214919000000009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should apply fix using Claude Code",
          "status": "passed",
          "title": "executeMitigateForIssue should apply fix using Claude Code",
          "duration": 5.058786000000055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should validate fix with generated tests",
          "status": "passed",
          "title": "executeMitigateForIssue should validate fix with generated tests",
          "duration": 4.469103000000018,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should retry on validation failure",
          "status": "passed",
          "title": "executeMitigateForIssue should retry on validation failure",
          "duration": 4.6725479999998925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should run all phases sequentially",
          "status": "passed",
          "title": "executeThreePhaseForIssue should run all phases sequentially",
          "duration": 21.88661300000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should abort if scan determines not fixable",
          "status": "passed",
          "title": "executeThreePhaseForIssue should abort if scan determines not fixable",
          "duration": 1.0236760000000231,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should pass data between phases",
          "status": "passed",
          "title": "executeThreePhaseForIssue should pass data between phases",
          "duration": 1.6250440000000026,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408773853,
      "endTime": 1756408773999.625,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-decomposition.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PR Integration with Fix Attempt Recording"
          ],
          "fullName": "PR Integration with Fix Attempt Recording should record fix attempt after successful PR creation",
          "status": "passed",
          "title": "should record fix attempt after successful PR creation",
          "duration": 1.0027840000000197,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PR Integration with Fix Attempt Recording"
          ],
          "fullName": "PR Integration with Fix Attempt Recording should handle PR without issue reference",
          "status": "passed",
          "title": "should handle PR without issue reference",
          "duration": 0.4679900000000998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PR Integration with Fix Attempt Recording"
          ],
          "fullName": "PR Integration with Fix Attempt Recording should handle API errors gracefully without failing PR creation",
          "status": "passed",
          "title": "should handle API errors gracefully without failing PR creation",
          "duration": 0.22980099999995218,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PR Integration with Fix Attempt Recording"
          ],
          "fullName": "PR Integration with Fix Attempt Recording should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 0.20813999999995758,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PR Integration with Fix Attempt Recording"
          ],
          "fullName": "PR Integration with Fix Attempt Recording should use environment variables for configuration",
          "status": "passed",
          "title": "should use environment variables for configuration",
          "duration": 0.2252889999999752,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774586,
      "endTime": 1756408774588.2253,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/external/__tests__/pr-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should have Ruby SQL injection pattern",
          "status": "passed",
          "title": "should have Ruby SQL injection pattern",
          "duration": 0.15901100000019142,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should match Ruby SQL injection with regex",
          "status": "passed",
          "title": "should match Ruby SQL injection with regex",
          "duration": 0.12842499999987922,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection with detector",
          "status": "passed",
          "title": "should detect Ruby SQL injection with detector",
          "duration": 0.5146829999998772,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection in full code",
          "status": "passed",
          "title": "should detect Ruby SQL injection in full code",
          "duration": 0.4081780000001345,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775970,
      "endTime": 1756408775971.4082,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/ruby-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize parameterized queries as safe",
          "status": "passed",
          "title": "should recognize parameterized queries as safe",
          "duration": 0.3501369999999042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize prepared statements as safe",
          "status": "passed",
          "title": "should recognize prepared statements as safe",
          "duration": 0.18188400000008187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby hash syntax as safe SQL",
          "status": "passed",
          "title": "should NOT consider Ruby hash syntax as safe SQL",
          "duration": 0.11004000000002634,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby string interpolation as safe",
          "status": "passed",
          "title": "should NOT consider Ruby string interpolation as safe",
          "duration": 0.1090079999999034,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize actual named parameters as safe",
          "status": "passed",
          "title": "should recognize actual named parameters as safe",
          "duration": 0.10044299999981376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Ruby ActiveRecord safe patterns",
          "status": "passed",
          "title": "should handle Ruby ActiveRecord safe patterns",
          "duration": 0.09679700000015146,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Python parameterized queries",
          "status": "passed",
          "title": "should handle Python parameterized queries",
          "duration": 0.0923240000001897,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775993,
      "endTime": 1756408775994.182,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/safe-usage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove Anthropic references",
          "status": "passed",
          "title": "should remove Anthropic references",
          "duration": 1.5764209999997547,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove OpenAI references",
          "status": "passed",
          "title": "should remove OpenAI references",
          "duration": 1.6010340000002543,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API URLs",
          "status": "passed",
          "title": "should sanitize API URLs",
          "duration": 1.6379139999999097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API keys and credentials",
          "status": "passed",
          "title": "should sanitize API keys and credentials",
          "duration": 0.9793660000000273,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize model names",
          "status": "passed",
          "title": "should sanitize model names",
          "duration": 0.9176160000001801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle complex error messages",
          "status": "passed",
          "title": "should handle complex error messages",
          "duration": 0.25325800000018717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should preserve helpful error context",
          "status": "passed",
          "title": "should preserve helpful error context",
          "duration": 0.2923729999997704,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle edge cases",
          "status": "passed",
          "title": "should handle edge cases",
          "duration": 0.2098879999998644,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should sanitize Error objects",
          "status": "passed",
          "title": "should sanitize Error objects",
          "duration": 0.385251000000153,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle non-Error objects",
          "status": "passed",
          "title": "should handle non-Error objects",
          "duration": 0.20155399999975998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle complex objects",
          "status": "passed",
          "title": "should handle complex objects",
          "duration": 0.2180119999998169,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775466,
      "endTime": 1756408775475.218,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/utils/__tests__/error-sanitizer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect node_modules as vendor",
          "status": "passed",
          "title": "should detect node_modules as vendor",
          "duration": 1.020230999999967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect vendor directory as vendor",
          "status": "passed",
          "title": "should detect vendor directory as vendor",
          "duration": 0.41303500000003623,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect bower_components as vendor",
          "status": "passed",
          "title": "should detect bower_components as vendor",
          "duration": 0.2617130000000998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect minified files as vendor",
          "status": "passed",
          "title": "should detect minified files as vendor",
          "duration": 0.2816810000001624,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should not detect application code as vendor",
          "status": "passed",
          "title": "should not detect application code as vendor",
          "duration": 1.0923599999998714,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect by file header comment",
          "status": "passed",
          "title": "should detect by file header comment",
          "duration": 0.6385929999999007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify jQuery from file path",
          "status": "passed",
          "title": "should identify jQuery from file path",
          "duration": 0.8486490000000231,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify Bootstrap from file content",
          "status": "passed",
          "title": "should identify Bootstrap from file content",
          "duration": 0.8250870000001669,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should return null for non-vendor files",
          "status": "passed",
          "title": "should return null for non-vendor files",
          "duration": 0.8134530000002087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should find package.json dependencies",
          "status": "passed",
          "title": "should find package.json dependencies",
          "duration": 0.7364620000003015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should check if file belongs to known dependency",
          "status": "passed",
          "title": "should check if file belongs to known dependency",
          "duration": 0.4453450000000885,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return update action for vendor vulnerabilities",
          "status": "passed",
          "title": "should return update action for vendor vulnerabilities",
          "duration": 0.8155809999998382,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return fix action for application vulnerabilities",
          "status": "passed",
          "title": "should return fix action for application vulnerabilities",
          "duration": 0.36940499999991516,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should not attempt to patch vendor code",
          "status": "passed",
          "title": "should not attempt to patch vendor code",
          "duration": 0.6770779999997103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should recommend safe update version",
          "status": "passed",
          "title": "should recommend safe update version",
          "duration": 1.0606539999998859,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should provide update commands",
          "status": "passed",
          "title": "should provide update commands",
          "duration": 0.5016770000001998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should create vendor-specific issue",
          "status": "passed",
          "title": "should create vendor-specific issue",
          "duration": 0.7266689999996743,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should not create patch PR for vendor files",
          "status": "passed",
          "title": "should not create patch PR for vendor files",
          "duration": 0.3093380000000252,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775195,
      "endTime": 1756408775209.3093,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/vendor/__tests__/vendor-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should authenticate successfully",
          "status": "skipped",
          "title": "should authenticate successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should create and search for test issue",
          "status": "skipped",
          "title": "should create and search for test issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should add comment to issue",
          "status": "skipped",
          "title": "should add comment to issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should link external resource",
          "status": "skipped",
          "title": "should link external resource",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408773139,
      "endTime": 1756408773139,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/jira-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should gather context successfully",
          "status": "passed",
          "title": "should gather context successfully",
          "duration": 1.48223199999984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should use cached context on second call",
          "status": "passed",
          "title": "should use cached context on second call",
          "duration": 0.492558999999801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.6596410000001924,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should generate enhanced solution with deep context",
          "status": "passed",
          "title": "should generate enhanced solution with deep context",
          "duration": 1.056716999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should use enhanced prompt when provided",
          "status": "passed",
          "title": "should use enhanced prompt when provided",
          "duration": 0.7080030000001898,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should build proper context gathering prompt",
          "status": "passed",
          "title": "should build proper context gathering prompt",
          "duration": 0.3747530000000552,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should create minimal context correctly",
          "status": "passed",
          "title": "should create minimal context correctly",
          "duration": 0.4159159999999247,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775428,
      "endTime": 1756408775433.416,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should pass specificVulnerabilities from issueContext to prompt",
          "status": "passed",
          "title": "should pass specificVulnerabilities from issueContext to prompt",
          "duration": 0.7818969999998444,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should log debug info when specificVulnerabilities are present",
          "status": "passed",
          "title": "should log debug info when specificVulnerabilities are present",
          "duration": 0.4528130000001056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should handle missing specificVulnerabilities gracefully",
          "status": "passed",
          "title": "should handle missing specificVulnerabilities gracefully",
          "duration": 0.2106629999998404,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "generateSolution data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests generateSolution data flow should preserve specificVulnerabilities through generateSolution call",
          "status": "passed",
          "title": "should preserve specificVulnerabilities through generateSolution call",
          "duration": 0.32175200000006043,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774681,
      "endTime": 1756408774682.453,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-data-flow.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should check if Claude CLI is available",
          "status": "passed",
          "title": "should check if Claude CLI is available",
          "duration": 0.298598000000311,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should construct a proper prompt",
          "status": "passed",
          "title": "should construct a proper prompt",
          "duration": 0.1435860000001412,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should generate a real solution using Claude CLI",
          "status": "skipped",
          "title": "should generate a real solution using Claude CLI",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775937,
      "endTime": 1756408775937.2986,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should initialize with correct configuration",
          "status": "passed",
          "title": "should initialize with correct configuration",
          "duration": 1.8951339999999846,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle generateSolution request correctly",
          "status": "passed",
          "title": "should handle generateSolution request correctly",
          "duration": 3.258431000000087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle empty response gracefully",
          "status": "passed",
          "title": "should handle empty response gracefully",
          "duration": 0.9974740000000111,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle query errors gracefully",
          "status": "passed",
          "title": "should handle query errors gracefully",
          "duration": 0.8119059999999081,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle invalid JSON response",
          "status": "passed",
          "title": "should handle invalid JSON response",
          "duration": 0.7381749999999556,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should handle missing API key",
          "status": "passed",
          "title": "should handle missing API key",
          "duration": 0.5725439999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should respect timeout configuration",
          "status": "passed",
          "title": "should respect timeout configuration",
          "duration": 202.12930099999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle multiple file changes",
          "status": "passed",
          "title": "should handle multiple file changes",
          "duration": 3.028031999999939,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle security vulnerabilities in input",
          "status": "passed",
          "title": "should handle security vulnerabilities in input",
          "duration": 2.0961970000000747,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle retry logic",
          "status": "passed",
          "title": "should handle retry logic",
          "duration": 2.5682990000000245,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should format system message correctly",
          "status": "passed",
          "title": "should format system message correctly",
          "duration": 2.1565310000000864,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should include file contents in message",
          "status": "passed",
          "title": "should include file contents in message",
          "duration": 2.045468999999912,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle very large responses",
          "status": "passed",
          "title": "should handle very large responses",
          "duration": 4.0190450000000055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle special characters in paths",
          "status": "passed",
          "title": "should handle special characters in paths",
          "duration": 1.9321889999998803,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774061,
      "endTime": 1756408774289.9321,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "RED Phase - Current Single-Phase Failures"
          ],
          "fullName": "Two-Phase Claude Code Conversation RED Phase - Current Single-Phase Failures should fail with single-phase approach (files not edited)",
          "status": "passed",
          "title": "should fail with single-phase approach (files not edited)",
          "duration": 1.0370179999999891,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should successfully edit files then provide JSON with two-phase approach",
          "status": "passed",
          "title": "should successfully edit files then provide JSON with two-phase approach",
          "duration": 1.0529450000001361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should handle conversation flow correctly",
          "status": "passed",
          "title": "should handle conversation flow correctly",
          "duration": 0.7301860000000033,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should use clean separation of concerns",
          "status": "passed",
          "title": "should use clean separation of concerns",
          "duration": 0.18065299999989293,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should handle phase failures gracefully",
          "status": "passed",
          "title": "should handle phase failures gracefully",
          "duration": 0.5440940000000865,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should maintain conversation context between phases",
          "status": "passed",
          "title": "should maintain conversation context between phases",
          "duration": 0.7238330000000133,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should complete within reasonable time",
          "status": "passed",
          "title": "should complete within reasonable time",
          "duration": 0.5791960000001382,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "Integration Tests"
          ],
          "fullName": "Two-Phase Claude Code Conversation Integration Tests should work with real Claude Code SDK",
          "status": "passed",
          "title": "should work with real Claude Code SDK",
          "duration": 0.9355149999998957,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408774368,
      "endTime": 1756408774373.9355,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/two-phase-conversation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Current Bug: Empty validation vulnerabilities array"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Current Bug: Empty validation vulnerabilities array should extract files when validation data has empty vulnerabilities array",
          "status": "passed",
          "title": "should extract files when validation data has empty vulnerabilities array",
          "duration": 0.35968099999990955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 1: Vulnerabilities directly in validation data"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 1: Vulnerabilities directly in validation data should extract file from vulnerability with \"file\" property",
          "status": "passed",
          "title": "should extract file from vulnerability with \"file\" property",
          "duration": 0.179587999999967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"path\" instead of \"file\"",
          "status": "passed",
          "title": "should handle vulnerability with \"path\" instead of \"file\"",
          "duration": 0.10730100000000675,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"location\" property",
          "status": "passed",
          "title": "should handle vulnerability with \"location\" property",
          "duration": 0.09222600000020975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Robust file extraction function"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Robust file extraction function should handle all possible vulnerability structures",
          "status": "passed",
          "title": "should handle all possible vulnerability structures",
          "duration": 0.24677999999994427,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Vendor detection with proper types"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Vendor detection with proper types should detect vendor files correctly",
          "status": "passed",
          "title": "should detect vendor files correctly",
          "duration": 0.11853999999993903,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775451,
      "endTime": 1756408775452.2468,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/vendor-detection-tdd.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should complete full analysis workflow",
          "status": "passed",
          "title": "should complete full analysis workflow",
          "duration": 1.9449680000002445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 1.675948999999946,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should handle timeout",
          "status": "passed",
          "title": "should handle timeout",
          "duration": 203.205148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "configuration"
          ],
          "fullName": "ElixirASTAnalyzer - Integration configuration should validate API key",
          "status": "passed",
          "title": "should validate API key",
          "duration": 1.2459779999999228,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "configuration"
          ],
          "fullName": "ElixirASTAnalyzer - Integration configuration should validate API URL",
          "status": "passed",
          "title": "should validate API URL",
          "duration": 1.2826930000001084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "resource management"
          ],
          "fullName": "ElixirASTAnalyzer - Integration resource management should not leak memory with multiple analyses",
          "status": "passed",
          "title": "should not leak memory with multiple analyses",
          "duration": 1.347483000000011,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "resource management"
          ],
          "fullName": "ElixirASTAnalyzer - Integration resource management should cleanup all resources on cleanup",
          "status": "passed",
          "title": "should cleanup all resources on cleanup",
          "duration": 1.4451030000000173,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775531,
      "endTime": 1756408775743.445,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse single file with single vulnerability",
          "status": "passed",
          "title": "should parse single file with single vulnerability",
          "duration": 1.290864000000056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse multiple files with multiple vulnerabilities",
          "status": "passed",
          "title": "should parse multiple files with multiple vulnerabilities",
          "duration": 0.7515809999999874,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle files with no vulnerabilities gracefully",
          "status": "passed",
          "title": "should handle files with no vulnerabilities gracefully",
          "duration": 0.3534949999998389,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle malformed issue body without crashing",
          "status": "passed",
          "title": "should handle malformed issue body without crashing",
          "duration": 0.23943699999972523,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should extract vulnerability type correctly",
          "status": "passed",
          "title": "should extract vulnerability type correctly",
          "duration": 0.27624299999979485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle special characters in file paths",
          "status": "passed",
          "title": "should handle special characters in file paths",
          "duration": 0.1623320000003332,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should replace unknown.js with actual filenames",
          "status": "passed",
          "title": "should replace unknown.js with actual filenames",
          "duration": 0.5432760000003327,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should handle multiple vulnerabilities and match by line number",
          "status": "passed",
          "title": "should handle multiple vulnerabilities and match by line number",
          "duration": 0.3748259999997572,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should preserve validation data that cannot be matched",
          "status": "passed",
          "title": "should preserve validation data that cannot be matched",
          "duration": 0.23546900000019377,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408775357,
      "endTime": 1756408775362.2354,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/utils/__tests__/issue-body-parser.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should parse JavaScript code successfully",
          "status": "passed",
          "title": "should parse JavaScript code successfully",
          "duration": 6.805199000000357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Python code",
          "status": "passed",
          "title": "should fail to parse Python code",
          "duration": 1.1572909999995318,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Ruby code",
          "status": "passed",
          "title": "should fail to parse Ruby code",
          "duration": 0.8071950000012293,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse PHP code",
          "status": "passed",
          "title": "should fail to parse PHP code",
          "duration": 1.1312849999994796,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785499,
      "endTime": 1756408785509.1313,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/babel-parser-issue.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV3 - Python Support"
          ],
          "fullName": "SecurityDetectorV3 - Python Support should detect SQL injection in Python code using server-side AST",
          "status": "failed",
          "title": "should detect SQL injection in Python code using server-side AST",
          "duration": 2.6947020000006887,
          "failureMessages": [
            "AssertionError: expected 0 to be greater than 0\n    at /home/dylan/dev/rsolv/RSOLV-action/test/detector-v3-python.test.ts:28:36\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1756408785490,
      "endTime": 1756408785492.6946,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/detector-v3-python.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should NOT enable enhanced context by default",
          "status": "passed",
          "title": "should NOT enable enhanced context by default",
          "duration": 0.7737939999988157,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should enable enhanced context only when explicitly requested",
          "status": "failed",
          "title": "should enable enhanced context only when explicitly requested",
          "duration": 0.5179619999998977,
          "failureMessages": [
            "AssertionError: expected \"spy\" to be called at least once\n    at Proxy.<anonymous> (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/expect/dist/index.js:1335:10)\n    at Proxy.<anonymous> (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/chai/chai.js:1618:25)\n    at /home/dylan/dev/rsolv/RSOLV-action/test/enhanced-context-default.test.ts:104:35\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1756408785463,
      "endTime": 1756408785463.7737,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/enhanced-context-default.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 1: Diffie-Hellman Key Exchange (Most Secure)"
          ],
          "fullName": "AST Service Key Exchange Option 1: Diffie-Hellman Key Exchange (Most Secure) should establish shared secret using DH key exchange",
          "status": "passed",
          "title": "should establish shared secret using DH key exchange",
          "duration": 20.72483800000009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 2: ECDH Key Exchange (Modern & Efficient)"
          ],
          "fullName": "AST Service Key Exchange Option 2: ECDH Key Exchange (Modern & Efficient) should establish shared secret using ECDH",
          "status": "passed",
          "title": "should establish shared secret using ECDH",
          "duration": 0.6455359999999928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 3: Pre-shared Key with Secure Transport"
          ],
          "fullName": "AST Service Key Exchange Option 3: Pre-shared Key with Secure Transport should use client-provided key over TLS (simplest secure option)",
          "status": "passed",
          "title": "should use client-provided key over TLS (simplest secure option)",
          "duration": 0.27403400000002875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Current Implementation Issues"
          ],
          "fullName": "AST Service Key Exchange Current Implementation Issues should fail when server uses different key than client",
          "status": "passed",
          "title": "should fail when server uses different key than client",
          "duration": 0.20421100000021397,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785359,
      "endTime": 1756408785381.204,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/key-exchange.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show detector uses client-side ASTPatternInterpreter",
          "status": "passed",
          "title": "should show detector uses client-side ASTPatternInterpreter",
          "duration": 0.5987380000005942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show we need ElixirASTAnalyzer for server-side AST",
          "status": "passed",
          "title": "should show we need ElixirASTAnalyzer for server-side AST",
          "duration": 0.22881000000052154,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should demonstrate that Python detection requires server-side AST",
          "status": "passed",
          "title": "should demonstrate that Python detection requires server-side AST",
          "duration": 0.27892900000006193,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should show that multi-language support is needed",
          "status": "passed",
          "title": "should show that multi-language support is needed",
          "duration": 0.24472599999899103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should detect JS vulnerabilities with current system",
          "status": "passed",
          "title": "should detect JS vulnerabilities with current system",
          "duration": 5.820934999999736,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should NOT attempt to parse non-JS languages with Babel",
          "status": "failed",
          "title": "should NOT attempt to parse non-JS languages with Babel",
          "duration": 0.9087799999997515,
          "failureMessages": [
            "ReferenceError: mock is not defined\n    at /home/dylan/dev/rsolv/RSOLV-action/test/server-ast-integration-safe.test.ts:81:27\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should require server-side AST for accurate multi-language detection",
          "status": "passed",
          "title": "should require server-side AST for accurate multi-language detection",
          "duration": 0.5042839999987336,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should show ElixirASTAnalyzer can handle multiple languages",
          "status": "passed",
          "title": "should show ElixirASTAnalyzer can handle multiple languages",
          "duration": 0.31069399999978486,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785336,
      "endTime": 1756408785345.3108,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-integration-safe.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "status": "skipped",
          "title": "FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should support multiple languages through server AST",
          "status": "skipped",
          "title": "FAILS: detector should support multiple languages through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Multi-Language Detection Requirements"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Multi-Language Detection Requirements FAILS: should detect vulnerabilities in Python code",
          "status": "skipped",
          "title": "FAILS: should detect vulnerabilities in Python code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Integration Point"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Integration Point FAILS: detector constructor should accept ElixirASTAnalyzer",
          "status": "skipped",
          "title": "FAILS: detector constructor should accept ElixirASTAnalyzer",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408776416,
      "endTime": 1756408776416,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-red-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to reconstruct regex from serialized format",
          "status": "failed",
          "title": "should fail to reconstruct regex from serialized format",
          "duration": 4.102371000000858,
          "failureMessages": [
            "AssertionError: expected [Function] to throw an error\n    at Proxy.<anonymous> (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/expect/dist/index.js:1420:16)\n    at Proxy.<anonymous> (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/expect/dist/index.js:1029:14)\n    at Proxy.methodWrapper (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/chai/chai.js:1618:25)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-regex-reconstruction.test.ts:26:64\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle enhanced pattern response with serialized regex",
          "status": "passed",
          "title": "should fail to handle enhanced pattern response with serialized regex",
          "duration": 0.452726999999868,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should demonstrate the need for regex flag mapping",
          "status": "passed",
          "title": "should demonstrate the need for regex flag mapping",
          "duration": 0.3584129999999277,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle nested regex in AST rules",
          "status": "passed",
          "title": "should fail to handle nested regex in AST rules",
          "duration": 0.30918000000019674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle regex in context rules",
          "status": "passed",
          "title": "should fail to handle regex in context rules",
          "duration": 0.30232799999976123,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should correctly reconstruct regex from serialized format",
          "status": "passed",
          "title": "should correctly reconstruct regex from serialized format",
          "duration": 0.1661420000000362,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should handle complex patterns with multiple regex objects",
          "status": "passed",
          "title": "should handle complex patterns with multiple regex objects",
          "duration": 0.19179699999949662,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785187,
      "endTime": 1756408785193.309,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-regex-reconstruction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return JavaScript patterns",
          "status": "passed",
          "title": "should return JavaScript patterns",
          "duration": 0.427719000000252,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return TypeScript patterns (same as JavaScript)",
          "status": "passed",
          "title": "should return TypeScript patterns (same as JavaScript)",
          "duration": 0.36027800000010757,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return empty array for unsupported language",
          "status": "passed",
          "title": "should return empty array for unsupported language",
          "duration": 0.15634899999986374,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should handle case-insensitive language names",
          "status": "passed",
          "title": "should handle case-insensitive language names",
          "duration": 0.2468879999996716,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns of specific type",
          "status": "passed",
          "title": "should return patterns of specific type",
          "duration": 0.10080199999993056,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns from all languages",
          "status": "passed",
          "title": "should return patterns from all languages",
          "duration": 0.05782999999973981,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getAllPatterns"
          ],
          "fullName": "LocalPatternSource getAllPatterns should return minimal fallback patterns",
          "status": "passed",
          "title": "should return minimal fallback patterns",
          "duration": 0.09814300000016374,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should fetch patterns from API",
          "status": "passed",
          "title": "should fetch patterns from API",
          "duration": 0.5358959999994113,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should handle API errors",
          "status": "passed",
          "title": "should handle API errors",
          "duration": 0.18432399999983318,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should fetch patterns for all supported languages",
          "status": "passed",
          "title": "should fetch patterns for all supported languages",
          "duration": 0.3915099999994709,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should continue fetching even if some languages fail",
          "status": "passed",
          "title": "should continue fetching even if some languages fail",
          "duration": 0.41044400000009773,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should use API source when available",
          "status": "passed",
          "title": "should use API source when available",
          "duration": 0.20154400000046735,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should fall back to local source on API error",
          "status": "passed",
          "title": "should fall back to local source on API error",
          "duration": 0.16486199999962992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "status": "passed",
          "title": "should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "duration": 0.2532289999999193,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create HybridPatternSource when API key is provided",
          "status": "passed",
          "title": "should create HybridPatternSource when API key is provided",
          "duration": 0.06535100000019156,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when no API key is provided",
          "status": "passed",
          "title": "should create LocalPatternSource when no API key is provided",
          "duration": 0.05298599999969156,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should pass API URL to HybridPatternSource",
          "status": "passed",
          "title": "should pass API URL to HybridPatternSource",
          "duration": 0.04608700000062527,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783526,
      "endTime": 1756408783530.2532,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-source.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint should call /api/v1/ast/validate NOT /ast/validate",
          "status": "passed",
          "title": "should call /api/v1/ast/validate NOT /ast/validate",
          "duration": 0.3669710000003761,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint fixed implementation correctly calls /api/v1/ast/validate",
          "status": "passed",
          "title": "fixed implementation correctly calls /api/v1/ast/validate",
          "duration": 0.20608499999980268,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "API request format"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression API request format should send correct payload format for validation",
          "status": "passed",
          "title": "should send correct payload format for validation",
          "duration": 0.24919599999975617,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle 404 gracefully and return null",
          "status": "passed",
          "title": "should handle 404 gracefully and return null",
          "duration": 0.2082330000002912,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 0.7678349999996499,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Fixed Implementation"
          ],
          "fullName": "IssueEnricher - Fixed Implementation should successfully validate when using correct endpoint",
          "status": "passed",
          "title": "should successfully validate when using correct endpoint",
          "duration": 0.29099200000018755,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783802,
      "endTime": 1756408783804.7678,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/validation/enricher.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1756408776416,
      "endTime": 1756408776416,
      "status": "failed",
      "message": "[vitest] There was an error when mocking a module. If you are using \"vi.mock\" factory, make sure there are no top level variables inside, since this call is hoisted to top of the file. Read more: https://vitest.dev/api/vi.html#vi-mock",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/scanner/repository-scanner-ast.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Integration"
          ],
          "fullName": "AI Integration analyzeIssue should analyze an issue and return structured data",
          "status": "passed",
          "title": "analyzeIssue should analyze an issue and return structured data",
          "duration": 0.5090430000000197,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Integration"
          ],
          "fullName": "AI Integration generateSolution should create file changes based on analysis",
          "status": "passed",
          "title": "generateSolution should create file changes based on analysis",
          "duration": 201.80742699999973,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Integration"
          ],
          "fullName": "AI Integration processIssues should handle multiple issues",
          "status": "passed",
          "title": "processIssues should handle multiple issues",
          "duration": 202.55641299999843,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408784603,
      "endTime": 1756408785008.5564,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/ai-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "getInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests getInstance should create a new instance on first call",
          "status": "passed",
          "title": "should create a new instance on first call",
          "duration": 4.431122999999843,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "getInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests getInstance should reuse existing instance for same API key",
          "status": "passed",
          "title": "should reuse existing instance for same API key",
          "duration": 1.077413000000206,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "getInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests getInstance should create separate instances for different API keys",
          "status": "passed",
          "title": "should create separate instances for different API keys",
          "duration": 3.08710300000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "getInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests getInstance should retry on initialization failure",
          "status": "passed",
          "title": "should retry on initialization failure",
          "duration": 3009.9112179999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "getInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests getInstance should throw error after max retries",
          "status": "passed",
          "title": "should throw error after max retries",
          "duration": 3007.359659,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "clearInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests clearInstance should clear a specific instance",
          "status": "passed",
          "title": "should clear a specific instance",
          "duration": 0.3811299999997573,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "clearInstance"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests clearInstance should handle clearing non-existent instance gracefully",
          "status": "passed",
          "title": "should handle clearing non-existent instance gracefully",
          "duration": 0.18499999999949068,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "cleanup"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests cleanup should clear all instances",
          "status": "passed",
          "title": "should clear all instances",
          "duration": 0.3041830000001937,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "credential refresh"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests credential refresh should store credentials with proper expiration",
          "status": "passed",
          "title": "should store credentials with proper expiration",
          "duration": 0.3771530000003622,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CredentialManagerSingleton Integration Tests",
            "concurrent access"
          ],
          "fullName": "CredentialManagerSingleton Integration Tests concurrent access should handle concurrent getInstance calls for same key",
          "status": "passed",
          "title": "should handle concurrent getInstance calls for same key",
          "duration": 0.343710000000101,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408777480,
      "endTime": 1756408783508.3438,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/credential-singleton.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration handleExternalWebhook should process Jira issues",
          "status": "passed",
          "title": "handleExternalWebhook should process Jira issues",
          "duration": 1.934201999999459,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration handleExternalWebhook should process Linear issues",
          "status": "passed",
          "title": "handleExternalWebhook should process Linear issues",
          "duration": 1.3293789999997898,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration handleExternalWebhook should handle unsupported sources",
          "status": "passed",
          "title": "handleExternalWebhook should handle unsupported sources",
          "duration": 0.7776220000005196,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration handleExternalWebhook should skip issues without automation label",
          "status": "passed",
          "title": "handleExternalWebhook should skip issues without automation label",
          "duration": 0.6600490000000718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration getRepositoryFromExternalIssue should map to GitHub repository",
          "status": "passed",
          "title": "getRepositoryFromExternalIssue should map to GitHub repository",
          "duration": 0.8721179999993183,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "External Issue Tracker Integration"
          ],
          "fullName": "External Issue Tracker Integration getRepositoryFromExternalIssue should fallback to environment variables",
          "status": "passed",
          "title": "getRepositoryFromExternalIssue should fallback to environment variables",
          "duration": 0.6774169999998776,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408784566,
      "endTime": 1756408784572.6775,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/external-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitHub Integration",
            "Issue Detection"
          ],
          "fullName": "GitHub Integration Issue Detection should detect security issues with labels",
          "status": "passed",
          "title": "should detect security issues with labels",
          "duration": 0.7593669999996564,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Integration",
            "Issue Detection"
          ],
          "fullName": "GitHub Integration Issue Detection should handle empty issue list",
          "status": "passed",
          "title": "should handle empty issue list",
          "duration": 0.4009719999994559,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Integration",
            "Pull Request Creation"
          ],
          "fullName": "GitHub Integration Pull Request Creation should create a pull request with fixes",
          "status": "passed",
          "title": "should create a pull request with fixes",
          "duration": 1.1291949999995268,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Integration",
            "File Operations"
          ],
          "fullName": "GitHub Integration File Operations should get repository files",
          "status": "passed",
          "title": "should get repository files",
          "duration": 0.49223500000061904,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Integration",
            "File Operations"
          ],
          "fullName": "GitHub Integration File Operations should handle file not found",
          "status": "passed",
          "title": "should handle file not found",
          "duration": 0.3345980000003692,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783681,
      "endTime": 1756408783684.4922,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/github-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #610: API endpoint mismatch"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #610: API endpoint mismatch should use /api/v1/vulnerabilities/validate as primary endpoint",
          "status": "passed",
          "title": "should use /api/v1/vulnerabilities/validate as primary endpoint",
          "duration": 0.31351099999938015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should return vulnerability validation results not empty array",
          "status": "passed",
          "title": "should return vulnerability validation results not empty array",
          "duration": 0.23938600000019505,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should handle NoSQL injection with $where correctly",
          "status": "passed",
          "title": "should handle NoSQL injection with $where correctly",
          "duration": 0.18762499999957072,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Cache functionality regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Cache functionality regression should include cache stats in response",
          "status": "passed",
          "title": "should include cache stats in response",
          "duration": 0.15338299999984883,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should provide clear error message when API key is invalid",
          "status": "passed",
          "title": "should provide clear error message when API key is invalid",
          "duration": 0.13822299999992538,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should handle malformed repository names gracefully",
          "status": "passed",
          "title": "should handle malformed repository names gracefully",
          "duration": 0.11877999999978783,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "E2E Regression: Full validation flow"
          ],
          "fullName": "E2E Regression: Full validation flow should complete validation workflow successfully",
          "status": "passed",
          "title": "should complete validation workflow successfully",
          "duration": 0.09080400000038935,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783585,
      "endTime": 1756408783586.1533,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/validation-endpoint.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should send correct batch payload format to validation API",
          "status": "passed",
          "title": "should send correct batch payload format to validation API",
          "duration": 1.940443999999843,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should handle validation response correctly",
          "status": "passed",
          "title": "should handle validation response correctly",
          "duration": 0.4194000000006781,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783654,
      "endTime": 1756408783656.4194,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/validation-payload-format.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect files mentioned without quotes",
          "status": "passed",
          "title": "should detect files mentioned without quotes",
          "duration": 0.5867920000000595,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect common auth files mentioned casually",
          "status": "passed",
          "title": "should detect common auth files mentioned casually",
          "duration": 0.43884799999977986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Solution:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Solution:\" keyword",
          "duration": 0.3842139999997016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Fix:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Fix:\" keyword",
          "duration": 0.3452390000002197,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should use whole response as approach if no keywords found",
          "status": "passed",
          "title": "should use whole response as approach if no keywords found",
          "duration": 0.3585929999990185,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect multiple file types",
          "status": "passed",
          "title": "should detect multiple file types",
          "duration": 0.38897499999984575,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle responses with \"To fix this\" keyword",
          "status": "passed",
          "title": "should handle responses with \"To fix this\" keyword",
          "duration": 0.3011210000004212,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should still fail if response is too short",
          "status": "passed",
          "title": "should still fail if response is too short",
          "duration": 0.28238599999895087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle mixed format responses",
          "status": "passed",
          "title": "should handle mixed format responses",
          "duration": 0.36003100000016275,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785174,
      "endTime": 1756408785178.36,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/analyzer-parsing.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should initialize Claude Code adapter",
          "status": "passed",
          "title": "should initialize Claude Code adapter",
          "duration": 0.7631140000003143,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should generate solution with Claude Code when available",
          "status": "passed",
          "title": "should generate solution with Claude Code when available",
          "duration": 1.6553780000003826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should fall back gracefully when Claude Code is not available",
          "status": "passed",
          "title": "should fall back gracefully when Claude Code is not available",
          "duration": 0.3331509999998161,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.6615719999999783,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 0.40222300000004907,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should integrate with standard AI client",
          "status": "passed",
          "title": "should integrate with standard AI client",
          "duration": 0.13966200000049867,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783572,
      "endTime": 1756408783576.4023,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for Anthropic when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for Anthropic when vending is disabled",
          "duration": 0.4731339999998454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for OpenAI when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for OpenAI when vending is disabled",
          "duration": 0.3428779999994731,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 0.5316590000002179,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should throw error for missing API key",
          "status": "passed",
          "title": "should throw error for missing API key",
          "duration": 0.1893209999998362,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785393,
      "endTime": 1756408785395.1892,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/client-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass test results to adapter on first attempt",
          "status": "passed",
          "title": "should pass test results to adapter on first attempt",
          "duration": 48.46249700000044,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass validation context on retry after failed validation",
          "status": "passed",
          "title": "should pass validation context on retry after failed validation",
          "duration": 0.6000079999994341,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should enhance issue context with test failure info on retry",
          "status": "passed",
          "title": "should enhance issue context with test failure info on retry",
          "duration": 17.51485000000139,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785045,
      "endTime": 1756408785111.515,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-prompt-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should detect security issues and enable security analysis mode",
          "status": "passed",
          "title": "should detect security issues and enable security analysis mode",
          "duration": 202.06984999999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should include security analysis data when processing security issues",
          "status": "passed",
          "title": "should include security analysis data when processing security issues",
          "duration": 202.05248500000016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should respect enableSecurityAnalysis configuration flag",
          "status": "passed",
          "title": "should respect enableSecurityAnalysis configuration flag",
          "duration": 202.42443599999933,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783874,
      "endTime": 1756408784481.4243,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/processor-security-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "status": "passed",
          "title": "should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "duration": 1.465541000000485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when useVendedCredentials is false",
          "status": "passed",
          "title": "should not create credential manager when useVendedCredentials is false",
          "duration": 0.3474800000003597,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not create credential manager when rsolvApiKey is missing",
          "duration": 0.3592239999998128,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should handle credential manager creation errors gracefully",
          "status": "passed",
          "title": "should handle credential manager creation errors gracefully",
          "duration": 0.40692699999999604,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783743,
      "endTime": 1756408783746.407,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/unified-processor-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set up container when Docker is available",
          "status": "passed",
          "title": "should set up container when Docker is available",
          "duration": 2.1204990000005637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should disable containers when Docker is not available",
          "status": "passed",
          "title": "should disable containers when Docker is not available",
          "duration": 2.3377440000003844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should skip setup if containers are already disabled",
          "status": "passed",
          "title": "should skip setup if containers are already disabled",
          "duration": 0.6552009999995789,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate container configuration",
          "status": "passed",
          "title": "should validate container configuration",
          "duration": 1.4292870000008406,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate memory limit format",
          "status": "passed",
          "title": "should validate memory limit format",
          "duration": 1.4352799999996932,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate CPU limit format",
          "status": "passed",
          "title": "should validate CPU limit format",
          "duration": 1.294899999998961,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate timeout value",
          "status": "passed",
          "title": "should validate timeout value",
          "duration": 1.119235000000117,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should handle image pull failure in development mode",
          "status": "passed",
          "title": "should handle image pull failure in development mode",
          "duration": 0.8597690000005969,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should throw on image pull failure in production mode",
          "status": "passed",
          "title": "should throw on image pull failure in production mode",
          "duration": 1.080667000000176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply strict security profile",
          "status": "passed",
          "title": "should apply strict security profile",
          "duration": 0.6091429999996762,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply relaxed security profile",
          "status": "passed",
          "title": "should apply relaxed security profile",
          "duration": 0.5096699999994598,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should configure network restrictions",
          "status": "passed",
          "title": "should configure network restrictions",
          "duration": 0.4230810000008205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set environment variables",
          "status": "passed",
          "title": "should set environment variables",
          "duration": 0.40360599999985425,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785302,
      "endTime": 1756408785317.4036,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/containers/__tests__/setup.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies positive sentiment correctly",
          "status": "passed",
          "title": "classifies positive sentiment correctly",
          "duration": 0.42833499999869673,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies negative sentiment correctly",
          "status": "passed",
          "title": "classifies negative sentiment correctly",
          "duration": 0.23317900000074587,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment defaults to neutral sentiment when text is ambiguous",
          "status": "passed",
          "title": "defaults to neutral sentiment when text is ambiguous",
          "duration": 0.2137620000012248,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns positive sentiment for approved reviews regardless of content",
          "status": "passed",
          "title": "returns positive sentiment for approved reviews regardless of content",
          "duration": 0.15380499999992026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns negative sentiment for change requests regardless of content",
          "status": "passed",
          "title": "returns negative sentiment for change requests regardless of content",
          "duration": 0.1400709999998071,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview analyzes comment content when review state is commented",
          "status": "passed",
          "title": "analyzes comment content when review state is commented",
          "duration": 0.18630599999960396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook processes PR comment events correctly",
          "status": "passed",
          "title": "processes PR comment events correctly",
          "duration": 0.3744860000006156,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook returns null for irrelevant webhook events",
          "status": "passed",
          "title": "returns null for irrelevant webhook events",
          "duration": 0.2509780000000319,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785405,
      "endTime": 1756408785407.251,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/collector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt adds patterns to avoid from negative feedback",
          "status": "passed",
          "title": "adds patterns to avoid from negative feedback",
          "duration": 0.3800840000003518,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt returns the original prompt when there are no patterns",
          "status": "passed",
          "title": "returns the original prompt when there are no patterns",
          "duration": 0.14002200000049925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt includes examples of successful solutions",
          "status": "passed",
          "title": "includes examples of successful solutions",
          "duration": 0.1251910000000862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext returns a valid enhancement context for a given issue",
          "status": "passed",
          "title": "returns a valid enhancement context for a given issue",
          "duration": 0.6506530000006023,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext handles errors gracefully",
          "status": "passed",
          "title": "handles errors gracefully",
          "duration": 0.7319050000005518,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783794,
      "endTime": 1756408783795.732,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/enhancer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly query Linear GraphQL API for labeled issues",
          "status": "skipped",
          "title": "should correctly query Linear GraphQL API for labeled issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should integrate with issue detector for multi-platform detection",
          "status": "skipped",
          "title": "should integrate with issue detector for multi-platform detection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should handle pagination for large result sets",
          "status": "skipped",
          "title": "should handle pagination for large result sets",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly map repository information from issue description",
          "status": "skipped",
          "title": "should correctly map repository information from issue description",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should be triggered by GitHub Actions schedule",
          "status": "skipped",
          "title": "should be triggered by GitHub Actions schedule",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should handle concurrent platform checks",
          "status": "skipped",
          "title": "should handle concurrent platform checks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should find issues with either autofix OR rsolv label",
          "status": "skipped",
          "title": "should find issues with either autofix OR rsolv label",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should filter by team if teamId is provided",
          "status": "skipped",
          "title": "should filter by team if teamId is provided",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408776416,
      "endTime": 1756408776416,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/platforms/linear/linear-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should execute mitigation with validation data from prior phase",
          "status": "passed",
          "title": "should execute mitigation with validation data from prior phase",
          "duration": 110.98371099999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should handle missing validation data gracefully",
          "status": "passed",
          "title": "should handle missing validation data gracefully",
          "duration": 3.939552000000049,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should retrieve validation data from PhaseDataClient if not provided",
          "status": "passed",
          "title": "should retrieve validation data from PhaseDataClient if not provided",
          "duration": 5.6225729999999885,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should apply fix using GitBasedClaudeCodeAdapter",
          "status": "passed",
          "title": "should apply fix using GitBasedClaudeCodeAdapter",
          "duration": 6.0126129999999876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should verify tests pass after fix (GREEN phase)",
          "status": "passed",
          "title": "should verify tests pass after fix (GREEN phase)",
          "duration": 1.7726749999999356,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should retry fix if tests fail",
          "status": "passed",
          "title": "should retry fix if tests fail",
          "duration": 1.4727519999999004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should refactor code to match codebase style",
          "status": "passed",
          "title": "should refactor code to match codebase style",
          "duration": 1.1263450000000148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should create educational PR with test results",
          "status": "passed",
          "title": "should create educational PR with test results",
          "duration": 0.9728890000000092,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should include before/after code in PR description",
          "status": "passed",
          "title": "should include before/after code in PR description",
          "duration": 0.9048280000000659,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should add security education context to PR",
          "status": "passed",
          "title": "should add security education context to PR",
          "duration": 0.9235639999999421,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle multiple issues in batch",
          "status": "skipped",
          "title": "should handle multiple issues in batch",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle partial failures gracefully",
          "status": "skipped",
          "title": "should handle partial failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle missing AI adapter gracefully",
          "status": "passed",
          "title": "should handle missing AI adapter gracefully",
          "duration": 2.7838779999999588,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle test execution failures",
          "status": "passed",
          "title": "should handle test execution failures",
          "duration": 0.9074309999999741,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should timeout if fix takes too long",
          "status": "passed",
          "title": "should timeout if fix takes too long",
          "duration": 205.26052100000004,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408777006,
      "endTime": 1756408777349.2605,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/mitigation-only-mode.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests PhaseExecutor has all decomposed methods",
          "status": "passed",
          "title": "PhaseExecutor has all decomposed methods",
          "duration": 0.5339389999999185,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeScanForIssue returns correct structure",
          "status": "failed",
          "title": "executeScanForIssue returns correct structure",
          "duration": 2.9825040000005174,
          "failureMessages": [
            "AssertionError: expected { success: false, phase: 'scan', …(1) } to have property \"data\"\n    at /home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-decomposition-simple.test.ts:80:20\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeValidateForIssue accepts scan data",
          "status": "passed",
          "title": "executeValidateForIssue accepts scan data",
          "duration": 0.13738999999986845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeMitigateForIssue accepts scan and validation data",
          "status": "passed",
          "title": "executeMitigateForIssue accepts scan and validation data",
          "duration": 0.10161799999968935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeThreePhaseForIssue coordinates all phases",
          "status": "passed",
          "title": "executeThreePhaseForIssue coordinates all phases",
          "duration": 0.24306299999989278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Phase data flows between phases correctly",
          "status": "passed",
          "title": "Phase data flows between phases correctly",
          "duration": 0.20484099999976024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Aborts if scan determines issue cannot be fixed",
          "status": "passed",
          "title": "Aborts if scan determines issue cannot be fixed",
          "duration": 0.16455099999984668,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Helper methods are accessible",
          "status": "passed",
          "title": "Helper methods are accessible",
          "duration": 6.402028999999857,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783834,
      "endTime": 1756408783845.402,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-decomposition-simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should generate basic OWASP compliance report",
          "status": "passed",
          "title": "should generate basic OWASP compliance report",
          "duration": 1.6964719999996305,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should categorize vulnerabilities by OWASP category",
          "status": "passed",
          "title": "should categorize vulnerabilities by OWASP category",
          "duration": 0.7843409999986761,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should calculate compliance status based on severity",
          "status": "passed",
          "title": "should calculate compliance status based on severity",
          "duration": 0.6737059999995836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "SOC 2 Compliance Report"
          ],
          "fullName": "ComplianceGenerator SOC 2 Compliance Report should generate SOC 2 compliance report",
          "status": "passed",
          "title": "should generate SOC 2 compliance report",
          "duration": 1.036631999999372,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should generate markdown compliance report",
          "status": "passed",
          "title": "should generate markdown compliance report",
          "duration": 21.92438299999958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should handle empty vulnerability lists",
          "status": "passed",
          "title": "should handle empty vulnerability lists",
          "duration": 0.1880959999998595,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785228,
      "endTime": 1756408785255.188,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/compliance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should correlate vulnerabilities with known CVE entries",
          "status": "passed",
          "title": "should correlate vulnerabilities with known CVE entries",
          "duration": 10.388888999999836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should map CVE severity scores to our risk levels",
          "status": "passed",
          "title": "should map CVE severity scores to our risk levels",
          "duration": 0.18874400000004243,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should handle multiple vulnerability types",
          "status": "passed",
          "title": "should handle multiple vulnerability types",
          "duration": 10.236705000000256,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-89 (SQL Injection)",
          "status": "passed",
          "title": "should find CVEs related to CWE-89 (SQL Injection)",
          "duration": 0.2611109999998007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-79 (XSS)",
          "status": "passed",
          "title": "should find CVEs related to CWE-79 (XSS)",
          "duration": 0.07233600000017759,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should handle unknown CWE IDs gracefully",
          "status": "passed",
          "title": "should handle unknown CWE IDs gracefully",
          "duration": 10.127622999999403,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should enhance vulnerability risk assessment with CVE data",
          "status": "passed",
          "title": "should enhance vulnerability risk assessment with CVE data",
          "duration": 0.18321800000012445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should calculate appropriate enhanced risk levels",
          "status": "passed",
          "title": "should calculate appropriate enhanced risk levels",
          "duration": 0.13888800000040646,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should have access to CVE database with recent entries",
          "status": "passed",
          "title": "should have access to CVE database with recent entries",
          "duration": 0.170722000000751,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should provide CVE search capabilities",
          "status": "passed",
          "title": "should provide CVE search capabilities",
          "duration": 0.21083600000019942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should generate CVE-enhanced security reports",
          "status": "passed",
          "title": "should generate CVE-enhanced security reports",
          "duration": 0.23785399999997026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should provide actionable CVE-based recommendations",
          "status": "passed",
          "title": "should provide actionable CVE-based recommendations",
          "duration": 0.12261799999942014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should cache CVE lookups for better performance",
          "status": "passed",
          "title": "should cache CVE lookups for better performance",
          "duration": 10.146623000000545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should handle large vulnerability sets efficiently",
          "status": "passed",
          "title": "should handle large vulnerability sets efficiently",
          "duration": 0.15202599999975064,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783603,
      "endTime": 1756408783646.152,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/cve-correlator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Ruby SQL injection with factory patterns",
          "status": "passed",
          "title": "should detect Ruby SQL injection with factory patterns",
          "duration": 1.0160519999990356,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python SQL injection",
          "status": "passed",
          "title": "should detect Python SQL injection",
          "duration": 0.6887390000010782,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python pickle deserialization",
          "status": "passed",
          "title": "should detect Python pickle deserialization",
          "duration": 0.465981000001193,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should handle multiple patterns correctly",
          "status": "failed",
          "title": "should handle multiple patterns correctly",
          "duration": 0.9973559999998542,
          "failureMessages": [
            "AssertionError: expected 2 to be greater than 2\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/detector-v2-patterns.test.ts:87:36\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should not have regex serialization issues",
          "status": "passed",
          "title": "should not have regex serialization issues",
          "duration": 1.598524000000907,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785440,
      "endTime": 1756408785444.5986,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/detector-v2-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in backticks",
          "status": "passed",
          "title": "should detect file paths in backticks",
          "duration": 0.23057199999948352,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in Affected Files section",
          "status": "passed",
          "title": "should detect file paths in Affected Files section",
          "duration": 0.2663990000000922,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths with File: prefix in code blocks",
          "status": "passed",
          "title": "should detect file paths with File: prefix in code blocks",
          "duration": 0.23442700000032346,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in plain comments within code blocks",
          "status": "passed",
          "title": "should detect file paths in plain comments within code blocks",
          "duration": 0.15710300000046118,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect various file path comment formats",
          "status": "passed",
          "title": "should detect various file path comment formats",
          "duration": 0.17564800000036485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect SQL injection vulnerability in file content",
          "status": "passed",
          "title": "should detect SQL injection vulnerability in file content",
          "duration": 0.49481699999978446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect XSS vulnerability in file content",
          "status": "passed",
          "title": "should detect XSS vulnerability in file content",
          "duration": 0.4568310000004203,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect SQL injection from issue title",
          "status": "passed",
          "title": "should detect SQL injection from issue title",
          "duration": 0.1592819999996209,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect XSS from issue title",
          "status": "passed",
          "title": "should detect XSS from issue title",
          "duration": 0.12989100000049802,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783811,
      "endTime": 1756408783813.4568,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/validation/__tests__/enricher.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should generate correct JQL for both rsolv and autofix labels",
          "status": "passed",
          "title": "should generate correct JQL for both rsolv and autofix labels",
          "duration": 0.6945930000001681,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should handle custom label configurations",
          "status": "passed",
          "title": "should handle custom label configurations",
          "duration": 0.3430559999997058,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search demonstrates JQL queries for different scenarios",
          "status": "passed",
          "title": "demonstrates JQL queries for different scenarios",
          "duration": 0.46181799999976647,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785473,
      "endTime": 1756408785475.462,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/label-search.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should include specific vulnerability details when provided",
          "status": "passed",
          "title": "should include specific vulnerability details when provided",
          "duration": 0.7762860000002547,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should forbid modifying test files explicitly",
          "status": "passed",
          "title": "should forbid modifying test files explicitly",
          "duration": 0.3395010000003822,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should group vulnerabilities by file",
          "status": "passed",
          "title": "should group vulnerabilities by file",
          "duration": 0.25862299999971583,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785418,
      "endTime": 1756408785420.2585,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail when Claude only provides JSON without editing files",
          "status": "passed",
          "title": "should fail when Claude only provides JSON without editing files",
          "duration": 0.9210720000000947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail to create PR when files are not actually modified",
          "status": "passed",
          "title": "should fail to create PR when files are not actually modified",
          "duration": 0.34432600000036473,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should successfully edit files when prompt explicitly requires Edit tool usage",
          "status": "passed",
          "title": "should successfully edit files when prompt explicitly requires Edit tool usage",
          "duration": 0.6475430000000415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should validate that both Edit tools AND JSON are used",
          "status": "passed",
          "title": "should validate that both Edit tools AND JSON are used",
          "duration": 0.5171300000001793,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should use concise but effective prompt structure",
          "status": "passed",
          "title": "should use concise but effective prompt structure",
          "duration": 0.7575229999993098,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should maintain backward compatibility with existing adapters",
          "status": "passed",
          "title": "should maintain backward compatibility with existing adapters",
          "duration": 0.5500050000000556,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408783771,
      "endTime": 1756408783774.55,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-prompt.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should process issue successfully with git-based approach",
          "status": "passed",
          "title": "should process issue successfully with git-based approach",
          "duration": 2.1010690000002796,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if repository has uncommitted changes",
          "status": "passed",
          "title": "should fail if repository has uncommitted changes",
          "duration": 0.5625200000004043,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if issue cannot be fixed",
          "status": "passed",
          "title": "should fail if issue cannot be fixed",
          "duration": 0.34740400000009686,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 0.5865089999997508,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408784530,
      "endTime": 1756408784533.5864,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/git-based-processor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Anthropic Client"
          ],
          "fullName": "Anthropic Client constructor should initialize with default values",
          "status": "passed",
          "title": "constructor should initialize with default values",
          "duration": 0.3036759999995411,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client"
          ],
          "fullName": "Anthropic Client constructor should accept valid API key",
          "status": "passed",
          "title": "constructor should accept valid API key",
          "duration": 0.15785600000162958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client"
          ],
          "fullName": "Anthropic Client analyzeIssue should return issue analysis",
          "status": "passed",
          "title": "analyzeIssue should return issue analysis",
          "duration": 0.31041000000004715,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client"
          ],
          "fullName": "Anthropic Client generateSolution should return pull request solution",
          "status": "passed",
          "title": "generateSolution should return pull request solution",
          "duration": 0.30987499999901047,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785431,
      "endTime": 1756408785432.3098,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/providers/__tests__/anthropic.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should store and retrieve validation data with correct structure",
          "status": "passed",
          "title": "should store and retrieve validation data with correct structure",
          "duration": 5.538241999998718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should handle the actual structure returned by retrievePhaseResults",
          "status": "passed",
          "title": "should handle the actual structure returned by retrievePhaseResults",
          "duration": 1.4260029999986727,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785157,
      "endTime": 1756408785164.426,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/phase-data-persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect eval injection",
          "status": "failed",
          "title": "should detect eval injection",
          "duration": 1.9136639999996987,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:48:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect SQL injection",
          "status": "failed",
          "title": "should detect SQL injection",
          "duration": 0.5982329999997091,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:78:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect XSS vulnerabilities",
          "status": "failed",
          "title": "should detect XSS vulnerabilities",
          "duration": 0.6061529999997219,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:106:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect Python eval usage",
          "status": "failed",
          "title": "should detect Python eval usage",
          "duration": 0.5855270000001838,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:138:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect command injection",
          "status": "failed",
          "title": "should detect command injection",
          "duration": 0.5608249999995678,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:167:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "multi-language support"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection multi-language support should handle mixed language files",
          "status": "failed",
          "title": "should handle mixed language files",
          "duration": 0.5254820000000109,
          "failureMessages": [
            "TypeError: analyzer.analyzeFiles is not a function\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:216:37\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:155:11\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:26\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1897:20\n    at new Promise (<anonymous>)\n    at runWithTimeout (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1863:10)\n    at runTest (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1574:12)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at runSuite (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)\n    at runSuite (file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:1729:8)"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should filter out false positives based on confidence",
          "status": "failed",
          "title": "should filter out false positives based on confidence",
          "duration": 0.5426779999997962,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:244:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should provide confidence scores",
          "status": "failed",
          "title": "should provide confidence scores",
          "duration": 0.5305120000002717,
          "failureMessages": [
            "Error: Invalid response: request ID mismatch\n    at ElixirASTAnalyzer.sendRequest (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:289:15)\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at ElixirASTAnalyzer.analyze (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:82:22)\n    at ElixirASTAnalyzer.analyzeFile (/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/elixir-ast-analyzer.ts:96:22)\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts:270:22\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1756408783754,
      "endTime": 1756408783759.5427,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback to regex detection when AST service is unavailable",
          "status": "skipped",
          "title": "should fallback to regex detection when AST service is unavailable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST parsing times out",
          "status": "skipped",
          "title": "should fallback when AST parsing times out",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST returns parse errors",
          "status": "skipped",
          "title": "should fallback when AST returns parse errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should prefer AST results when available",
          "status": "skipped",
          "title": "should prefer AST results when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should handle mixed results (some AST, some fallback)",
          "status": "skipped",
          "title": "should handle mixed results (some AST, some fallback)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should lower confidence for regex-only detections",
          "status": "skipped",
          "title": "should lower confidence for regex-only detections",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should not double-count vulnerabilities detected by both methods",
          "status": "skipped",
          "title": "should not double-count vulnerabilities detected by both methods",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408776416,
      "endTime": 1756408776416,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/fallback-strategy.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "status": "passed",
          "title": "should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "duration": 0.3447219999998197,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that ASTPatternInterpreter only supports JS/TS",
          "status": "passed",
          "title": "should show that ASTPatternInterpreter only supports JS/TS",
          "duration": 0.09779499999967811,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Desired State - These should guide GREEN phase"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Desired State - These should guide GREEN phase detector should use ElixirASTAnalyzer for multi-language support",
          "status": "passed",
          "title": "detector should use ElixirASTAnalyzer for multi-language support",
          "duration": 0.05460499999981039,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Memory Safety Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Memory Safety Check should not create detector in a way that causes memory issues",
          "status": "passed",
          "title": "should not create detector in a way that causes memory issues",
          "duration": 0.17201699999986886,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787987,
      "endTime": 1756408787987.3447,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-unit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should not include tier parameter in request",
          "status": "passed",
          "title": "fetchPatterns should not include tier parameter in request",
          "duration": 0.6512540000001081,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns response should not contain tier fields",
          "status": "passed",
          "title": "fetchPatterns response should not contain tier fields",
          "duration": 0.5662159999999403,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should return all patterns with valid API key",
          "status": "passed",
          "title": "fetchPatterns should return all patterns with valid API key",
          "duration": 0.31197199999996883,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns without API key should return demo patterns only",
          "status": "failed",
          "title": "fetchPatterns without API key should return demo patterns only",
          "duration": 1.8798239999998714,
          "failureMessages": [
            "AssertionError: expected 'Bearer rsolv_test_full_access_no_quot…' to be undefined\n    at /home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-api-client-tier-removal.test.ts:118:40\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access deprecated fetchPatternsByTier should still work for backward compatibility",
          "status": "passed",
          "title": "deprecated fetchPatternsByTier should still work for backward compatibility",
          "duration": 0.4828339999999116,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access PatternResponse type should not require tier fields",
          "status": "passed",
          "title": "PatternResponse type should not require tier fields",
          "duration": 0.3835789999998269,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access error messages should not mention tiers",
          "status": "passed",
          "title": "error messages should not mention tiers",
          "duration": 1.049154999999928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Pattern counting without tiers"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Pattern counting without tiers should return total pattern count across all languages",
          "status": "passed",
          "title": "should return total pattern count across all languages",
          "duration": 1.5443969999998899,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787768,
      "endTime": 1756408787775.5444,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-api-client-tier-removal.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should reconstruct regex from serialized format",
          "status": "passed",
          "title": "should reconstruct regex from serialized format",
          "duration": 0.4429139999999734,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle multiple regex with different flags",
          "status": "passed",
          "title": "should handle multiple regex with different flags",
          "duration": 0.15603299999997944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in AST rules",
          "status": "passed",
          "title": "should handle regex in AST rules",
          "duration": 0.12267799999995077,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in context rules",
          "status": "passed",
          "title": "should handle regex in context rules",
          "duration": 0.14757600000007187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle deeply nested regex objects",
          "status": "passed",
          "title": "should handle deeply nested regex objects",
          "duration": 0.1042010000001028,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle mixed string and regex patterns gracefully",
          "status": "passed",
          "title": "should handle mixed string and regex patterns gracefully",
          "duration": 0.15383299999984956,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787759,
      "endTime": 1756408787760.1538,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-regex-reconstruction-success.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create singleton instance",
          "status": "passed",
          "title": "should create singleton instance",
          "duration": 0.2626180000002023,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should respect log level configuration",
          "status": "passed",
          "title": "should respect log level configuration",
          "duration": 0.2552699999998822,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create log directory when enabled",
          "status": "passed",
          "title": "should create log directory when enabled",
          "duration": 0.3830249999998614,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log conversation to file",
          "status": "passed",
          "title": "should log conversation to file",
          "duration": 0.8660279999999148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log summary when enabled",
          "status": "passed",
          "title": "should log summary when enabled",
          "duration": 10.556201000000101,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787945,
      "endTime": 1756408787956.5562,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ai/conversation-logger.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should verify environment variable is set when using vended credentials",
          "status": "passed",
          "title": "should verify environment variable is set when using vended credentials",
          "duration": 0.14544200000000274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when not using vended credentials",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when not using vended credentials",
          "duration": 0.07617200000004232,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "duration": 0.052361999999902764,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787990,
      "endTime": 1756408787990.1455,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ai/vended-credentials-env.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Issue: Multiple credential managers created"
          ],
          "fullName": "Credential Lifecycle Issues Issue: Multiple credential managers created should demonstrate the current problem - multiple managers",
          "status": "passed",
          "title": "should demonstrate the current problem - multiple managers",
          "duration": 5.220115999999962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 1: Singleton credential manager"
          ],
          "fullName": "Credential Lifecycle Issues Solution 1: Singleton credential manager should reuse the same credential manager instance",
          "status": "passed",
          "title": "should reuse the same credential manager instance",
          "duration": 1.1448239999999714,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 2: Handle credential expiration gracefully"
          ],
          "fullName": "Credential Lifecycle Issues Solution 2: Handle credential expiration gracefully should refresh expired credentials automatically",
          "status": "skipped",
          "title": "should refresh expired credentials automatically",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 3: Retry on exchange failure"
          ],
          "fullName": "Credential Lifecycle Issues Solution 3: Retry on exchange failure should retry credential exchange with exponential backoff",
          "status": "passed",
          "title": "should retry credential exchange with exponential backoff",
          "duration": 304.5766960000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Claude conversation logging"
          ],
          "fullName": "Credential Lifecycle Issues Claude conversation logging should log full Claude conversations when enabled",
          "status": "passed",
          "title": "should log full Claude conversations when enabled",
          "duration": 0.8839069999999083,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787183,
      "endTime": 1756408787494.8838,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/credentials/credential-lifecycle.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should fetch patterns from real API",
          "status": "skipped",
          "title": "should fetch patterns from real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should handle language-specific pattern requests",
          "status": "skipped",
          "title": "should handle language-specific pattern requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Validation API"
          ],
          "fullName": "API Endpoint Integration Tests Validation API should validate vulnerabilities through real API",
          "status": "skipped",
          "title": "should validate vulnerabilities through real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should exchange credentials with real API",
          "status": "skipped",
          "title": "should exchange credentials with real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should handle credential refresh",
          "status": "skipped",
          "title": "should handle credential refresh",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Fix Tracking API"
          ],
          "fullName": "API Endpoint Integration Tests Fix Tracking API should record fix attempts",
          "status": "skipped",
          "title": "should record fix attempts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle rate limiting gracefully",
          "status": "skipped",
          "title": "should handle rate limiting gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle network errors with retry",
          "status": "skipped",
          "title": "should handle network errors with retry",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408785920,
      "endTime": 1756408785920,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/integration/api-endpoints.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should provide at least 25 patterns per major language",
          "status": "passed",
          "title": "should provide at least 25 patterns per major language",
          "duration": 0.09512900000004265,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should cover all critical vulnerability types",
          "status": "passed",
          "title": "should cover all critical vulnerability types",
          "duration": 0.05534200000010969,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should have at least 10 JavaScript patterns in minimal set",
          "status": "passed",
          "title": "should have at least 10 JavaScript patterns in minimal set",
          "duration": 0.2961849999999231,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should detect pattern count degradation",
          "status": "passed",
          "title": "should detect pattern count degradation",
          "duration": 0.2050530000001345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have valid regex patterns",
          "status": "passed",
          "title": "should have valid regex patterns",
          "duration": 2.4429579999998623,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have unique pattern IDs",
          "status": "passed",
          "title": "should have unique pattern IDs",
          "duration": 0.23044400000003407,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787924,
      "endTime": 1756408787927.4429,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/regression/pattern-availability.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should search for both configured label and rsolv label",
          "status": "passed",
          "title": "should search for both configured label and rsolv label",
          "duration": 0.33642600000030143,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should deduplicate issues when they have multiple matching labels",
          "status": "passed",
          "title": "should deduplicate issues when they have multiple matching labels",
          "duration": 0.26124899999967965,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408788010,
      "endTime": 1756408788010.3364,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/github/multi-label.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should load configuration from environment variables",
          "status": "passed",
          "title": "loadConfig should load configuration from environment variables",
          "duration": 2.5822239999999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should load configuration from file",
          "status": "passed",
          "title": "loadConfig should load configuration from file",
          "duration": 0.4640079999999216,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should merge configuration from multiple sources",
          "status": "passed",
          "title": "loadConfig should merge configuration from multiple sources",
          "duration": 0.3337019999999029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should use default values for missing properties",
          "status": "passed",
          "title": "loadConfig should use default values for missing properties",
          "duration": 0.26646900000014284,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should validate configuration",
          "status": "passed",
          "title": "loadConfig should validate configuration",
          "duration": 0.18416400000000976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Configuration Loading"
          ],
          "fullName": "Configuration Loading loadConfig should validate configuration schema",
          "status": "passed",
          "title": "loadConfig should validate configuration schema",
          "duration": 0.5346879999999601,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787536,
      "endTime": 1756408787540.5347,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/integration/config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect XSS via document.write with string concatenation",
          "status": "passed",
          "title": "should detect XSS via document.write with string concatenation",
          "duration": 2.0205309999998917,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect various XSS patterns",
          "status": "passed",
          "title": "should detect various XSS patterns",
          "duration": 0.3671110000000226,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787889,
      "endTime": 1756408787891.3672,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/xss-pattern-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should return analysis with security vulnerabilities",
          "status": "passed",
          "title": "should return analysis with security vulnerabilities",
          "duration": 2.743302999999969,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should handle case with no security issues",
          "status": "passed",
          "title": "should handle case with no security issues",
          "duration": 1.3216330000000198,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should work without codebase files",
          "status": "passed",
          "title": "should work without codebase files",
          "duration": 0.952607000000171,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787911,
      "endTime": 1756408787915.9526,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/security/security-analyzer-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should NOT throw when creating Anthropic client with vended credentials and no API key",
          "status": "failed",
          "title": "should NOT throw when creating Anthropic client with vended credentials and no API key",
          "duration": 3006.809258,
          "failureMessages": [
            "AssertionError: expected 'Failed to initialize credentials afte…' to contain 'Failed to exchange credentials'\n    at /home/dylan/dev/rsolv/RSOLV-action/src/__tests__/ai/anthropic-vending.test.ts:41:28\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should throw when creating Anthropic client without vended credentials and no API key",
          "status": "passed",
          "title": "should throw when creating Anthropic client without vended credentials and no API key",
          "duration": 0.2950639999999112,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408788014,
      "endTime": 1756408791020.8093,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/ai/anthropic-vending.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Vitest tests with proper imports and syntax",
          "status": "passed",
          "title": "should generate Vitest tests with proper imports and syntax",
          "duration": 3.324380000000019,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Mocha + Chai tests with appropriate assertions",
          "status": "passed",
          "title": "should generate Mocha + Chai tests with appropriate assertions",
          "duration": 0.7697049999999876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate pytest tests with Python conventions",
          "status": "passed",
          "title": "should generate pytest tests with Python conventions",
          "duration": 0.7877719999999613,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Minitest tests for Ruby with spec syntax",
          "status": "passed",
          "title": "should generate Minitest tests for Ruby with spec syntax",
          "duration": 0.5907080000000065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate ExUnit tests for Elixir with pattern matching",
          "status": "passed",
          "title": "should generate ExUnit tests for Elixir with pattern matching",
          "duration": 0.5144230000000221,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate PHPUnit tests with proper annotations",
          "status": "passed",
          "title": "should generate PHPUnit tests with proper annotations",
          "duration": 0.7026769999999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect BDD style (describe/it) vs TDD style (test)",
          "status": "passed",
          "title": "should detect BDD style (describe/it) vs TDD style (test)",
          "duration": 0.5599700000000212,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should match assertion style (expect vs assert vs should)",
          "status": "passed",
          "title": "should match assertion style (expect vs assert vs should)",
          "duration": 0.5242470000000026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should follow file naming conventions",
          "status": "passed",
          "title": "should follow file naming conventions",
          "duration": 0.6059339999999906,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect and use existing test utilities",
          "status": "passed",
          "title": "should detect and use existing test utilities",
          "duration": 0.43396699999999555,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use CoverageAnalyzer to avoid duplicate tests",
          "status": "passed",
          "title": "should use CoverageAnalyzer to avoid duplicate tests",
          "duration": 0.5678819999999973,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use IssueInterpreter to understand vulnerability context",
          "status": "passed",
          "title": "should use IssueInterpreter to understand vulnerability context",
          "duration": 3.0196299999999496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should integrate with existing VulnerabilityTestGenerator",
          "status": "passed",
          "title": "should integrate with existing VulnerabilityTestGenerator",
          "duration": 0.7517179999999826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle unknown test frameworks gracefully",
          "status": "passed",
          "title": "should handle unknown test frameworks gracefully",
          "duration": 0.29070600000000013,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle missing coverage data",
          "status": "passed",
          "title": "should handle missing coverage data",
          "duration": 0.21259800000001405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle multi-language repositories",
          "status": "passed",
          "title": "should handle multi-language repositories",
          "duration": 0.25746700000001965,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408786247,
      "endTime": 1756408786261.2576,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/adaptive-test-generator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Analyzer"
          ],
          "fullName": "Issue Analyzer analyzeIssue should return analysis from AI client",
          "status": "passed",
          "title": "analyzeIssue should return analysis from AI client",
          "duration": 0.529866000000311,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787999,
      "endTime": 1756408787999.5298,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use issue label override when present",
          "status": "passed",
          "title": "should use issue label override when present",
          "duration": 0.1473359999999957,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use vulnerability type specific config",
          "status": "passed",
          "title": "should use vulnerability type specific config",
          "duration": 0.060897999999951935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use customer tier config when no specific override",
          "status": "passed",
          "title": "should use customer tier config when no specific override",
          "duration": 0.05436499999996158,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use default when no specific config matches",
          "status": "passed",
          "title": "should use default when no specific config matches",
          "duration": 0.042666999999937616,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should handle missing maxIterations config",
          "status": "passed",
          "title": "should handle missing maxIterations config",
          "duration": 0.0403479999999945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should simulate successful fix after multiple attempts",
          "status": "passed",
          "title": "should simulate successful fix after multiple attempts",
          "duration": 0.09027100000002974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should fail after max attempts exceeded",
          "status": "passed",
          "title": "should fail after max attempts exceeded",
          "duration": 0.056734000000005835,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Test validation feedback integration"
          ],
          "fullName": "Fix Iteration Core Functionality Test validation feedback integration should include test failure context in retry prompt",
          "status": "passed",
          "title": "should include test failure context in retry prompt",
          "duration": 0.06660999999985506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns Java SQL injection fix patterns",
          "status": "passed",
          "title": "Java SQL injection fix patterns",
          "duration": 0.0561929999998938,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PHP SQL injection fix patterns",
          "status": "passed",
          "title": "PHP SQL injection fix patterns",
          "duration": 0.056597999999894455,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PDO fix patterns for PHP",
          "status": "passed",
          "title": "PDO fix patterns for PHP",
          "duration": 0.04917699999987235,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787753,
      "endTime": 1756408787754.0566,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/fix-iteration-core.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should validate fix iteration for Java SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for Java SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should handle fix iteration with max attempts",
          "status": "passed",
          "title": "should handle fix iteration with max attempts",
          "duration": 0.35419500000000426,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should validate fix iteration for PHP SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for PHP SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should handle PDO fix patterns",
          "status": "passed",
          "title": "should handle PDO fix patterns",
          "duration": 0.1327569999999696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Integration with Fix Validation"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Integration with Fix Validation should integrate with Claude Code fix validation loop",
          "status": "passed",
          "title": "should integrate with Claude Code fix validation loop",
          "duration": 2.7783249999999953,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408786664,
      "endTime": 1756408786667.7783,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/fix-iteration-java-php.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should fail if repository has uncommitted changes",
          "status": "passed",
          "title": "should fail if repository has uncommitted changes",
          "duration": 3.9335330000000113,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should proceed with clean git state",
          "status": "passed",
          "title": "should proceed with clean git state",
          "duration": 0.7350010000000111,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should stop if issue cannot be fixed",
          "status": "passed",
          "title": "should stop if issue cannot be fixed",
          "duration": 2.2836169999999925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should proceed to test generation if issue can be fixed",
          "status": "passed",
          "title": "should proceed to test generation if issue can be fixed",
          "duration": 14.409295000000043,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should generate tests when test generation is enabled",
          "status": "passed",
          "title": "should generate tests when test generation is enabled",
          "duration": 1.6319369999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should skip test generation when disabled",
          "status": "passed",
          "title": "should skip test generation when disabled",
          "duration": 0.6451179999999681,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should validate fix when validation is enabled",
          "status": "passed",
          "title": "should validate fix when validation is enabled",
          "duration": 1.033192999999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should retry fix when validation fails",
          "status": "passed",
          "title": "should retry fix when validation fails",
          "duration": 0.3540670000000432,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should fail after max iterations",
          "status": "passed",
          "title": "should fail after max iterations",
          "duration": 0.22557199999999966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should create educational PR by default",
          "status": "passed",
          "title": "should create educational PR by default",
          "duration": 0.3819239999999695,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should use regular PR when educational is disabled",
          "status": "passed",
          "title": "should use regular PR when educational is disabled",
          "duration": 0.21202299999998786,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should rollback commit if PR creation fails",
          "status": "passed",
          "title": "should rollback commit if PR creation fails",
          "duration": 0.19867000000004964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle and rollback on unexpected errors",
          "status": "passed",
          "title": "should handle and rollback on unexpected errors",
          "duration": 0.16793499999999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle git command failures gracefully",
          "status": "passed",
          "title": "should handle git command failures gracefully",
          "duration": 0.12427899999994452,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use issue label override first",
          "status": "passed",
          "title": "should use issue label override first",
          "duration": 0.06129700000002458,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use global config if no label override",
          "status": "passed",
          "title": "should use global config if no label override",
          "duration": 0.047276000000010754,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use default if no config",
          "status": "passed",
          "title": "should use default if no config",
          "duration": 0.042202999999972235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should handle vulnerability type specific config",
          "status": "passed",
          "title": "should handle vulnerability type specific config",
          "duration": 0.07132799999999406,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408786340,
      "endTime": 1756408786367.1987,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit function exists and has correct signature",
          "status": "passed",
          "title": "processIssueWithGit function exists and has correct signature",
          "duration": 0.10588600000005499,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations function exists and returns expected defaults",
          "status": "passed",
          "title": "getMaxIterations function exists and returns expected defaults",
          "duration": 0.07498699999996461,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations respects label overrides",
          "status": "passed",
          "title": "getMaxIterations respects label overrides",
          "duration": 0.055464000000029046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations uses config when no label override",
          "status": "passed",
          "title": "getMaxIterations uses config when no label override",
          "duration": 0.055180999999947744,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit returns expected result shape",
          "status": "passed",
          "title": "processIssueWithGit returns expected result shape",
          "duration": 0.037916000000222994,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787938,
      "endTime": 1756408787939.0554,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-simple-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle public S3 bucket vulnerability",
          "status": "passed",
          "title": "should handle public S3 bucket vulnerability",
          "duration": 1.215541999999914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle open security group vulnerability",
          "status": "passed",
          "title": "should handle open security group vulnerability",
          "duration": 0.6240849999999227,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Terratest framework",
          "status": "passed",
          "title": "should detect Terratest framework",
          "duration": 1.320208999999977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Kitchen-Terraform",
          "status": "passed",
          "title": "should detect Kitchen-Terraform",
          "duration": 0.8142769999999473,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Pattern Limitations"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Pattern Limitations should demonstrate current IaC detection limitations",
          "status": "passed",
          "title": "should demonstrate current IaC detection limitations",
          "duration": 0.5657630000000609,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should generate appropriate test structure for Terraform",
          "status": "passed",
          "title": "should generate appropriate test structure for Terraform",
          "duration": 0.35994700000014745,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should identify IaC fix patterns",
          "status": "passed",
          "title": "should identify IaC fix patterns",
          "duration": 0.13492599999995036,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terratest test structure",
          "status": "passed",
          "title": "should understand Terratest test structure",
          "duration": 0.09042299999987335,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terraform Compliance structure",
          "status": "passed",
          "title": "should understand Terraform Compliance structure",
          "duration": 0.0829959999998664,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787094,
      "endTime": 1756408787099.3599,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6d-iac-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should iterate until Java SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until Java SQL injection is properly fixed",
          "duration": 0.8242089999998825,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should handle max iterations exceeded for Java",
          "status": "passed",
          "title": "should handle max iterations exceeded for Java",
          "duration": 0.38152400000012676,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should iterate until PHP SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until PHP SQL injection is properly fixed",
          "duration": 0.3372269999999844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should generate proper test context for PHP",
          "status": "passed",
          "title": "should generate proper test context for PHP",
          "duration": 0.25978699999996024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply Java-specific secure patterns",
          "status": "passed",
          "title": "should apply Java-specific secure patterns",
          "duration": 0.23760399999991932,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply PHP-specific secure patterns",
          "status": "passed",
          "title": "should apply PHP-specific secure patterns",
          "duration": 0.20995600000014747,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Fix Validation Configuration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Fix Validation Configuration should respect configuration hierarchy",
          "status": "passed",
          "title": "should respect configuration hierarchy",
          "duration": 0.3259189999998853,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787067,
      "endTime": 1756408787070.326,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6e-java-php-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security analysis results",
          "status": "passed",
          "title": "should include security analysis results",
          "duration": 0.39455499999985477,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.17846499999996013,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security recommendations",
          "status": "passed",
          "title": "should include security recommendations",
          "duration": 0.11639600000012251,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security fix templates",
          "status": "passed",
          "title": "should include security fix templates",
          "duration": 0.11957400000005691,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should mark affected files",
          "status": "passed",
          "title": "should mark affected files",
          "duration": 0.10748999999987063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security requirements",
          "status": "passed",
          "title": "should include security requirements",
          "duration": 0.12939499999993131,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include three-tier explanation structure",
          "status": "passed",
          "title": "should include three-tier explanation structure",
          "duration": 0.14036699999996927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.0744600000000446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include fixes implemented",
          "status": "passed",
          "title": "should include fixes implemented",
          "duration": 0.07097300000009454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include specific tier requirements",
          "status": "passed",
          "title": "should include specific tier requirements",
          "duration": 0.09984800000006544,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include security impact summary",
          "status": "passed",
          "title": "should include security impact summary",
          "duration": 0.17444000000000415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.09968000000003485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include PR description structure",
          "status": "passed",
          "title": "should include PR description structure",
          "duration": 0.13748099999997976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should emphasize critical nature",
          "status": "passed",
          "title": "should emphasize critical nature",
          "duration": 0.09046899999998459,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.09978900000010071,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle single vulnerability type",
          "status": "passed",
          "title": "should handle single vulnerability type",
          "duration": 0.10857800000007956,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787139,
      "endTime": 1756408787141.1746,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/security-prompts.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Jest from package.json",
          "status": "passed",
          "title": "should detect Jest from package.json",
          "duration": 0.8413910000001579,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Vitest from package.json",
          "status": "passed",
          "title": "should detect Vitest from package.json",
          "duration": 0.28437000000008084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Mocha with Chai",
          "status": "passed",
          "title": "should detect Mocha with Chai",
          "duration": 0.2977329999998801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Cypress for E2E testing",
          "status": "passed",
          "title": "should detect Cypress for E2E testing",
          "duration": 0.2936019999999644,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect multiple frameworks in one project",
          "status": "passed",
          "title": "should detect multiple frameworks in one project",
          "duration": 0.7046219999999721,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect pytest from requirements.txt",
          "status": "passed",
          "title": "should detect pytest from requirements.txt",
          "duration": 0.4710290000000441,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect unittest from import statements",
          "status": "passed",
          "title": "should detect unittest from import statements",
          "duration": 0.3001750000000811,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect RSpec from Gemfile",
          "status": "passed",
          "title": "should detect RSpec from Gemfile",
          "duration": 0.5226969999998801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect Minitest from Gemfile",
          "status": "passed",
          "title": "should detect Minitest from Gemfile",
          "duration": 0.3049439999999777,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect Jest from test file patterns",
          "status": "passed",
          "title": "should detect Jest from test file patterns",
          "duration": 0.26701100000013867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect RSpec from spec directory structure",
          "status": "passed",
          "title": "should detect RSpec from spec directory structure",
          "duration": 0.20920300000011594,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vi.config.js",
          "status": "passed",
          "title": "should detect from vi.config.js",
          "duration": 0.22697000000016487,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vitest.config.ts",
          "status": "passed",
          "title": "should detect from vitest.config.ts",
          "duration": 0.1506850000000668,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should detect frameworks from repository path",
          "status": "passed",
          "title": "should detect frameworks from repository path",
          "duration": 0.5885240000000067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should handle missing configuration files gracefully",
          "status": "passed",
          "title": "should handle missing configuration files gracefully",
          "duration": 0.2503380000000561,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should assign confidence scores based on detection method",
          "status": "passed",
          "title": "should assign confidence scores based on detection method",
          "duration": 0.13263600000004772,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should extract exact version from package.json",
          "status": "passed",
          "title": "should extract exact version from package.json",
          "duration": 0.12720699999999852,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should handle version ranges",
          "status": "passed",
          "title": "should handle version ranges",
          "duration": 0.18923500000005333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector Integration"
          ],
          "fullName": "TestFrameworkDetector Integration should integrate with test generator",
          "status": "passed",
          "title": "should integrate with test generator",
          "duration": 0.24111100000004626,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787111,
      "endTime": 1756408787118.2412,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/test-framework-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate command injection tests",
          "status": "passed",
          "title": "should generate command injection tests",
          "duration": 0.43016099999999824,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate path traversal tests",
          "status": "passed",
          "title": "should generate path traversal tests",
          "duration": 0.27384299999994255,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate Ruby tests",
          "status": "passed",
          "title": "should generate Ruby tests",
          "duration": 0.3431430000000546,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate PHP tests",
          "status": "passed",
          "title": "should generate PHP tests",
          "duration": 0.3069080000000213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate comprehensive functional validation tests",
          "status": "passed",
          "title": "should generate comprehensive functional validation tests",
          "duration": 0.5156729999998788,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should handle E2E test generation for new vulnerability types",
          "status": "passed",
          "title": "should handle E2E test generation for new vulnerability types",
          "duration": 0.2835179999999582,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787644,
      "endTime": 1756408787646.2834,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/test-generator-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load default config without maxIssues",
          "status": "passed",
          "title": "should load default config without maxIssues",
          "duration": 0.6945009999999456,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from environment variable",
          "status": "passed",
          "title": "should load maxIssues from environment variable",
          "duration": 0.3483459999999923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from config file",
          "status": "passed",
          "title": "should load maxIssues from config file",
          "duration": 0.51524100000006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues environment variable should override config file for maxIssues",
          "status": "passed",
          "title": "environment variable should override config file for maxIssues",
          "duration": 0.557547999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle invalid maxIssues values",
          "status": "passed",
          "title": "should handle invalid maxIssues values",
          "duration": 0.4028490000000602,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle zero maxIssues",
          "status": "passed",
          "title": "should handle zero maxIssues",
          "duration": 0.6287140000001727,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle negative maxIssues",
          "status": "passed",
          "title": "should handle negative maxIssues",
          "duration": 0.4401559999998881,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787965,
      "endTime": 1756408787969.4402,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/config/__tests__/index.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should have default timeout configurations",
          "status": "passed",
          "title": "should have default timeout configurations",
          "duration": 0.5277920000000904,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from environment variables",
          "status": "passed",
          "title": "should load timeout from environment variables",
          "duration": 0.3144569999999476,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from config file",
          "status": "passed",
          "title": "should load timeout from config file",
          "duration": 1.0428980000001502,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should merge timeouts with priority: env > file > default",
          "status": "passed",
          "title": "should merge timeouts with priority: env > file > default",
          "duration": 0.43709100000000944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should validate timeout values are numbers",
          "status": "passed",
          "title": "should validate timeout values are numbers",
          "duration": 0.2614370000001145,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should handle missing timeout properties gracefully",
          "status": "passed",
          "title": "should handle missing timeout properties gracefully",
          "duration": 0.3553879999999481,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should ensure AI provider timeout is reasonable",
          "status": "passed",
          "title": "should ensure AI provider timeout is reasonable",
          "duration": 0.26483600000005936,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787901,
      "endTime": 1756408787904.265,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/config/__tests__/timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include educational vulnerability explanation",
          "status": "passed",
          "title": "should include educational vulnerability explanation",
          "duration": 0.6589229999999588,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include AI-specific vulnerability context for slopsquatting",
          "status": "passed",
          "title": "should include AI-specific vulnerability context for slopsquatting",
          "duration": 0.26400699999999233,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include RSOLV value proposition",
          "status": "passed",
          "title": "should include RSOLV value proposition",
          "duration": 0.26024599999982456,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "GREEN Phase - Complete Flow"
          ],
          "fullName": "Educational PR Creation GREEN Phase - Complete Flow should create educational PR with all components",
          "status": "passed",
          "title": "should create educational PR with all components",
          "duration": 0.36928500000021813,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787782,
      "endTime": 1756408787784.3694,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/github/__tests__/pr-git-educational.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should require RSOLV_MODE environment variable",
          "status": "passed",
          "title": "should require RSOLV_MODE environment variable",
          "duration": 0.9867519999997967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize scan mode from RSOLV_MODE",
          "status": "passed",
          "title": "should recognize scan mode from RSOLV_MODE",
          "duration": 0.9701609999999619,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize validate mode",
          "status": "passed",
          "title": "should recognize validate mode",
          "duration": 0.7846099999999296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize mitigate mode",
          "status": "passed",
          "title": "should recognize mitigate mode",
          "duration": 0.7268649999998615,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize full mode",
          "status": "passed",
          "title": "should recognize full mode",
          "duration": 0.6396119999999428,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle batch validation with multiple issue IDs",
          "status": "passed",
          "title": "should handle batch validation with multiple issue IDs",
          "duration": 0.959295000000111,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should respect max issues limit",
          "status": "passed",
          "title": "should respect max issues limit",
          "duration": 0.7139729999998963,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle skip cache flag",
          "status": "passed",
          "title": "should handle skip cache flag",
          "duration": 0.7399029999999129,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when validate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when validate mode lacks issue ID",
          "duration": 0.8674900000000889,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when mitigate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when mitigate mode lacks issue ID",
          "duration": 0.6304239999999481,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when both single and multiple issue IDs are provided",
          "status": "passed",
          "title": "should throw error when both single and multiple issue IDs are provided",
          "duration": 0.47322399999984555,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when fix mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when fix mode lacks issue ID",
          "duration": 0.4079999999999018,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should normalize mode aliases",
          "status": "passed",
          "title": "should normalize mode aliases",
          "duration": 1.2033469999998943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should throw error for unknown modes",
          "status": "passed",
          "title": "should throw error for unknown modes",
          "duration": 0.4685890000000654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeDescription"
          ],
          "fullName": "ModeSelector getModeDescription should return appropriate descriptions for each mode",
          "status": "passed",
          "title": "should return appropriate descriptions for each mode",
          "duration": 0.3699099999998907,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require AI",
          "status": "passed",
          "title": "should identify which modes require AI",
          "duration": 0.2754899999999907,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require test generation",
          "status": "passed",
          "title": "should identify which modes require test generation",
          "duration": 0.26201000000014574,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require fix generation",
          "status": "passed",
          "title": "should identify which modes require fix generation",
          "duration": 0.22131100000001425,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787658,
      "endTime": 1756408787671.2212,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/mode-selector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute scan mode without prerequisites",
          "status": "passed",
          "title": "should execute scan mode without prerequisites",
          "duration": 114.02797800000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue or scan data for validate mode",
          "status": "passed",
          "title": "should require issue or scan data for validate mode",
          "duration": 4.154331999999954,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue for mitigate mode",
          "status": "passed",
          "title": "should require issue for mitigate mode",
          "duration": 200.59209199999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute full mode without prerequisites",
          "status": "passed",
          "title": "should execute full mode without prerequisites",
          "duration": 1.7080630000000383,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should throw error for invalid mode",
          "status": "passed",
          "title": "should throw error for invalid mode",
          "duration": 1.1496010000000751,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeScan should detect vulnerabilities",
          "status": "passed",
          "title": "executeScan should detect vulnerabilities",
          "duration": 1.743355000000065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeValidate should generate RED tests",
          "status": "passed",
          "title": "executeValidate should generate RED tests",
          "duration": 1.7233629999998357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeMitigate should fix vulnerability",
          "status": "passed",
          "title": "executeMitigate should fix vulnerability",
          "duration": 2.226695999999947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeAllPhases should run scan, validate, and mitigate",
          "status": "passed",
          "title": "executeAllPhases should run scan, validate, and mitigate",
          "duration": 1.1371299999998428,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should store phase results using PhaseDataClient",
          "status": "passed",
          "title": "should store phase results using PhaseDataClient",
          "duration": 2.7787680000001274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should retrieve phase results using PhaseDataClient",
          "status": "passed",
          "title": "should retrieve phase results using PhaseDataClient",
          "duration": 0.540000000000191,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408786690,
      "endTime": 1756408787022.54,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-executor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with singular \"file\" property",
          "duration": 18.68950699999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with plural \"files\" property",
          "duration": 2.3557929999999487,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 1.5743270000000393,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787553,
      "endTime": 1756408787575.5742,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/vendor-detection-regression.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should filter out vulnerabilities in comments",
          "status": "passed",
          "title": "should filter out vulnerabilities in comments",
          "duration": 0.5966750000000047,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should keep real vulnerabilities",
          "status": "passed",
          "title": "should keep real vulnerabilities",
          "duration": 0.2800480000000789,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle mixed results correctly",
          "status": "passed",
          "title": "should handle mixed results correctly",
          "duration": 0.2477559999999812,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle API failures gracefully",
          "status": "passed",
          "title": "should handle API failures gracefully",
          "duration": 0.4718279999999595,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787793,
      "endTime": 1756408787794.472,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/scanner/__tests__/ast-validator-mocked.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for SQL injection",
          "status": "passed",
          "title": "should generate line-level explanation for SQL injection",
          "duration": 0.22121500000002925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for XSS",
          "status": "passed",
          "title": "should generate line-level explanation for XSS",
          "duration": 0.08409299999993891,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should generate concept-level explanation for security concepts",
          "status": "passed",
          "title": "should generate concept-level explanation for security concepts",
          "duration": 0.2763310000000274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should include prevention methods and attack scenarios",
          "status": "passed",
          "title": "should include prevention methods and attack scenarios",
          "duration": 0.07576799999992545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should generate business-level explanation with impact analysis",
          "status": "passed",
          "title": "should generate business-level explanation with impact analysis",
          "duration": 0.2213240000000951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should calculate appropriate risk scores based on severity",
          "status": "passed",
          "title": "should calculate appropriate risk scores based on severity",
          "duration": 0.08665500000006432,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should generate complete explanation with all three tiers",
          "status": "passed",
          "title": "should generate complete explanation with all three tiers",
          "duration": 0.23757000000000517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should organize explanations by vulnerability type",
          "status": "passed",
          "title": "should organize explanations by vulnerability type",
          "duration": 0.17281899999989037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should format explanation as markdown",
          "status": "passed",
          "title": "should format explanation as markdown",
          "duration": 0.09314400000016576,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should generate comprehensive markdown report",
          "status": "passed",
          "title": "should generate comprehensive markdown report",
          "duration": 6.897594000000026,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787806,
      "endTime": 1756408787814.8977,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/explanation-framework.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should authenticate successfully with valid credentials",
          "status": "passed",
          "title": "should authenticate successfully with valid credentials",
          "duration": 2.1498450000001412,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should throw error on authentication failure",
          "status": "passed",
          "title": "should throw error on authentication failure",
          "duration": 1.9512079999999514,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should search issues with autofix label",
          "status": "passed",
          "title": "should search issues with autofix label",
          "duration": 1.36544200000003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should handle empty search results",
          "status": "passed",
          "title": "should handle empty search results",
          "duration": 0.5925609999999324,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "createComment"
          ],
          "fullName": "JiraAdapter createComment should add comment to issue",
          "status": "passed",
          "title": "should add comment to issue",
          "duration": 0.8558660000001055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "addLink"
          ],
          "fullName": "JiraAdapter addLink should create remote link to GitHub PR",
          "status": "passed",
          "title": "should create remote link to GitHub PR",
          "duration": 0.7616639999998824,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "updateIssueStatus"
          ],
          "fullName": "JiraAdapter updateIssueStatus should update issue status",
          "status": "passed",
          "title": "should update issue status",
          "duration": 0.7976439999999911,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787604,
      "endTime": 1756408787612.7976,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/jira-adapter.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should generate solution with git metadata",
          "status": "passed",
          "title": "should generate solution with git metadata",
          "duration": 1.4916829999999663,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should handle git command failures gracefully",
          "status": "passed",
          "title": "should handle git command failures gracefully",
          "duration": 0.3448399999999765,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should use enhanced prompt for git-based workflow",
          "status": "passed",
          "title": "should use enhanced prompt for git-based workflow",
          "duration": 0.5097610000000259,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should extract solution from various response formats",
          "status": "passed",
          "title": "should extract solution from various response formats",
          "duration": 0.45715999999993073,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787163,
      "endTime": 1756408787165.4573,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should initialize with default parameters",
          "status": "passed",
          "title": "should initialize with default parameters",
          "duration": 0.19238399999994726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should initialize with custom URL when API key has URL:TOKEN format",
          "status": "passed",
          "title": "should initialize with custom URL when API key has URL:TOKEN format",
          "duration": 0.07184499999993932,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should analyze an issue and return analysis data",
          "status": "passed",
          "title": "should analyze an issue and return analysis data",
          "duration": 0.2053099999998267,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should generate a solution and return PR data",
          "status": "passed",
          "title": "should generate a solution and return PR data",
          "duration": 0.24352100000010068,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should handle JSON in code blocks from API response",
          "status": "passed",
          "title": "should handle JSON in code blocks from API response",
          "duration": 0.2849220000000514,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "OllamaClient"
          ],
          "fullName": "OllamaClient should handle API errors and fallback to mock data in test mode",
          "status": "passed",
          "title": "should handle API errors and fallback to mock data in test mode",
          "duration": 0.14373999999997977,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787883,
      "endTime": 1756408787884.1438,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/providers/__tests__/ollama.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should store phase results successfully",
          "status": "passed",
          "title": "should store phase results successfully",
          "duration": 7.700849000000062,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should include API key in headers",
          "status": "passed",
          "title": "should include API key in headers",
          "duration": 1.3178490000000238,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should fall back to local storage on API failure",
          "status": "passed",
          "title": "should fall back to local storage on API failure",
          "duration": 2.9769450000001143,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should retrieve phase results successfully",
          "status": "passed",
          "title": "should retrieve phase results successfully",
          "duration": 1.0240360000000237,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should return null for 404 responses",
          "status": "passed",
          "title": "should return null for 404 responses",
          "duration": 0.4088480000000345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should fall back to local storage on API error",
          "status": "passed",
          "title": "should fall back to local storage on API error",
          "duration": 0.5936350000001767,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should validate allowed phase transitions",
          "status": "passed",
          "title": "should validate allowed phase transitions",
          "duration": 0.32394300000009935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should reject transition if commit has changed",
          "status": "passed",
          "title": "should reject transition if commit has changed",
          "duration": 0.14533099999994192,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787708,
      "endTime": 1756408787722.324,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-data-client/__tests__/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from file property",
          "status": "passed",
          "title": "should extract from file property",
          "duration": 0.21581400000013673,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from files array",
          "status": "passed",
          "title": "should extract from files array",
          "duration": 0.13839999999981956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from path property",
          "status": "passed",
          "title": "should extract from path property",
          "duration": 0.1221850000001723,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from nested location",
          "status": "passed",
          "title": "should extract from nested location",
          "duration": 0.09788499999967826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.054214000000229134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle vulnerabilities with no file info",
          "status": "passed",
          "title": "should handle vulnerabilities with no file info",
          "duration": 0.099018000000342,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should deduplicate files",
          "status": "passed",
          "title": "should deduplicate files",
          "duration": 0.08099199999969642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle mixed structures",
          "status": "passed",
          "title": "should handle mixed structures",
          "duration": 0.11133000000018001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408788004,
      "endTime": 1756408788005.1113,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should pass rsolvApiKey and useVendedCredentials to processIssues",
          "status": "passed",
          "title": "should pass rsolvApiKey and useVendedCredentials to processIssues",
          "duration": 35.844184999999925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "status": "passed",
          "title": "should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "duration": 3.9256789999999455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787825,
      "endTime": 1756408787864.9258,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/mitigate-credentials.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1756408785920,
      "endTime": 1756408785920,
      "status": "failed",
      "message": "Transform failed with 1 error:\n/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-encryption.test.ts:144:9: ERROR: Expected \")\" but found \"as\"",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-encryption.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFiles limit",
          "status": "passed",
          "title": "should respect maxFiles limit",
          "duration": 2.422565000000077,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should exclude default patterns",
          "status": "passed",
          "title": "should exclude default patterns",
          "duration": 0.575704000000087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should filter by language when specified",
          "status": "passed",
          "title": "should filter by language when specified",
          "duration": 0.45458000000007814,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFileSize",
          "status": "passed",
          "title": "should respect maxFileSize",
          "duration": 0.334814999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize changed files",
          "status": "passed",
          "title": "should prioritize changed files",
          "duration": 0.3013060000000678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize security-relevant files",
          "status": "passed",
          "title": "should prioritize security-relevant files",
          "duration": 0.23944100000016988,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should deprioritize test files",
          "status": "passed",
          "title": "should deprioritize test files",
          "duration": 0.31572400000004563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should include all file metadata",
          "status": "passed",
          "title": "should include all file metadata",
          "duration": 0.22086100000001352,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should handle custom exclude patterns",
          "status": "passed",
          "title": "should handle custom exclude patterns",
          "duration": 0.27473299999996925,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should detect Elixir files",
          "status": "passed",
          "title": "should detect Elixir files",
          "duration": 0.16633299999989504,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should select files from multiple languages",
          "status": "passed",
          "title": "should select files from multiple languages",
          "duration": 0.34064699999998993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should distribute slots evenly across languages",
          "status": "passed",
          "title": "should distribute slots evenly across languages",
          "duration": 0.24356699999998455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1756408787631,
      "endTime": 1756408787637.2437,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/file-selector.test.ts"
    }
  ],
  "passRate": "91.25%"
}