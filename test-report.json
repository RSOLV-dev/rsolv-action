{
  "numTotalTestSuites": 642,
  "numPassedTestSuites": 628,
  "numFailedTestSuites": 14,
  "numPendingTestSuites": 0,
  "numTotalTests": 1069,
  "numPassedTests": 895,
  "numFailedTests": 8,
  "numPendingTests": 161,
  "numTodoTests": 0,
  "startTime": 1760046912086,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check pattern loading without detection",
          "status": "passed",
          "title": "should check pattern loading without detection",
          "duration": 220.32967400000052,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should test small code detection",
          "status": "passed",
          "title": "should test small code detection",
          "duration": 7.260943000001134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check AST interpreter directly",
          "status": "passed",
          "title": "should check AST interpreter directly",
          "duration": 0.21316900000056194,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927586,
      "endTime": 1760046927814.2131,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/memory-investigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should use ElixirASTAnalyzer when API key is provided",
          "status": "passed",
          "title": "should use ElixirASTAnalyzer when API key is provided",
          "duration": 0.2198580000003858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should fall back to client-side AST when no API key",
          "status": "passed",
          "title": "should fall back to client-side AST when no API key",
          "duration": 0.1877329999988433,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should support multiple languages with server AST",
          "status": "passed",
          "title": "should support multiple languages with server AST",
          "duration": 0.36188899999979185,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should only support JS/TS without server AST",
          "status": "passed",
          "title": "should only support JS/TS without server AST",
          "duration": 0.19165699999939534,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should handle Python code through server AST",
          "status": "skipped",
          "title": "should handle Python code through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should reject unsupported languages gracefully",
          "status": "passed",
          "title": "should reject unsupported languages gracefully",
          "duration": 0.312208000001192,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should respect useServerAST=false even with API key",
          "status": "passed",
          "title": "should respect useServerAST=false even with API key",
          "duration": 0.1867050000000745,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should use environment variables as fallback",
          "status": "passed",
          "title": "should use environment variables as fallback",
          "duration": 0.1319130000010773,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927556,
      "endTime": 1760046927558.1868,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/server-ast-green-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use ASTPatternInterpreter for vulnerability detection",
          "status": "passed",
          "title": "should use ASTPatternInterpreter for vulnerability detection",
          "duration": 0.7489839999998367,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect JavaScript eval injection",
          "status": "passed",
          "title": "should detect JavaScript eval injection",
          "duration": 33.74695400000019,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Python SQL injection via server AST",
          "status": "skipped",
          "title": "should detect Python SQL injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Ruby command injection via server AST",
          "status": "skipped",
          "title": "should detect Ruby command injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect PHP XSS via server AST",
          "status": "skipped",
          "title": "should detect PHP XSS via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should achieve >90% accuracy on mixed language corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on mixed language corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use server-side AST service endpoint",
          "status": "skipped",
          "title": "should use server-side AST service endpoint",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "Test Infrastructure"
          ],
          "fullName": "Server-Side AST Integration Test Infrastructure should have ElixirASTAnalyzer class available",
          "status": "passed",
          "title": "should have ElixirASTAnalyzer class available",
          "duration": 0.2159030000002531,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927468,
      "endTime": 1760046927503.2158,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/server-ast-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with singular \"file\" property",
          "duration": 0.1871530000007624,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with plural \"files\" property",
          "duration": 0.10413800000060291,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 0.10594900000069174,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should return empty array for vulnerabilities without file properties",
          "status": "passed",
          "title": "should return empty array for vulnerabilities without file properties",
          "duration": 0.058487000000241096,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) OLD BROKEN CODE: should demonstrate the bug",
          "status": "passed",
          "title": "OLD BROKEN CODE: should demonstrate the bug",
          "duration": 0.04877200000009907,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927818,
      "endTime": 1760046927819.0488,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/vendor-detection-file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should slice issues array when maxIssues is set",
          "status": "passed",
          "title": "should slice issues array when maxIssues is set",
          "duration": 0.21794799999952374,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is not set",
          "status": "passed",
          "title": "should return all issues when maxIssues is not set",
          "duration": 0.11686899999949674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is 0",
          "status": "passed",
          "title": "should return all issues when maxIssues is 0",
          "duration": 0.07523899999978312,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is greater than issue count",
          "status": "passed",
          "title": "should return all issues when maxIssues is greater than issue count",
          "duration": 0.05765099999916856,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle single issue limit",
          "status": "passed",
          "title": "should handle single issue limit",
          "duration": 0.07721200000014505,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle exact match of maxIssues and issue count",
          "status": "passed",
          "title": "should handle exact match of maxIssues and issue count",
          "duration": 0.0523910000010801,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927849,
      "endTime": 1760046927850.117,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/index-maxissues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should timeout workflow after 2 minutes",
          "status": "passed",
          "title": "should timeout workflow after 2 minutes",
          "duration": 100.06241799999952,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should complete successfully before timeout",
          "status": "passed",
          "title": "should complete successfully before timeout",
          "duration": 0.35111999999935506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should handle no issues gracefully without timeout",
          "status": "passed",
          "title": "should handle no issues gracefully without timeout",
          "duration": 0.19668099999944388,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should include timeout information in error message",
          "status": "passed",
          "title": "should include timeout information in error message",
          "duration": 100.82442499999888,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should use configured processing options",
          "status": "passed",
          "title": "should use configured processing options",
          "duration": 0.5134369999996125,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927241,
      "endTime": 1760046927443.5134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/workflow-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should create a feature branch during validation",
          "status": "passed",
          "title": "should create a feature branch during validation",
          "duration": 36.62897099999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should commit generated red tests to the validation branch",
          "status": "passed",
          "title": "should commit generated red tests to the validation branch",
          "duration": 38.86182100000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should store branch name in validation results",
          "status": "passed",
          "title": "should store branch name in validation results",
          "duration": 21.239201999999977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should checkout validation branch in mitigation phase",
          "status": "failed",
          "title": "should checkout validation branch in mitigation phase",
          "duration": 34.348266000000024,
          "failureMessages": [
            "AssertionError: expected 'main' to be 'rsolv/validate/issue-123' // Object.is equality\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/modes/validation-branch-persistence.test.ts:183:29\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should handle missing validation branch gracefully",
          "status": "passed",
          "title": "should handle missing validation branch gracefully",
          "duration": 17.21086200000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should preserve test files between validation and mitigation phases",
          "status": "failed",
          "title": "should preserve test files between validation and mitigation phases",
          "duration": 42.19117600000004,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/modes/validation-branch-persistence.test.ts:245:39\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1760046912485,
      "endTime": 1760046912676.1912,
      "status": "failed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/modes/validation-branch-persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should check if Claude Code CLI is actually available",
          "status": "passed",
          "title": "should check if Claude Code CLI is actually available",
          "duration": 0.4628769999999349,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should generate real solution using Claude Code",
          "status": "passed",
          "title": "should generate real solution using Claude Code",
          "duration": 7585.9421649999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should work with enhanced prompts in live mode",
          "status": "passed",
          "title": "should work with enhanced prompts in live mode",
          "duration": 2639.101439,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code File System Integration"
          ],
          "fullName": "Claude Code File System Integration should handle real file operations",
          "status": "passed",
          "title": "should handle real file operations",
          "duration": 0.2034829999993235,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046916856,
      "endTime": 1760046927082.2034,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/claude-code-live.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation regardless of other settings",
          "status": "passed",
          "title": "should skip validation regardless of other settings",
          "duration": 2.905297999999675,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation even if testGeneration.enabled is true",
          "status": "passed",
          "title": "should skip validation even if testGeneration.enabled is true",
          "duration": 0.5043599999989965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.09006999999837717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.05495299999893177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip regardless of testGeneration settings when disabled",
          "status": "passed",
          "title": "should skip regardless of testGeneration settings when disabled",
          "duration": 0.047158999999737716,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927510,
      "endTime": 1760046927514.09,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/disable-validation-bug.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback generates a solution with feedback integration",
          "status": "passed",
          "title": "generates a solution with feedback integration",
          "duration": 0.1980729999995674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback should integrate feedback when enhancing AI prompts",
          "status": "passed",
          "title": "should integrate feedback when enhancing AI prompts",
          "duration": 0.13472100000035425,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927833,
      "endTime": 1760046927833.198,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/feedbackEnhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (RFC-059)",
            "Test Mode Environment Variable"
          ],
          "fullName": "GitBasedProcessor - Test Mode (RFC-059) Test Mode Environment Variable should recognize RSOLV_TESTING_MODE environment variable",
          "status": "passed",
          "title": "should recognize RSOLV_TESTING_MODE environment variable",
          "duration": 0.1562709999998333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (RFC-059)",
            "Code Coverage - Test Mode Logic Exists"
          ],
          "fullName": "GitBasedProcessor - Test Mode (RFC-059) Code Coverage - Test Mode Logic Exists should have test mode logic in git-based-processor.ts",
          "status": "passed",
          "title": "should have test mode logic in git-based-processor.ts",
          "duration": 0.6662910000013653,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (RFC-059)",
            "Integration Test - Manual Verification"
          ],
          "fullName": "GitBasedProcessor - Test Mode (RFC-059) Integration Test - Manual Verification documents how to manually test test mode behavior",
          "status": "passed",
          "title": "documents how to manually test test mode behavior",
          "duration": 0.1192190000001574,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (RFC-059)",
            "Type Safety - Result Interface"
          ],
          "fullName": "GitBasedProcessor - Test Mode (RFC-059) Type Safety - Result Interface should have test mode fields in GitProcessingResult type",
          "status": "passed",
          "title": "should have test mode fields in GitProcessingResult type",
          "duration": 0.19706700000097044,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927837,
      "endTime": 1760046927838.6663,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/git-based-processor-test-mode.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect SQL injection vulnerabilities in code",
          "status": "passed",
          "title": "should detect SQL injection vulnerabilities in code",
          "duration": 3.333247999999003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect XSS vulnerabilities in code",
          "status": "passed",
          "title": "should detect XSS vulnerabilities in code",
          "duration": 0.6592759999984992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should calculate appropriate risk levels",
          "status": "passed",
          "title": "should calculate appropriate risk levels",
          "duration": 0.5742799999989074,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should adjust complexity based on security risk",
          "status": "passed",
          "title": "should adjust complexity based on security risk",
          "duration": 0.7448389999990468,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle files with no vulnerabilities",
          "status": "passed",
          "title": "should handle files with no vulnerabilities",
          "duration": 0.5672429999995074,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle mixed languages",
          "status": "passed",
          "title": "should handle mixed languages",
          "duration": 0.5373400000007678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect security issues from title and body",
          "status": "passed",
          "title": "should detect security issues from title and body",
          "duration": 0.21540099999947415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect bug issues",
          "status": "passed",
          "title": "should detect bug issues",
          "duration": 0.22448799999983748,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927532,
      "endTime": 1760046927539.2246,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/security-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.14129700000012235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.08758699999998498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is undefined",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is undefined",
          "duration": 0.0888489999997546,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "status": "passed",
          "title": "FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "duration": 0.09653400000024703,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) correctly skips when both are false",
          "status": "passed",
          "title": "correctly skips when both are false",
          "duration": 0.08105199999954493,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "status": "passed",
          "title": "should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "duration": 0.10157000000072003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when fixValidation.enabled is true",
          "status": "passed",
          "title": "should enter validation when fixValidation.enabled is true",
          "duration": 0.07940899999994144,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when testGeneration.validateFixes is true and not disabled",
          "status": "passed",
          "title": "should enter validation when testGeneration.validateFixes is true and not disabled",
          "duration": 0.07488700000067183,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should not enter validation when both are false/undefined",
          "status": "passed",
          "title": "should not enter validation when both are false/undefined",
          "duration": 0.07819799999924726,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927859,
      "endTime": 1760046927860.1016,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/validation-skip-logic.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should analyze issue and determine if fixable",
          "status": "passed",
          "title": "executeScanForIssue should analyze issue and determine if fixable",
          "duration": 70.79455600000006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should fail if git has uncommitted changes",
          "status": "passed",
          "title": "executeScanForIssue should fail if git has uncommitted changes",
          "duration": 0.3608040000000301,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should store scan results in PhaseDataClient",
          "status": "passed",
          "title": "executeScanForIssue should store scan results in PhaseDataClient",
          "duration": 0.9906190000000379,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should generate tests for vulnerability",
          "status": "failed",
          "title": "executeValidateForIssue should generate tests for vulnerability",
          "duration": 12.025701000000026,
          "failureMessages": [
            "AssertionError: expected { validated: true, …(3) } to have property \"testResults\"\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/phase-decomposition.test.ts:157:48\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "status": "failed",
          "title": "executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "duration": 3.701793000000066,
          "failureMessages": [
            "AssertionError: expected undefined to be defined\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/phase-decomposition.test.ts:189:60\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should store validation results",
          "status": "passed",
          "title": "executeValidateForIssue should store validation results",
          "duration": 2.2074059999999918,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should apply fix using Claude Code",
          "status": "passed",
          "title": "executeMitigateForIssue should apply fix using Claude Code",
          "duration": 3.510395000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should validate fix with generated tests",
          "status": "passed",
          "title": "executeMitigateForIssue should validate fix with generated tests",
          "duration": 3.475447999999915,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should retry on validation failure",
          "status": "passed",
          "title": "executeMitigateForIssue should retry on validation failure",
          "duration": 3.4970109999999295,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should run all phases sequentially",
          "status": "passed",
          "title": "executeThreePhaseForIssue should run all phases sequentially",
          "duration": 11.78299299999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should abort if scan determines not fixable",
          "status": "passed",
          "title": "executeThreePhaseForIssue should abort if scan determines not fixable",
          "duration": 0.33811100000002625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should pass data between phases",
          "status": "passed",
          "title": "executeThreePhaseForIssue should pass data between phases",
          "duration": 0.655304000000001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046912765,
      "endTime": 1760046912878.6553,
      "status": "failed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/phase-decomposition.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent",
          "duration": 0.09823900000083086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent with modifications",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent with modifications",
          "duration": 0.06602999999995518,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid PromptEnhancementContext",
          "status": "passed",
          "title": "should allow creating a valid PromptEnhancementContext",
          "duration": 0.1634749999993801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should enforce proper enumeration values",
          "status": "passed",
          "title": "should enforce proper enumeration values",
          "duration": 0.12462500000037835,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927854,
      "endTime": 1760046927854.1636,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/feedback/__tests__/types.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should have Ruby SQL injection pattern",
          "status": "passed",
          "title": "should have Ruby SQL injection pattern",
          "duration": 0.14804000000003725,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should match Ruby SQL injection with regex",
          "status": "passed",
          "title": "should match Ruby SQL injection with regex",
          "duration": 0.13542899999993097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection with detector",
          "status": "passed",
          "title": "should detect Ruby SQL injection with detector",
          "duration": 0.6511960000007093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection in full code",
          "status": "passed",
          "title": "should detect Ruby SQL injection in full code",
          "duration": 0.46474399999897287,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927545,
      "endTime": 1760046927546.4648,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/ruby-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize parameterized queries as safe",
          "status": "passed",
          "title": "should recognize parameterized queries as safe",
          "duration": 0.09511600000041653,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize prepared statements as safe",
          "status": "passed",
          "title": "should recognize prepared statements as safe",
          "duration": 0.04925100000036764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby hash syntax as safe SQL",
          "status": "passed",
          "title": "should NOT consider Ruby hash syntax as safe SQL",
          "duration": 0.03250000000116415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby string interpolation as safe",
          "status": "passed",
          "title": "should NOT consider Ruby string interpolation as safe",
          "duration": 0.027949000001171953,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize actual named parameters as safe",
          "status": "passed",
          "title": "should recognize actual named parameters as safe",
          "duration": 0.028179000000818633,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Ruby ActiveRecord safe patterns",
          "status": "passed",
          "title": "should handle Ruby ActiveRecord safe patterns",
          "duration": 0.03223400000024412,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Python parameterized queries",
          "status": "passed",
          "title": "should handle Python parameterized queries",
          "duration": 0.031355999999505,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927867,
      "endTime": 1760046927867.0952,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/safe-usage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes issue context in prompt",
          "status": "passed",
          "title": "includes issue context in prompt",
          "duration": 0.12505699999928765,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes test file path",
          "status": "passed",
          "title": "includes test file path",
          "duration": 0.042353999999249936,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes test content in code block",
          "status": "passed",
          "title": "includes test content in code block",
          "duration": 0.04994500000066182,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes test framework when provided",
          "status": "passed",
          "title": "includes test framework when provided",
          "duration": 0.028884999999718275,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes test command when provided",
          "status": "passed",
          "title": "includes test command when provided",
          "duration": 0.02646900000036112,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt omits framework when not provided",
          "status": "passed",
          "title": "omits framework when not provided",
          "duration": 0.04016299999966577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt omits command when not provided",
          "status": "passed",
          "title": "omits command when not provided",
          "duration": 0.031872999999905005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes RED phase instruction",
          "status": "passed",
          "title": "includes RED phase instruction",
          "duration": 0.026902999999947497,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt includes fix requirements",
          "status": "passed",
          "title": "includes fix requirements",
          "duration": 0.049637000000075204,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt uses custom base prompt when provided",
          "status": "passed",
          "title": "uses custom base prompt when provided",
          "duration": 0.02886399999988498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "buildTestAwarePrompt"
          ],
          "fullName": "buildTestAwarePrompt generates default prompt when base not provided",
          "status": "passed",
          "title": "generates default prompt when base not provided",
          "duration": 0.030382999999346794,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "getTrustScoreExplanation"
          ],
          "fullName": "getTrustScoreExplanation explains perfect fix (pre-fail, post-pass)",
          "status": "passed",
          "title": "explains perfect fix (pre-fail, post-pass)",
          "duration": 0.06004199999915727,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "getTrustScoreExplanation"
          ],
          "fullName": "getTrustScoreExplanation explains false positive (both pass)",
          "status": "passed",
          "title": "explains false positive (both pass)",
          "duration": 0.052109999998720014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "getTrustScoreExplanation"
          ],
          "fullName": "getTrustScoreExplanation explains failed fix (both fail)",
          "status": "passed",
          "title": "explains failed fix (both fail)",
          "duration": 0.04185499999948661,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "getTrustScoreExplanation"
          ],
          "fullName": "getTrustScoreExplanation explains regression (pre-pass, post-fail)",
          "status": "passed",
          "title": "explains regression (pre-pass, post-fail)",
          "duration": 0.0405109999992419,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927845,
      "endTime": 1760046927846.06,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/prompts/__tests__/test-aware-mitigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect node_modules as vendor",
          "status": "passed",
          "title": "should detect node_modules as vendor",
          "duration": 0.2349080000003596,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect vendor directory as vendor",
          "status": "passed",
          "title": "should detect vendor directory as vendor",
          "duration": 0.08396800000082294,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect bower_components as vendor",
          "status": "passed",
          "title": "should detect bower_components as vendor",
          "duration": 0.05644899999970221,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect minified files as vendor",
          "status": "passed",
          "title": "should detect minified files as vendor",
          "duration": 0.04767600000013772,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should not detect application code as vendor",
          "status": "passed",
          "title": "should not detect application code as vendor",
          "duration": 0.2509460000001127,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect by file header comment",
          "status": "passed",
          "title": "should detect by file header comment",
          "duration": 0.13373200000023644,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify jQuery from file path",
          "status": "passed",
          "title": "should identify jQuery from file path",
          "duration": 0.1887059999990015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify Bootstrap from file content",
          "status": "passed",
          "title": "should identify Bootstrap from file content",
          "duration": 0.1638650000004418,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should return null for non-vendor files",
          "status": "passed",
          "title": "should return null for non-vendor files",
          "duration": 0.18974200000047858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should find package.json dependencies",
          "status": "passed",
          "title": "should find package.json dependencies",
          "duration": 0.18303600000035658,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should check if file belongs to known dependency",
          "status": "passed",
          "title": "should check if file belongs to known dependency",
          "duration": 0.14112399999976333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return update action for vendor vulnerabilities",
          "status": "passed",
          "title": "should return update action for vendor vulnerabilities",
          "duration": 0.19289300000127696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return fix action for application vulnerabilities",
          "status": "passed",
          "title": "should return fix action for application vulnerabilities",
          "duration": 0.08771799999885843,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should not attempt to patch vendor code",
          "status": "passed",
          "title": "should not attempt to patch vendor code",
          "duration": 0.10000699999909557,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should recommend safe update version",
          "status": "passed",
          "title": "should recommend safe update version",
          "duration": 0.23345599999993283,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should provide update commands",
          "status": "passed",
          "title": "should provide update commands",
          "duration": 0.1212150000010297,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should create vendor-specific issue",
          "status": "passed",
          "title": "should create vendor-specific issue",
          "duration": 0.22163300000102026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should not create patch PR for vendor files",
          "status": "passed",
          "title": "should not create patch PR for vendor files",
          "duration": 0.1142390000004525,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046927575,
      "endTime": 1760046927578.2217,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/vendor/__tests__/vendor-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when vended credentials are enabled",
          "status": "skipped",
          "title": "should use Claude CLI when vended credentials are enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when RSOLV_USE_CLI is true",
          "status": "skipped",
          "title": "should use Claude CLI when RSOLV_USE_CLI is true",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when structured phases are enabled",
          "status": "skipped",
          "title": "should use Claude CLI when structured phases are enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should NOT fall back to SDK when vended credentials are enabled and CLI fails",
          "status": "skipped",
          "title": "should NOT fall back to SDK when vended credentials are enabled and CLI fails",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046912086,
      "endTime": 1760046912086,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-cli-mitigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should pass specificVulnerabilities from issueContext to prompt",
          "status": "skipped",
          "title": "should pass specificVulnerabilities from issueContext to prompt",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should log debug info when specificVulnerabilities are present",
          "status": "skipped",
          "title": "should log debug info when specificVulnerabilities are present",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should handle missing specificVulnerabilities gracefully",
          "status": "skipped",
          "title": "should handle missing specificVulnerabilities gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "generateSolution data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests generateSolution data flow should preserve specificVulnerabilities through generateSolution call",
          "status": "skipped",
          "title": "should preserve specificVulnerabilities through generateSolution call",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046912086,
      "endTime": 1760046912086,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-git-data-flow.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1760046912086,
      "endTime": 1760046912086,
      "status": "failed",
      "message": "API key required but not found in environment",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/elixir-ast-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection via string concatenation",
          "status": "skipped",
          "title": "should detect SQL injection via string concatenation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection with f-strings",
          "status": "skipped",
          "title": "should detect SQL injection with f-strings",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "JavaScript SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) JavaScript SQL Injection Detection should detect SQL injection in JavaScript",
          "status": "skipped",
          "title": "should detect SQL injection in JavaScript",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Ruby Command Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Ruby Command Injection Detection should detect command injection in Ruby",
          "status": "skipped",
          "title": "should detect command injection in Ruby",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "PHP XSS Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) PHP XSS Detection should detect XSS in PHP echo statements",
          "status": "skipped",
          "title": "should detect XSS in PHP echo statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Accuracy Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Accuracy Metrics should achieve >90% accuracy on test corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on test corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Performance Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Performance Metrics should analyze files with acceptable latency",
          "status": "skipped",
          "title": "should analyze files with acceptable latency",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/ast-service-verification.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV3 - Python Support (Needs RFC-048 Test Mode)"
          ],
          "fullName": "SecurityDetectorV3 - Python Support (Needs RFC-048 Test Mode) should detect SQL injection in Python code using server-side AST",
          "status": "skipped",
          "title": "should detect SQL injection in Python code using server-side AST",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/detector-v3-python.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should apply RSOLV_TESTING_MODE from config.environmentVariables to process.env",
          "status": "passed",
          "title": "should apply RSOLV_TESTING_MODE from config.environmentVariables to process.env",
          "duration": 17.87524200000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should detect testing mode when set via config.environmentVariables",
          "status": "passed",
          "title": "should detect testing mode when set via config.environmentVariables",
          "duration": 0.2643150000000105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should NOT apply testing mode when not in environmentVariables",
          "status": "passed",
          "title": "should NOT apply testing mode when not in environmentVariables",
          "duration": 0.23730999999997948,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should handle empty environmentVariables object",
          "status": "passed",
          "title": "should handle empty environmentVariables object",
          "duration": 0.15289099999995415,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should handle undefined environmentVariables",
          "status": "passed",
          "title": "should handle undefined environmentVariables",
          "duration": 0.18311000000005606,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should override existing environment variables",
          "status": "passed",
          "title": "should override existing environment variables",
          "duration": 0.15589399999998932,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "Testing mode behavior in validation"
          ],
          "fullName": "ValidationMode - Environment Variable Handling Testing mode behavior in validation should log testing mode message when enabled via environmentVariables",
          "status": "passed",
          "title": "should log testing mode message when enabled via environmentVariables",
          "duration": 0.1739509999999882,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928863,
      "endTime": 1760046928882.174,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/validation-mode-env.test.ts"
    },
    {
      "assertionResults": [],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "failed",
      "message": "API key required but not found in environment",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/pattern-api-client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should send correct batch payload format to validation API",
          "status": "passed",
          "title": "should send correct batch payload format to validation API",
          "duration": 2.3390039999999317,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should handle validation response correctly",
          "status": "passed",
          "title": "should handle validation response correctly",
          "duration": 0.6238319999999931,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929010,
      "endTime": 1760046929012.6238,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/regression/validation-payload-format.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify RsolvApiClient is imported in pr.ts",
          "status": "passed",
          "title": "should verify RsolvApiClient is imported in pr.ts",
          "duration": 0.14763899999979913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify recordFixAttempt is called after PR creation",
          "status": "passed",
          "title": "should verify recordFixAttempt is called after PR creation",
          "duration": 0.10488799999984622,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932179,
      "endTime": 1760046932179.1477,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/integration/pr-tracking.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Three-Phase Workflow Integration"
          ],
          "fullName": "Three-Phase Workflow Integration should complete full workflow: validation branch → test persistence → mitigation checkout",
          "status": "failed",
          "title": "should complete full workflow: validation branch → test persistence → mitigation checkout",
          "duration": 45.921554000000015,
          "failureMessages": [
            "AssertionError: expected false to be true // Object.is equality\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/integration/three-phase-workflow.test.ts:103:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Three-Phase Workflow Integration"
          ],
          "fullName": "Three-Phase Workflow Integration should handle missing validation branch gracefully",
          "status": "passed",
          "title": "should handle missing validation branch gracefully",
          "duration": 19.91377,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928520,
      "endTime": 1760046928585.9138,
      "status": "failed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/integration/three-phase-workflow.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 tests for SQL injection vulnerability",
          "status": "passed",
          "title": "should generate JUnit 5 tests for SQL injection vulnerability",
          "duration": 1.6366460000000416,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 parameterized tests for multiple attack vectors",
          "status": "passed",
          "title": "should generate JUnit 5 parameterized tests for multiple attack vectors",
          "duration": 0.44325800000001436,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG tests for XXE vulnerability",
          "status": "passed",
          "title": "should generate TestNG tests for XXE vulnerability",
          "duration": 0.542946000000029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG data provider tests",
          "status": "passed",
          "title": "should generate TestNG data provider tests",
          "duration": 0.41175799999996343,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "Spring Boot Integration"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support Spring Boot Integration should generate Spring Boot test annotations for JUnit 5",
          "status": "passed",
          "title": "should generate Spring Boot test annotations for JUnit 5",
          "duration": 0.41688299999998435,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929021,
      "endTime": 1760046929024.417,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/adaptive-test-generator-java.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should ignore .rsolv/ directory in git status check",
          "status": "skipped",
          "title": "should ignore .rsolv/ directory in git status check",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should still detect real uncommitted changes",
          "status": "skipped",
          "title": "should still detect real uncommitted changes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/git-status-rsolv-ignore.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle Java SQL injection with multiple fix attempts",
          "status": "passed",
          "title": "should handle Java SQL injection with multiple fix attempts",
          "duration": 0.6026849999999513,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle PHP SQL injection with PDO migration",
          "status": "passed",
          "title": "should handle PHP SQL injection with PDO migration",
          "duration": 0.9134689999999637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should respect max iteration limits for complex vulnerabilities",
          "status": "passed",
          "title": "should respect max iteration limits for complex vulnerabilities",
          "duration": 0.16481599999997343,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper Java test context for Claude Code",
          "status": "passed",
          "title": "should generate proper Java test context for Claude Code",
          "duration": 0.12657899999999245,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper PHP test context for Claude Code",
          "status": "passed",
          "title": "should generate proper PHP test context for Claude Code",
          "duration": 0.10885100000007242,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate Java fixes use approved patterns",
          "status": "passed",
          "title": "should validate Java fixes use approved patterns",
          "duration": 0.17306900000005498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate PHP fixes use approved patterns",
          "status": "passed",
          "title": "should validate PHP fixes use approved patterns",
          "duration": 0.17786899999998695,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929036,
      "endTime": 1760046929038.178,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/phase-6e-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should prioritize options.maxTokens over config and defaults",
          "status": "skipped",
          "title": "should prioritize options.maxTokens over config and defaults",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should use config.maxTokens when options.maxTokens is undefined",
          "status": "skipped",
          "title": "should use config.maxTokens when options.maxTokens is undefined",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should use use case default when both options and config are undefined",
          "status": "skipped",
          "title": "should use use case default when both options and config are undefined",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should fallback to STANDARD default for unknown use case",
          "status": "skipped",
          "title": "should fallback to STANDARD default for unknown use case",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should accept valid token limits",
          "status": "skipped",
          "title": "should accept valid token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should reject zero or negative token limits",
          "status": "skipped",
          "title": "should reject zero or negative token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should reject excessively high token limits",
          "status": "skipped",
          "title": "should reject excessively high token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should use TEST_GENERATION default (10000) when no config provided",
          "status": "skipped",
          "title": "should use TEST_GENERATION default (10000) when no config provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should respect explicit options.maxTokens for test generation",
          "status": "skipped",
          "title": "should respect explicit options.maxTokens for test generation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should validate the resolved token limit",
          "status": "skipped",
          "title": "should validate the resolved token limit",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should prevent the original 2000 token bug from recurring",
          "status": "skipped",
          "title": "should prevent the original 2000 token bug from recurring",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "Use case specific defaults"
          ],
          "fullName": "Token Utils - TDD Tests Use case specific defaults should have appropriate defaults for each use case",
          "status": "skipped",
          "title": "should have appropriate defaults for each use case",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "Use case specific defaults"
          ],
          "fullName": "Token Utils - TDD Tests Use case specific defaults should never default to the problematic 2000 token limit",
          "status": "skipped",
          "title": "should never default to the problematic 2000 token limit",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/token-utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should split 14-file vulnerability into chunks of 3",
          "status": "passed",
          "title": "should split 14-file vulnerability into chunks of 3",
          "duration": 0.68558900000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should respect token limits per chunk",
          "status": "passed",
          "title": "should respect token limits per chunk",
          "duration": 0.30722800000000916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should keep related files together when possible",
          "status": "passed",
          "title": "should keep related files together when possible",
          "duration": 0.2080510000000686,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by module",
          "status": "passed",
          "title": "should group files by module",
          "duration": 0.26512000000002445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by severity",
          "status": "passed",
          "title": "should group files by severity",
          "duration": 0.20997700000009445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should analyze file dependencies",
          "status": "passed",
          "title": "should analyze file dependencies",
          "duration": 0.3177570000000287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should generate multiple PRs for chunked vulnerability",
          "status": "passed",
          "title": "should generate multiple PRs for chunked vulnerability",
          "duration": 3.225926999999956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should link PRs in series with dependencies",
          "status": "passed",
          "title": "should link PRs in series with dependencies",
          "duration": 0.38749700000005305,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should calculate complexity based on file count",
          "status": "passed",
          "title": "should calculate complexity based on file count",
          "duration": 3.214005000000043,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should route complex vulnerabilities to manual guide",
          "status": "passed",
          "title": "should route complex vulnerabilities to manual guide",
          "duration": 0.4281379999999899,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should handle hardcoded secrets with environment variables",
          "status": "passed",
          "title": "should handle hardcoded secrets with environment variables",
          "duration": 3.336644999999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should not break functionality when removing secrets",
          "status": "passed",
          "title": "should not break functionality when removing secrets",
          "duration": 0.21355900000003203,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928929,
      "endTime": 1760046928942.3367,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/chunking/__tests__/vulnerability-chunker.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should run command successfully",
          "status": "passed",
          "title": "should run command successfully",
          "duration": 1.0782509999999093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should fail when containers are disabled",
          "status": "passed",
          "title": "should fail when containers are disabled",
          "duration": 1.2856950000000325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should create and clean up temporary directory",
          "status": "passed",
          "title": "should create and clean up temporary directory",
          "duration": 0.33090999999990345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use provided working directory",
          "status": "passed",
          "title": "should use provided working directory",
          "duration": 0.3550270000000637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle command execution failure",
          "status": "passed",
          "title": "should handle command execution failure",
          "duration": 0.37991999999997006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should include environment variables in Docker command",
          "status": "passed",
          "title": "should include environment variables in Docker command",
          "duration": 0.380361999999991,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should apply resource limits",
          "status": "passed",
          "title": "should apply resource limits",
          "duration": 0.385579000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should add security options",
          "status": "passed",
          "title": "should add security options",
          "duration": 0.3224119999999857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle volume mounts",
          "status": "passed",
          "title": "should handle volume mounts",
          "duration": 0.34200299999997696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should escape shell arguments properly",
          "status": "passed",
          "title": "should escape shell arguments properly",
          "duration": 0.3789329999999609,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use custom timeout",
          "status": "passed",
          "title": "should use custom timeout",
          "duration": 0.4076479999999947,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle timeout errors",
          "status": "passed",
          "title": "should handle timeout errors",
          "duration": 0.4413929999999482,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928907,
      "endTime": 1760046928913.4414,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/containers/__tests__/run.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove Anthropic references",
          "status": "passed",
          "title": "should remove Anthropic references",
          "duration": 1.0141490000000886,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove OpenAI references",
          "status": "passed",
          "title": "should remove OpenAI references",
          "duration": 0.31697700000006535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API URLs",
          "status": "passed",
          "title": "should sanitize API URLs",
          "duration": 0.2538170000000264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API keys and credentials",
          "status": "passed",
          "title": "should sanitize API keys and credentials",
          "duration": 0.24266599999998562,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize model names",
          "status": "passed",
          "title": "should sanitize model names",
          "duration": 0.2807229999999663,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle complex error messages",
          "status": "passed",
          "title": "should handle complex error messages",
          "duration": 0.11207199999989825,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should preserve helpful error context",
          "status": "passed",
          "title": "should preserve helpful error context",
          "duration": 0.12722900000005666,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle edge cases",
          "status": "passed",
          "title": "should handle edge cases",
          "duration": 0.08890800000006038,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should sanitize Error objects",
          "status": "passed",
          "title": "should sanitize Error objects",
          "duration": 0.15107000000000426,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle non-Error objects",
          "status": "passed",
          "title": "should handle non-Error objects",
          "duration": 0.09946000000002186,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle complex objects",
          "status": "passed",
          "title": "should handle complex objects",
          "duration": 0.09564299999999548,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929049,
      "endTime": 1760046929052.1511,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/utils/__tests__/error-sanitizer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should authenticate successfully",
          "status": "skipped",
          "title": "should authenticate successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should create and search for test issue",
          "status": "skipped",
          "title": "should create and search for test issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should add comment to issue",
          "status": "skipped",
          "title": "should add comment to issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should link external resource",
          "status": "skipped",
          "title": "should link external resource",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928134,
      "endTime": 1760046928134,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/platforms/jira/jira-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should generate correct JQL for both rsolv and autofix labels",
          "status": "passed",
          "title": "should generate correct JQL for both rsolv and autofix labels",
          "duration": 0.3651039999999739,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should handle custom label configurations",
          "status": "passed",
          "title": "should handle custom label configurations",
          "duration": 0.18978399999969042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search demonstrates JQL queries for different scenarios",
          "status": "passed",
          "title": "demonstrates JQL queries for different scenarios",
          "duration": 0.22474800000009054,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932175,
      "endTime": 1760046932176.2249,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/platforms/jira/label-search.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should gather context successfully",
          "status": "passed",
          "title": "should gather context successfully",
          "duration": 0.35355299999991985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should use cached context on second call",
          "status": "passed",
          "title": "should use cached context on second call",
          "duration": 0.14852200000041194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.16493599999967046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should generate enhanced solution with deep context",
          "status": "passed",
          "title": "should generate enhanced solution with deep context",
          "duration": 0.2520910000002914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should use enhanced prompt when provided",
          "status": "passed",
          "title": "should use enhanced prompt when provided",
          "duration": 0.16482399999995323,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should build proper context gathering prompt",
          "status": "passed",
          "title": "should build proper context gathering prompt",
          "duration": 0.10769500000014887,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should create minimal context correctly",
          "status": "passed",
          "title": "should create minimal context correctly",
          "duration": 0.1137340000000222,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932163,
      "endTime": 1760046932165.1138,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should check if Claude CLI is available",
          "status": "passed",
          "title": "should check if Claude CLI is available",
          "duration": 0.9719460000001163,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should construct a proper prompt",
          "status": "passed",
          "title": "should construct a proper prompt",
          "duration": 0.519032000000152,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should generate a real solution using Claude CLI",
          "status": "skipped",
          "title": "should generate a real solution using Claude CLI",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932149,
      "endTime": 1760046932150.519,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should initialize with correct configuration",
          "status": "passed",
          "title": "should initialize with correct configuration",
          "duration": 0.829589999999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle generateSolution request correctly",
          "status": "passed",
          "title": "should handle generateSolution request correctly",
          "duration": 1.1135659999999916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle empty response gracefully",
          "status": "passed",
          "title": "should handle empty response gracefully",
          "duration": 0.5271050000000059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle query errors gracefully",
          "status": "passed",
          "title": "should handle query errors gracefully",
          "duration": 0.42030499999998483,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle invalid JSON response",
          "status": "passed",
          "title": "should handle invalid JSON response",
          "duration": 0.48688199999998005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should handle missing API key",
          "status": "passed",
          "title": "should handle missing API key",
          "duration": 0.4616919999999709,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should respect timeout configuration",
          "status": "passed",
          "title": "should respect timeout configuration",
          "duration": 200.85354299999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle multiple file changes",
          "status": "passed",
          "title": "should handle multiple file changes",
          "duration": 1.074137999999948,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle security vulnerabilities in input",
          "status": "passed",
          "title": "should handle security vulnerabilities in input",
          "duration": 0.7430380000000696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle retry logic",
          "status": "passed",
          "title": "should handle retry logic",
          "duration": 0.6979010000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should format system message correctly",
          "status": "passed",
          "title": "should format system message correctly",
          "duration": 0.42985699999996996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should include file contents in message",
          "status": "passed",
          "title": "should include file contents in message",
          "duration": 0.42311500000005253,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle very large responses",
          "status": "passed",
          "title": "should handle very large responses",
          "duration": 1.1877499999999372,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle special characters in paths",
          "status": "passed",
          "title": "should handle special characters in paths",
          "duration": 0.43643500000007407,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928631,
      "endTime": 1760046928841.4365,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "RED Phase - Current Single-Phase Failures"
          ],
          "fullName": "Two-Phase Claude Code Conversation RED Phase - Current Single-Phase Failures should fail with single-phase approach (files not edited)",
          "status": "passed",
          "title": "should fail with single-phase approach (files not edited)",
          "duration": 0.9117100000000846,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should successfully edit files then provide JSON with two-phase approach",
          "status": "passed",
          "title": "should successfully edit files then provide JSON with two-phase approach",
          "duration": 0.7283889999999928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should handle conversation flow correctly",
          "status": "passed",
          "title": "should handle conversation flow correctly",
          "duration": 0.5341430000000855,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should use clean separation of concerns",
          "status": "passed",
          "title": "should use clean separation of concerns",
          "duration": 0.35827099999994516,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should handle phase failures gracefully",
          "status": "passed",
          "title": "should handle phase failures gracefully",
          "duration": 0.29424199999994016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should maintain conversation context between phases",
          "status": "passed",
          "title": "should maintain conversation context between phases",
          "duration": 0.4776200000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should complete within reasonable time",
          "status": "passed",
          "title": "should complete within reasonable time",
          "duration": 0.3995709999999235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "Integration Tests"
          ],
          "fullName": "Two-Phase Claude Code Conversation Integration Tests should work with real Claude Code SDK",
          "status": "passed",
          "title": "should work with real Claude Code SDK",
          "duration": 0.43837699999994584,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046928982,
      "endTime": 1760046928986.4385,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/two-phase-conversation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Current Bug: Empty validation vulnerabilities array"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Current Bug: Empty validation vulnerabilities array should extract files when validation data has empty vulnerabilities array",
          "status": "passed",
          "title": "should extract files when validation data has empty vulnerabilities array",
          "duration": 0.235320999999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 1: Vulnerabilities directly in validation data"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 1: Vulnerabilities directly in validation data should extract file from vulnerability with \"file\" property",
          "status": "passed",
          "title": "should extract file from vulnerability with \"file\" property",
          "duration": 0.18045100000006187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"path\" instead of \"file\"",
          "status": "passed",
          "title": "should handle vulnerability with \"path\" instead of \"file\"",
          "duration": 0.10504299999990963,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"location\" property",
          "status": "passed",
          "title": "should handle vulnerability with \"location\" property",
          "duration": 0.09629099999995105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Robust file extraction function"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Robust file extraction function should handle all possible vulnerability structures",
          "status": "passed",
          "title": "should handle all possible vulnerability structures",
          "duration": 0.2953189999999495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Vendor detection with proper types"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Vendor detection with proper types should detect vendor files correctly",
          "status": "passed",
          "title": "should detect vendor files correctly",
          "duration": 0.13663499999995565,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929043,
      "endTime": 1760046929044.1367,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-executor/__tests__/vendor-detection-tdd.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse single file with single vulnerability",
          "status": "passed",
          "title": "should parse single file with single vulnerability",
          "duration": 0.535923999999909,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse multiple files with multiple vulnerabilities",
          "status": "passed",
          "title": "should parse multiple files with multiple vulnerabilities",
          "duration": 0.4447299999999359,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle files with no vulnerabilities gracefully",
          "status": "passed",
          "title": "should handle files with no vulnerabilities gracefully",
          "duration": 0.22145799999998417,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle malformed issue body without crashing",
          "status": "passed",
          "title": "should handle malformed issue body without crashing",
          "duration": 0.20179200000006858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should extract vulnerability type correctly",
          "status": "passed",
          "title": "should extract vulnerability type correctly",
          "duration": 0.16901500000005854,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle special characters in file paths",
          "status": "passed",
          "title": "should handle special characters in file paths",
          "duration": 0.13947799999994004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should replace unknown.js with actual filenames",
          "status": "passed",
          "title": "should replace unknown.js with actual filenames",
          "duration": 0.36499700000001667,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should handle multiple vulnerabilities and match by line number",
          "status": "passed",
          "title": "should handle multiple vulnerabilities and match by line number",
          "duration": 0.26610600000003615,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should preserve validation data that cannot be matched",
          "status": "passed",
          "title": "should preserve validation data that cannot be matched",
          "duration": 0.21871699999996963,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046929062,
      "endTime": 1760046929065.2188,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-executor/utils/__tests__/issue-body-parser.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should parse JavaScript code successfully",
          "status": "passed",
          "title": "should parse JavaScript code successfully",
          "duration": 5.096102999999857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Python code",
          "status": "passed",
          "title": "should fail to parse Python code",
          "duration": 0.5215509999998176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Ruby code",
          "status": "passed",
          "title": "should fail to parse Ruby code",
          "duration": 0.3630430000000615,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse PHP code",
          "status": "passed",
          "title": "should fail to parse PHP code",
          "duration": 0.5713660000001255,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933654,
      "endTime": 1760046933660.5713,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/babel-parser-issue.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to reconstruct regex from serialized format",
          "status": "passed",
          "title": "should fail to reconstruct regex from serialized format",
          "duration": 0.3027759999999944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle enhanced pattern response with serialized regex",
          "status": "passed",
          "title": "should fail to handle enhanced pattern response with serialized regex",
          "duration": 0.20309100000008584,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should demonstrate the need for regex flag mapping",
          "status": "passed",
          "title": "should demonstrate the need for regex flag mapping",
          "duration": 0.14897999999993772,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle nested regex in AST rules",
          "status": "passed",
          "title": "should fail to handle nested regex in AST rules",
          "duration": 0.1388489999999365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle regex in context rules",
          "status": "passed",
          "title": "should fail to handle regex in context rules",
          "duration": 0.11948400000005677,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should correctly reconstruct regex from serialized format",
          "status": "passed",
          "title": "should correctly reconstruct regex from serialized format",
          "duration": 0.049645000000055006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should handle complex patterns with multiple regex objects",
          "status": "passed",
          "title": "should handle complex patterns with multiple regex objects",
          "duration": 0.046006000000033964,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933779,
      "endTime": 1760046933780.2031,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/pattern-regex-reconstruction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint should call /api/v1/ast/validate NOT /ast/validate",
          "status": "passed",
          "title": "should call /api/v1/ast/validate NOT /ast/validate",
          "duration": 0.846136000000115,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint fixed implementation correctly calls /api/v1/ast/validate",
          "status": "passed",
          "title": "fixed implementation correctly calls /api/v1/ast/validate",
          "duration": 0.2865710000000945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "API request format"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression API request format should send correct payload format for validation",
          "status": "passed",
          "title": "should send correct payload format for validation",
          "duration": 0.3613829999999325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle 404 gracefully and return null",
          "status": "passed",
          "title": "should handle 404 gracefully and return null",
          "duration": 0.29532800000015413,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 0.8309690000000955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Fixed Implementation"
          ],
          "fullName": "IssueEnricher - Fixed Implementation should successfully validate when using correct endpoint",
          "status": "passed",
          "title": "should successfully validate when using correct endpoint",
          "duration": 0.24569300000007388,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933703,
      "endTime": 1760046933706.2456,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/validation/enricher.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should use AST validation when enabled and API key is provided",
          "status": "passed",
          "title": "should use AST validation when enabled and API key is provided",
          "duration": 1.4786749999998392,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should skip AST validation when disabled",
          "status": "passed",
          "title": "should skip AST validation when disabled",
          "duration": 0.5587880000000496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should skip AST validation when no API key is provided",
          "status": "passed",
          "title": "should skip AST validation when no API key is provided",
          "duration": 0.4278959999999188,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should provide file contents to AST validator",
          "status": "passed",
          "title": "should provide file contents to AST validator",
          "duration": 0.5447550000001229,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933575,
      "endTime": 1760046933577.5447,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/scanner/repository-scanner-ast.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #610: API endpoint mismatch"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #610: API endpoint mismatch should use /api/v1/vulnerabilities/validate as primary endpoint",
          "status": "passed",
          "title": "should use /api/v1/vulnerabilities/validate as primary endpoint",
          "duration": 0.36540800000011586,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should return vulnerability validation results not empty array",
          "status": "passed",
          "title": "should return vulnerability validation results not empty array",
          "duration": 0.26527099999998427,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should handle NoSQL injection with $where correctly",
          "status": "passed",
          "title": "should handle NoSQL injection with $where correctly",
          "duration": 0.24180699999988065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Cache functionality regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Cache functionality regression should include cache stats in response",
          "status": "passed",
          "title": "should include cache stats in response",
          "duration": 0.2128860000000259,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should provide clear error message when API key is invalid",
          "status": "passed",
          "title": "should provide clear error message when API key is invalid",
          "duration": 0.17824300000006588,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should handle malformed repository names gracefully",
          "status": "passed",
          "title": "should handle malformed repository names gracefully",
          "duration": 0.15905400000019654,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "E2E Regression: Full validation flow"
          ],
          "fullName": "E2E Regression: Full validation flow should complete validation workflow successfully",
          "status": "passed",
          "title": "should complete validation workflow successfully",
          "duration": 0.08659499999998843,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933761,
      "endTime": 1760046933763.159,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/regression/validation-endpoint.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect files mentioned without quotes",
          "status": "passed",
          "title": "should detect files mentioned without quotes",
          "duration": 0.48473300000000563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect common auth files mentioned casually",
          "status": "passed",
          "title": "should detect common auth files mentioned casually",
          "duration": 0.29268600000000333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Solution:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Solution:\" keyword",
          "duration": 0.26594999999997526,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Fix:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Fix:\" keyword",
          "duration": 0.3092110000000048,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should use whole response as approach if no keywords found",
          "status": "passed",
          "title": "should use whole response as approach if no keywords found",
          "duration": 0.23170299999992494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect multiple file types",
          "status": "passed",
          "title": "should detect multiple file types",
          "duration": 0.2014000000001488,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle responses with \"To fix this\" keyword",
          "status": "passed",
          "title": "should handle responses with \"To fix this\" keyword",
          "duration": 0.18910400000004302,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should still fail if response is too short",
          "status": "passed",
          "title": "should still fail if response is too short",
          "duration": 0.12752399999999398,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle mixed format responses",
          "status": "passed",
          "title": "should handle mixed format responses",
          "duration": 0.16924100000005637,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933752,
      "endTime": 1760046933755.1692,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/analyzer-parsing.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should initialize Claude Code adapter",
          "status": "passed",
          "title": "should initialize Claude Code adapter",
          "duration": 0.49671699999998964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should generate solution with Claude Code when available",
          "status": "passed",
          "title": "should generate solution with Claude Code when available",
          "duration": 1.0571219999999357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should fall back gracefully when Claude Code is not available",
          "status": "passed",
          "title": "should fall back gracefully when Claude Code is not available",
          "duration": 0.22398199999997814,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.4371040000000903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 0.3889209999999821,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should integrate with standard AI client",
          "status": "passed",
          "title": "should integrate with standard AI client",
          "duration": 0.1185600000001159,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933604,
      "endTime": 1760046933607.389,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass test results to adapter on first attempt",
          "status": "passed",
          "title": "should pass test results to adapter on first attempt",
          "duration": 20.780235999999945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass validation context on retry after failed validation",
          "status": "passed",
          "title": "should pass validation context on retry after failed validation",
          "duration": 0.13430800000003273,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should enhance issue context with test failure info on retry",
          "status": "passed",
          "title": "should enhance issue context with test failure info on retry",
          "duration": 5.0020900000000665,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933537,
      "endTime": 1760046933563.0022,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/git-based-processor-prompt-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "status": "passed",
          "title": "should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "duration": 1.2619409999999789,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when useVendedCredentials is false",
          "status": "passed",
          "title": "should not create credential manager when useVendedCredentials is false",
          "duration": 0.32464200000003984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not create credential manager when rsolvApiKey is missing",
          "duration": 0.36905000000001564,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should handle credential manager creation errors gracefully",
          "status": "passed",
          "title": "should handle credential manager creation errors gracefully",
          "duration": 0.5252559999998994,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933646,
      "endTime": 1760046933648.5251,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/unified-processor-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set up container when Docker is available",
          "status": "passed",
          "title": "should set up container when Docker is available",
          "duration": 0.5293949999999086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should disable containers when Docker is not available",
          "status": "passed",
          "title": "should disable containers when Docker is not available",
          "duration": 0.6681820000000016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should skip setup if containers are already disabled",
          "status": "passed",
          "title": "should skip setup if containers are already disabled",
          "duration": 0.11169499999994059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate container configuration",
          "status": "passed",
          "title": "should validate container configuration",
          "duration": 0.6975619999999481,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate memory limit format",
          "status": "passed",
          "title": "should validate memory limit format",
          "duration": 0.2838480000000345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate CPU limit format",
          "status": "passed",
          "title": "should validate CPU limit format",
          "duration": 0.303677000000107,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate timeout value",
          "status": "passed",
          "title": "should validate timeout value",
          "duration": 0.27486899999996695,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should handle image pull failure in development mode",
          "status": "passed",
          "title": "should handle image pull failure in development mode",
          "duration": 0.2251009999999951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should throw on image pull failure in production mode",
          "status": "passed",
          "title": "should throw on image pull failure in production mode",
          "duration": 0.33413999999993393,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply strict security profile",
          "status": "passed",
          "title": "should apply strict security profile",
          "duration": 0.24182700000005752,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply relaxed security profile",
          "status": "passed",
          "title": "should apply relaxed security profile",
          "duration": 0.16117299999996249,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should configure network restrictions",
          "status": "passed",
          "title": "should configure network restrictions",
          "duration": 0.14032899999995152,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set environment variables",
          "status": "passed",
          "title": "should set environment variables",
          "duration": 0.14348100000006525,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933501,
      "endTime": 1760046933505.1611,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/containers/__tests__/setup.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies positive sentiment correctly",
          "status": "passed",
          "title": "classifies positive sentiment correctly",
          "duration": 0.3355490000001282,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies negative sentiment correctly",
          "status": "passed",
          "title": "classifies negative sentiment correctly",
          "duration": 0.1407120000001214,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment defaults to neutral sentiment when text is ambiguous",
          "status": "passed",
          "title": "defaults to neutral sentiment when text is ambiguous",
          "duration": 0.08075899999994363,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns positive sentiment for approved reviews regardless of content",
          "status": "passed",
          "title": "returns positive sentiment for approved reviews regardless of content",
          "duration": 0.061564999999973224,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns negative sentiment for change requests regardless of content",
          "status": "passed",
          "title": "returns negative sentiment for change requests regardless of content",
          "duration": 0.042037999999820386,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview analyzes comment content when review state is commented",
          "status": "passed",
          "title": "analyzes comment content when review state is commented",
          "duration": 0.05154099999981554,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook processes PR comment events correctly",
          "status": "passed",
          "title": "processes PR comment events correctly",
          "duration": 0.1625540000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook returns null for irrelevant webhook events",
          "status": "passed",
          "title": "returns null for irrelevant webhook events",
          "duration": 0.12731899999994312,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933773,
      "endTime": 1760046933774.1626,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/feedback/__tests__/collector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt adds patterns to avoid from negative feedback",
          "status": "passed",
          "title": "adds patterns to avoid from negative feedback",
          "duration": 0.3829639999999017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt returns the original prompt when there are no patterns",
          "status": "passed",
          "title": "returns the original prompt when there are no patterns",
          "duration": 0.1458669999999529,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt includes examples of successful solutions",
          "status": "passed",
          "title": "includes examples of successful solutions",
          "duration": 0.10144599999989623,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext returns a valid enhancement context for a given issue",
          "status": "passed",
          "title": "returns a valid enhancement context for a given issue",
          "duration": 0.8263359999998556,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext handles errors gracefully",
          "status": "passed",
          "title": "handles errors gracefully",
          "duration": 0.6302660000001197,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933732,
      "endTime": 1760046933733.8264,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/feedback/__tests__/enhancer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should execute mitigation with validation data from prior phase",
          "status": "passed",
          "title": "should execute mitigation with validation data from prior phase",
          "duration": 111.94057699999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should handle missing validation data gracefully",
          "status": "passed",
          "title": "should handle missing validation data gracefully",
          "duration": 3.5430000000000064,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should retrieve validation data from PhaseDataClient if not provided",
          "status": "passed",
          "title": "should retrieve validation data from PhaseDataClient if not provided",
          "duration": 2.551166999999964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should apply fix using GitBasedClaudeCodeAdapter",
          "status": "passed",
          "title": "should apply fix using GitBasedClaudeCodeAdapter",
          "duration": 3.180537999999956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should verify tests pass after fix (GREEN phase)",
          "status": "passed",
          "title": "should verify tests pass after fix (GREEN phase)",
          "duration": 2.341491999999903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should retry fix if tests fail",
          "status": "passed",
          "title": "should retry fix if tests fail",
          "duration": 2.2335369999999557,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should refactor code to match codebase style",
          "status": "passed",
          "title": "should refactor code to match codebase style",
          "duration": 2.1192579999999452,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should create educational PR with test results",
          "status": "passed",
          "title": "should create educational PR with test results",
          "duration": 2.2093509999999696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should include before/after code in PR description",
          "status": "passed",
          "title": "should include before/after code in PR description",
          "duration": 2.6072279999999637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should add security education context to PR",
          "status": "passed",
          "title": "should add security education context to PR",
          "duration": 2.454896000000076,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle multiple issues in batch",
          "status": "skipped",
          "title": "should handle multiple issues in batch",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle partial failures gracefully",
          "status": "skipped",
          "title": "should handle partial failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle missing AI adapter gracefully",
          "status": "passed",
          "title": "should handle missing AI adapter gracefully",
          "duration": 2.3124310000000605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle test execution failures",
          "status": "passed",
          "title": "should handle test execution failures",
          "duration": 2.0913960000000316,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should timeout if fix takes too long",
          "status": "passed",
          "title": "should timeout if fix takes too long",
          "duration": 202.35827399999994,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932959,
      "endTime": 1760046933301.3582,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/mitigation-only-mode.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests PhaseExecutor has all decomposed methods",
          "status": "skipped",
          "title": "PhaseExecutor has all decomposed methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeScanForIssue returns correct structure",
          "status": "skipped",
          "title": "executeScanForIssue returns correct structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeValidateForIssue accepts scan data",
          "status": "skipped",
          "title": "executeValidateForIssue accepts scan data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeMitigateForIssue accepts scan and validation data",
          "status": "skipped",
          "title": "executeMitigateForIssue accepts scan and validation data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeThreePhaseForIssue coordinates all phases",
          "status": "skipped",
          "title": "executeThreePhaseForIssue coordinates all phases",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Phase data flows between phases correctly",
          "status": "skipped",
          "title": "Phase data flows between phases correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Aborts if scan determines issue cannot be fixed",
          "status": "skipped",
          "title": "Aborts if scan determines issue cannot be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Helper methods are accessible",
          "status": "skipped",
          "title": "Helper methods are accessible",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932532,
      "endTime": 1760046932532,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/phase-decomposition-simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 1: Scan (Already Working)"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 1: Scan (Already Working) should mark vulnerabilities in vendor files with isVendor flag",
          "status": "skipped",
          "title": "should mark vulnerabilities in vendor files with isVendor flag",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 2: Validation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 2: Validation - Vendor File Filtering should mark vendor file vulnerabilities as VENDORED, not FALSE_POSITIVE",
          "status": "skipped",
          "title": "should mark vendor file vulnerabilities as VENDORED, not FALSE_POSITIVE",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 2: Validation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 2: Validation - Vendor File Filtering should skip test generation for vendor files",
          "status": "skipped",
          "title": "should skip test generation for vendor files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 3: Mitigation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 3: Mitigation - Vendor File Filtering should not generate fixes for vendor files",
          "status": "skipped",
          "title": "should not generate fixes for vendor files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 3: Mitigation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 3: Mitigation - Vendor File Filtering should exclude vendor files from fix generation even if mixed with app files",
          "status": "skipped",
          "title": "should exclude vendor files from fix generation even if mixed with app files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Integration: End-to-End Vendor Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Integration: End-to-End Vendor Filtering should handle vendor files correctly through all phases",
          "status": "skipped",
          "title": "should handle vendor files correctly through all phases",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Vendor Detection Helper Functions"
          ],
          "fullName": "Vendor Filtering Across All Phases Vendor Detection Helper Functions should extract files from various issue formats",
          "status": "skipped",
          "title": "should extract files from various issue formats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Vendor Detection Helper Functions"
          ],
          "fullName": "Vendor Filtering Across All Phases Vendor Detection Helper Functions should correctly identify vendor patterns",
          "status": "skipped",
          "title": "should correctly identify vendor patterns",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932532,
      "endTime": 1760046932532,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/vendor-filtering-all-phases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should correlate vulnerabilities with known CVE entries",
          "status": "passed",
          "title": "should correlate vulnerabilities with known CVE entries",
          "duration": 10.576920000000086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should map CVE severity scores to our risk levels",
          "status": "passed",
          "title": "should map CVE severity scores to our risk levels",
          "duration": 0.17805300000009083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should handle multiple vulnerability types",
          "status": "passed",
          "title": "should handle multiple vulnerability types",
          "duration": 10.320478999999978,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-89 (SQL Injection)",
          "status": "passed",
          "title": "should find CVEs related to CWE-89 (SQL Injection)",
          "duration": 0.2420510000000604,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-79 (XSS)",
          "status": "passed",
          "title": "should find CVEs related to CWE-79 (XSS)",
          "duration": 0.05980899999997291,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should handle unknown CWE IDs gracefully",
          "status": "passed",
          "title": "should handle unknown CWE IDs gracefully",
          "duration": 10.156402000000071,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should enhance vulnerability risk assessment with CVE data",
          "status": "passed",
          "title": "should enhance vulnerability risk assessment with CVE data",
          "duration": 0.206957999999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should calculate appropriate enhanced risk levels",
          "status": "passed",
          "title": "should calculate appropriate enhanced risk levels",
          "duration": 0.08685400000001664,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should have access to CVE database with recent entries",
          "status": "passed",
          "title": "should have access to CVE database with recent entries",
          "duration": 0.1793320000000449,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should provide CVE search capabilities",
          "status": "passed",
          "title": "should provide CVE search capabilities",
          "duration": 0.1975479999999834,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should generate CVE-enhanced security reports",
          "status": "passed",
          "title": "should generate CVE-enhanced security reports",
          "duration": 0.48620499999992717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should provide actionable CVE-based recommendations",
          "status": "passed",
          "title": "should provide actionable CVE-based recommendations",
          "duration": 0.27624900000000707,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should cache CVE lookups for better performance",
          "status": "passed",
          "title": "should cache CVE lookups for better performance",
          "duration": 10.25030199999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should handle large vulnerability sets efficiently",
          "status": "passed",
          "title": "should handle large vulnerability sets efficiently",
          "duration": 0.16588100000001305,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933329,
      "endTime": 1760046933373.2502,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/cve-correlator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Ruby SQL injection with factory patterns",
          "status": "passed",
          "title": "should detect Ruby SQL injection with factory patterns",
          "duration": 0.8967840000000251,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python SQL injection",
          "status": "passed",
          "title": "should detect Python SQL injection",
          "duration": 0.6345699999999397,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python pickle deserialization",
          "status": "passed",
          "title": "should detect Python pickle deserialization",
          "duration": 0.32766000000015083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should handle multiple patterns correctly",
          "status": "passed",
          "title": "should handle multiple patterns correctly",
          "duration": 1.1630539999998746,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should not have regex serialization issues",
          "status": "passed",
          "title": "should not have regex serialization issues",
          "duration": 0.8603210000001127,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933682,
      "endTime": 1760046933685.8604,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/detector-v2-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in backticks",
          "status": "passed",
          "title": "should detect file paths in backticks",
          "duration": 0.3733169999998154,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in Affected Files section",
          "status": "passed",
          "title": "should detect file paths in Affected Files section",
          "duration": 0.26300399999990987,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths with File: prefix in code blocks",
          "status": "passed",
          "title": "should detect file paths with File: prefix in code blocks",
          "duration": 0.28175400000009176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in plain comments within code blocks",
          "status": "passed",
          "title": "should detect file paths in plain comments within code blocks",
          "duration": 0.19049200000017663,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect various file path comment formats",
          "status": "passed",
          "title": "should detect various file path comment formats",
          "duration": 0.21313200000008692,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect SQL injection vulnerability in file content",
          "status": "passed",
          "title": "should detect SQL injection vulnerability in file content",
          "duration": 0.7326960000000327,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect XSS vulnerability in file content",
          "status": "passed",
          "title": "should detect XSS vulnerability in file content",
          "duration": 0.4942109999999502,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect SQL injection from issue title",
          "status": "passed",
          "title": "should detect SQL injection from issue title",
          "duration": 0.12404100000003382,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect XSS from issue title",
          "status": "passed",
          "title": "should detect XSS from issue title",
          "duration": 0.0922450000000481,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933742,
      "endTime": 1760046933744.4941,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/validation/__tests__/enricher.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should include specific vulnerability details when provided",
          "status": "skipped",
          "title": "should include specific vulnerability details when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should forbid modifying test files explicitly",
          "status": "skipped",
          "title": "should forbid modifying test files explicitly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should group vulnerabilities by file",
          "status": "skipped",
          "title": "should group vulnerabilities by file",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932532,
      "endTime": 1760046932532,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-git-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should store and retrieve validation data with correct structure",
          "status": "passed",
          "title": "should store and retrieve validation data with correct structure",
          "duration": 29.519920999999954,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should handle the actual structure returned by retrievePhaseResults",
          "status": "passed",
          "title": "should handle the actual structure returned by retrievePhaseResults",
          "duration": 0.7438530000000583,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933454,
      "endTime": 1760046933484.744,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-executor/__tests__/phase-data-persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect eval injection",
          "status": "passed",
          "title": "should detect eval injection",
          "duration": 1.0708930000000692,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect SQL injection",
          "status": "passed",
          "title": "should detect SQL injection",
          "duration": 0.42630400000007285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect XSS vulnerabilities",
          "status": "passed",
          "title": "should detect XSS vulnerabilities",
          "duration": 0.4247740000000704,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect Python eval usage",
          "status": "passed",
          "title": "should detect Python eval usage",
          "duration": 0.3815819999999803,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect command injection",
          "status": "passed",
          "title": "should detect command injection",
          "duration": 0.39816399999995156,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "multi-language support"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection multi-language support should handle mixed language files",
          "status": "passed",
          "title": "should handle mixed language files",
          "duration": 0.46376599999985046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should filter out false positives based on confidence",
          "status": "passed",
          "title": "should filter out false positives based on confidence",
          "duration": 0.428269999999884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should provide confidence scores",
          "status": "passed",
          "title": "should provide confidence scores",
          "duration": 0.37021500000014385,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046933673,
      "endTime": 1760046933677.37,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback to regex detection when AST service is unavailable",
          "status": "skipped",
          "title": "should fallback to regex detection when AST service is unavailable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST parsing times out",
          "status": "skipped",
          "title": "should fallback when AST parsing times out",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST returns parse errors",
          "status": "skipped",
          "title": "should fallback when AST returns parse errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should prefer AST results when available",
          "status": "skipped",
          "title": "should prefer AST results when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should handle mixed results (some AST, some fallback)",
          "status": "skipped",
          "title": "should handle mixed results (some AST, some fallback)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should lower confidence for regex-only detections",
          "status": "skipped",
          "title": "should lower confidence for regex-only detections",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should not double-count vulnerabilities detected by both methods",
          "status": "skipped",
          "title": "should not double-count vulnerabilities detected by both methods",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046932532,
      "endTime": 1760046932532,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/fallback-strategy.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should NOT enable enhanced context by default",
          "status": "passed",
          "title": "should NOT enable enhanced context by default",
          "duration": 5585.973845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should enable enhanced context only when explicitly requested",
          "status": "passed",
          "title": "should enable enhanced context only when explicitly requested",
          "duration": 2705.217300000001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046934569,
      "endTime": 1760046942860.2173,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/enhanced-context-default.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 1: Diffie-Hellman Key Exchange (Most Secure)"
          ],
          "fullName": "AST Service Key Exchange Option 1: Diffie-Hellman Key Exchange (Most Secure) should establish shared secret using DH key exchange",
          "status": "passed",
          "title": "should establish shared secret using DH key exchange",
          "duration": 32.971575999999914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 2: ECDH Key Exchange (Modern & Efficient)"
          ],
          "fullName": "AST Service Key Exchange Option 2: ECDH Key Exchange (Modern & Efficient) should establish shared secret using ECDH",
          "status": "passed",
          "title": "should establish shared secret using ECDH",
          "duration": 0.7017500000001746,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 3: Pre-shared Key with Secure Transport"
          ],
          "fullName": "AST Service Key Exchange Option 3: Pre-shared Key with Secure Transport should use client-provided key over TLS (simplest secure option)",
          "status": "passed",
          "title": "should use client-provided key over TLS (simplest secure option)",
          "duration": 0.44004599999971106,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Current Implementation Issues"
          ],
          "fullName": "AST Service Key Exchange Current Implementation Issues should fail when server uses different key than client",
          "status": "passed",
          "title": "should fail when server uses different key than client",
          "duration": 0.46217000000069675,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943520,
      "endTime": 1760046943554.4622,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/key-exchange.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show detector uses client-side ASTPatternInterpreter",
          "status": "passed",
          "title": "should show detector uses client-side ASTPatternInterpreter",
          "duration": 0.2891559999989113,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show we need ElixirASTAnalyzer for server-side AST",
          "status": "passed",
          "title": "should show we need ElixirASTAnalyzer for server-side AST",
          "duration": 0.1808839999994234,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should demonstrate that Python detection requires server-side AST",
          "status": "passed",
          "title": "should demonstrate that Python detection requires server-side AST",
          "duration": 0.19664600000032806,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should show that multi-language support is needed",
          "status": "passed",
          "title": "should show that multi-language support is needed",
          "duration": 0.07171500000004016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should detect JS vulnerabilities with current system",
          "status": "passed",
          "title": "should detect JS vulnerabilities with current system",
          "duration": 1.5663530000001629,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should NOT attempt to parse non-JS languages with Babel",
          "status": "passed",
          "title": "should NOT attempt to parse non-JS languages with Babel",
          "duration": 0.11802800000077696,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should require server-side AST for accurate multi-language detection",
          "status": "passed",
          "title": "should require server-side AST for accurate multi-language detection",
          "duration": 0.09285799999997835,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should show ElixirASTAnalyzer can handle multiple languages",
          "status": "passed",
          "title": "should show ElixirASTAnalyzer can handle multiple languages",
          "duration": 0.05321199999889359,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943761,
      "endTime": 1760046943763.5664,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/server-ast-integration-safe.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "status": "skipped",
          "title": "FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should support multiple languages through server AST",
          "status": "skipped",
          "title": "FAILS: detector should support multiple languages through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Multi-Language Detection Requirements"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Multi-Language Detection Requirements FAILS: should detect vulnerabilities in Python code",
          "status": "skipped",
          "title": "FAILS: should detect vulnerabilities in Python code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Integration Point"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Integration Point FAILS: detector constructor should accept ElixirASTAnalyzer",
          "status": "skipped",
          "title": "FAILS: detector constructor should accept ElixirASTAnalyzer",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046934098,
      "endTime": 1760046934098,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/server-ast-red-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should reconstruct regex from serialized format",
          "status": "passed",
          "title": "should reconstruct regex from serialized format",
          "duration": 0.25476999999955297,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle multiple regex with different flags",
          "status": "passed",
          "title": "should handle multiple regex with different flags",
          "duration": 0.1590249999990192,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in AST rules",
          "status": "passed",
          "title": "should handle regex in AST rules",
          "duration": 0.12224199999945995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in context rules",
          "status": "passed",
          "title": "should handle regex in context rules",
          "duration": 0.1915259999987029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle deeply nested regex objects",
          "status": "passed",
          "title": "should handle deeply nested regex objects",
          "duration": 0.14761899999939487,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle mixed string and regex patterns gracefully",
          "status": "passed",
          "title": "should handle mixed string and regex patterns gracefully",
          "duration": 0.16956000000027416,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943798,
      "endTime": 1760046943799.1697,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/pattern-regex-reconstruction-success.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return JavaScript patterns",
          "status": "passed",
          "title": "should return JavaScript patterns",
          "duration": 0.46809099999882164,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return TypeScript patterns (same as JavaScript)",
          "status": "passed",
          "title": "should return TypeScript patterns (same as JavaScript)",
          "duration": 0.4529529999999795,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return empty array for unsupported language",
          "status": "passed",
          "title": "should return empty array for unsupported language",
          "duration": 0.18279999999867869,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should handle case-insensitive language names",
          "status": "passed",
          "title": "should handle case-insensitive language names",
          "duration": 0.3332559999998921,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns of specific type",
          "status": "passed",
          "title": "should return patterns of specific type",
          "duration": 0.13148200000068755,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns from all languages",
          "status": "passed",
          "title": "should return patterns from all languages",
          "duration": 0.08423799999945913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getAllPatterns"
          ],
          "fullName": "LocalPatternSource getAllPatterns should return minimal fallback patterns",
          "status": "passed",
          "title": "should return minimal fallback patterns",
          "duration": 0.10759900000084599,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should fetch patterns from API",
          "status": "passed",
          "title": "should fetch patterns from API",
          "duration": 0.6503049999992072,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should handle API errors",
          "status": "passed",
          "title": "should handle API errors",
          "duration": 0.24732099999891943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should fetch patterns for all supported languages",
          "status": "passed",
          "title": "should fetch patterns for all supported languages",
          "duration": 0.4945869999992283,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should continue fetching even if some languages fail",
          "status": "passed",
          "title": "should continue fetching even if some languages fail",
          "duration": 0.3594020000000455,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should use API source when available",
          "status": "passed",
          "title": "should use API source when available",
          "duration": 0.24453399999947578,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should fall back to local source on API error",
          "status": "passed",
          "title": "should fall back to local source on API error",
          "duration": 0.21838799999932235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "status": "passed",
          "title": "should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "duration": 0.29973099999915576,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create HybridPatternSource when API key is provided",
          "status": "passed",
          "title": "should create HybridPatternSource when API key is provided",
          "duration": 0.09377499999936845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when no API key is provided",
          "status": "passed",
          "title": "should create LocalPatternSource when no API key is provided",
          "duration": 0.08173799999894982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should pass API URL to HybridPatternSource",
          "status": "passed",
          "title": "should pass API URL to HybridPatternSource",
          "duration": 0.07104900000013004,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943692,
      "endTime": 1760046943697.0818,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/pattern-source.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create singleton instance",
          "status": "passed",
          "title": "should create singleton instance",
          "duration": 0.1316950000000361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should respect log level configuration",
          "status": "passed",
          "title": "should respect log level configuration",
          "duration": 0.0923320000001695,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create log directory when enabled",
          "status": "passed",
          "title": "should create log directory when enabled",
          "duration": 0.671014000001378,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log conversation to file",
          "status": "passed",
          "title": "should log conversation to file",
          "duration": 1.1700980000005075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log summary when enabled",
          "status": "passed",
          "title": "should log summary when enabled",
          "duration": 10.710471000000325,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943601,
      "endTime": 1760046943613.7104,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/ai/conversation-logger.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should provide at least 25 patterns per major language",
          "status": "failed",
          "title": "should provide at least 25 patterns per major language",
          "duration": 2.107819999999265,
          "failureMessages": [
            "AssertionError: javascript should have at least 25 patterns: expected 12 to be greater than or equal to 25\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/regression/pattern-availability.test.ts:40:93\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should cover all critical vulnerability types",
          "status": "failed",
          "title": "should cover all critical vulnerability types",
          "duration": 1.4368209999993269,
          "failureMessages": [
            "AssertionError: sql_injection should have patterns: expected 0 to be greater than 0\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/regression/pattern-availability.test.ts:61:65\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should have at least 10 JavaScript patterns in minimal set",
          "status": "passed",
          "title": "should have at least 10 JavaScript patterns in minimal set",
          "duration": 0.20335699999850476,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should detect pattern count degradation",
          "status": "passed",
          "title": "should detect pattern count degradation",
          "duration": 0.13370900000154506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have valid regex patterns",
          "status": "passed",
          "title": "should have valid regex patterns",
          "duration": 0.9425609999998414,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have unique pattern IDs",
          "status": "failed",
          "title": "should have unique pattern IDs",
          "duration": 0.9457949999996345,
          "failureMessages": [
            "AssertionError: expected 0 to be greater than 100\n    at /var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/regression/pattern-availability.test.ts:178:30\n    at processTicksAndRejections (node:internal/process/task_queues:95:5)\n    at file:///var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        }
      ],
      "startTime": 1760046943826,
      "endTime": 1760046943831.9458,
      "status": "failed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/regression/pattern-availability.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "API Parameter Bug Fix - temperature and top_p conflict",
            "Anthropic API calls"
          ],
          "fullName": "API Parameter Bug Fix - temperature and top_p conflict Anthropic API calls should NOT send top_p parameter (only temperature)",
          "status": "passed",
          "title": "should NOT send top_p parameter (only temperature)",
          "duration": 1.235102000000552,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Parameter Bug Fix - temperature and top_p conflict",
            "Anthropic API calls"
          ],
          "fullName": "API Parameter Bug Fix - temperature and top_p conflict Anthropic API calls should send temperature when explicitly provided",
          "status": "passed",
          "title": "should send temperature when explicitly provided",
          "duration": 0.31115200000022014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Parameter Bug Fix - temperature and top_p conflict",
            "Anthropic API calls"
          ],
          "fullName": "API Parameter Bug Fix - temperature and top_p conflict Anthropic API calls should use default temperature (0.2) when not provided",
          "status": "passed",
          "title": "should use default temperature (0.2) when not provided",
          "duration": 0.3007979999983945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Parameter Bug Fix - temperature and top_p conflict",
            "OpenAI API calls"
          ],
          "fullName": "API Parameter Bug Fix - temperature and top_p conflict OpenAI API calls should NOT send top_p parameter (only temperature)",
          "status": "passed",
          "title": "should NOT send top_p parameter (only temperature)",
          "duration": 1.166216000001441,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Parameter Bug Fix - temperature and top_p conflict",
            "API Constraint Validation"
          ],
          "fullName": "API Parameter Bug Fix - temperature and top_p conflict API Constraint Validation documents the Anthropic API constraint about temperature/top_p",
          "status": "passed",
          "title": "documents the Anthropic API constraint about temperature/top_p",
          "duration": 0.18946300000061456,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943625,
      "endTime": 1760046943628.1895,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/client-api-parameters.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for Anthropic when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for Anthropic when vending is disabled",
          "duration": 0.9153539999988425,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for OpenAI when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for OpenAI when vending is disabled",
          "duration": 0.36195000000043365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 1.6235039999992296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should throw error for missing API key",
          "status": "passed",
          "title": "should throw error for missing API key",
          "duration": 0.25959399999919697,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943719,
      "endTime": 1760046943722.6235,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/client-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should detect security issues and enable security analysis mode",
          "status": "passed",
          "title": "should detect security issues and enable security analysis mode",
          "duration": 202.85113499999898,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should include security analysis data when processing security issues",
          "status": "passed",
          "title": "should include security analysis data when processing security issues",
          "duration": 201.59076399999867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should respect enableSecurityAnalysis configuration flag",
          "status": "passed",
          "title": "should respect enableSecurityAnalysis configuration flag",
          "duration": 201.35421700000006,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046942900,
      "endTime": 1760046943506.3542,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/processor-security-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Prompt Generation"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Prompt Generation should request RED-only tests in prompt, not RED+GREEN+REFACTOR",
          "status": "passed",
          "title": "should request RED-only tests in prompt, not RED+GREEN+REFACTOR",
          "duration": 0.19754499999908148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Prompt Generation"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Prompt Generation should support multiple RED tests for complex vulnerabilities",
          "status": "passed",
          "title": "should support multiple RED tests for complex vulnerabilities",
          "duration": 0.07426599999962491,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Response Format"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Response Format should accept single RED test format",
          "status": "passed",
          "title": "should accept single RED test format",
          "duration": 0.4080020000001241,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Response Format"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Response Format should accept multiple RED tests format",
          "status": "passed",
          "title": "should accept multiple RED tests format",
          "duration": 0.3330890000015643,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Response Format"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Response Format should reject response with GREEN or REFACTOR tests",
          "status": "passed",
          "title": "should reject response with GREEN or REFACTOR tests",
          "duration": 0.21985599999970873,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Blocker 2: AI Test Generator RED-only Tests",
            "Response Format in Prompt"
          ],
          "fullName": "RFC-060 Blocker 2: AI Test Generator RED-only Tests Response Format in Prompt should specify RED-only response format in prompt",
          "status": "passed",
          "title": "should specify RED-only response format in prompt",
          "duration": 0.12136499999905936,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943804,
      "endTime": 1760046943805.333,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/rfc-060-blocker-2-red-only.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute Jest command correctly",
          "status": "passed",
          "title": "should execute Jest command correctly",
          "duration": 0.4390260000000126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute Vitest command correctly",
          "status": "passed",
          "title": "should execute Vitest command correctly",
          "duration": 0.2372689999992872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute RSpec command correctly",
          "status": "passed",
          "title": "should execute RSpec command correctly",
          "duration": 0.2239690000005794,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute pytest command correctly",
          "status": "passed",
          "title": "should execute pytest command correctly",
          "duration": 0.2162929999994958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute Minitest command correctly",
          "status": "passed",
          "title": "should execute Minitest command correctly",
          "duration": 0.2204089999995631,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute Mocha command correctly",
          "status": "passed",
          "title": "should execute Mocha command correctly",
          "duration": 0.23578900000029535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute PHPUnit command correctly",
          "status": "passed",
          "title": "should execute PHPUnit command correctly",
          "duration": 0.26236299999982293,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute JUnit command correctly",
          "status": "passed",
          "title": "should execute JUnit command correctly",
          "duration": 0.22130099999958475,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute Go testing command correctly",
          "status": "passed",
          "title": "should execute Go testing command correctly",
          "duration": 0.13592400000015914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Framework Command Execution"
          ],
          "fullName": "TestRunner Framework Command Execution should execute ExUnit command correctly",
          "status": "passed",
          "title": "should execute ExUnit command correctly",
          "duration": 0.14530000000013388,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Test Result Detection"
          ],
          "fullName": "TestRunner Test Result Detection should return failure for vulnerable code (RED test failing)",
          "status": "passed",
          "title": "should return failure for vulnerable code (RED test failing)",
          "duration": 0.11223799999970652,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Test Result Detection"
          ],
          "fullName": "TestRunner Test Result Detection should return success when RED test passes (catches vulnerability)",
          "status": "passed",
          "title": "should return success when RED test passes (catches vulnerability)",
          "duration": 0.10329900000033376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Timeout Handling"
          ],
          "fullName": "TestRunner Timeout Handling should enforce 30-second timeout",
          "status": "passed",
          "title": "should enforce 30-second timeout",
          "duration": 0.11862499999915599,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Timeout Handling"
          ],
          "fullName": "TestRunner Timeout Handling should allow custom timeout override",
          "status": "passed",
          "title": "should allow custom timeout override",
          "duration": 0.13136800000029325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Output Capture"
          ],
          "fullName": "TestRunner Output Capture should capture stdout and stderr",
          "status": "passed",
          "title": "should capture stdout and stderr",
          "duration": 0.08739199999945413,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Output Capture"
          ],
          "fullName": "TestRunner Output Capture should return structured results",
          "status": "passed",
          "title": "should return structured results",
          "duration": 0.17257299999982934,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Error Handling"
          ],
          "fullName": "TestRunner Error Handling should handle test execution errors gracefully",
          "status": "passed",
          "title": "should handle test execution errors gracefully",
          "duration": 0.0929599999999482,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestRunner",
            "Error Handling"
          ],
          "fullName": "TestRunner Error Handling should handle missing test framework gracefully",
          "status": "passed",
          "title": "should handle missing test framework gracefully",
          "duration": 0.07645400000001246,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943739,
      "endTime": 1760046943742.1726,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/test-runner.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly query Linear GraphQL API for labeled issues",
          "status": "skipped",
          "title": "should correctly query Linear GraphQL API for labeled issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should integrate with issue detector for multi-platform detection",
          "status": "skipped",
          "title": "should integrate with issue detector for multi-platform detection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should handle pagination for large result sets",
          "status": "skipped",
          "title": "should handle pagination for large result sets",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly map repository information from issue description",
          "status": "skipped",
          "title": "should correctly map repository information from issue description",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should be triggered by GitHub Actions schedule",
          "status": "skipped",
          "title": "should be triggered by GitHub Actions schedule",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should handle concurrent platform checks",
          "status": "skipped",
          "title": "should handle concurrent platform checks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should find issues with either autofix OR rsolv label",
          "status": "skipped",
          "title": "should find issues with either autofix OR rsolv label",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should filter by team if teamId is provided",
          "status": "skipped",
          "title": "should filter by team if teamId is provided",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046934098,
      "endTime": 1760046934098,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/platforms/linear/linear-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "RED Tests - Prove the problem exists"
          ],
          "fullName": "IssueCreator - max_issues limit RED Tests - Prove the problem exists should create all issues when max_issues is not specified",
          "status": "skipped",
          "title": "should create all issues when max_issues is not specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "RED Tests - Prove the problem exists"
          ],
          "fullName": "IssueCreator - max_issues limit RED Tests - Prove the problem exists should fail to limit issues when max_issues is set but not implemented",
          "status": "skipped",
          "title": "should fail to limit issues when max_issues is set but not implemented",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should respect max_issues limit when set to 3",
          "status": "skipped",
          "title": "should respect max_issues limit when set to 3",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should respect max_issues limit when set to 1",
          "status": "skipped",
          "title": "should respect max_issues limit when set to 1",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should handle max_issues of 0 by creating no issues",
          "status": "skipped",
          "title": "should handle max_issues of 0 by creating no issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should handle max_issues larger than available groups",
          "status": "skipped",
          "title": "should handle max_issues larger than available groups",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should still respect createIssues flag when false",
          "status": "skipped",
          "title": "should still respect createIssues flag when false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should maintain issue creation order (highest severity first)",
          "status": "skipped",
          "title": "should maintain issue creation order (highest severity first)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should log appropriate messages when limiting issues",
          "status": "skipped",
          "title": "should log appropriate messages when limiting issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should handle empty vulnerability groups array",
          "status": "skipped",
          "title": "should handle empty vulnerability groups array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should continue creating issues even if one fails",
          "status": "skipped",
          "title": "should continue creating issues even if one fails",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046934098,
      "endTime": 1760046934098,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/scanner/__tests__/issue-creator-max-issues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should generate basic OWASP compliance report",
          "status": "passed",
          "title": "should generate basic OWASP compliance report",
          "duration": 0.34915300000102434,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should categorize vulnerabilities by OWASP category",
          "status": "passed",
          "title": "should categorize vulnerabilities by OWASP category",
          "duration": 0.1288779999995313,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should calculate compliance status based on severity",
          "status": "passed",
          "title": "should calculate compliance status based on severity",
          "duration": 0.09205699999984063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "SOC 2 Compliance Report"
          ],
          "fullName": "ComplianceGenerator SOC 2 Compliance Report should generate SOC 2 compliance report",
          "status": "passed",
          "title": "should generate SOC 2 compliance report",
          "duration": 0.14323200000035285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should generate markdown compliance report",
          "status": "passed",
          "title": "should generate markdown compliance report",
          "duration": 0.20673200000055658,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should handle empty vulnerability lists",
          "status": "passed",
          "title": "should handle empty vulnerability lists",
          "duration": 0.10523900000043795,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943817,
      "endTime": 1760046943818.2068,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/compliance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for SQL injection",
          "status": "passed",
          "title": "should generate line-level explanation for SQL injection",
          "duration": 0.23558500000035565,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for XSS",
          "status": "passed",
          "title": "should generate line-level explanation for XSS",
          "duration": 0.08925599999929545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should generate concept-level explanation for security concepts",
          "status": "passed",
          "title": "should generate concept-level explanation for security concepts",
          "duration": 0.27169099999991886,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should include prevention methods and attack scenarios",
          "status": "passed",
          "title": "should include prevention methods and attack scenarios",
          "duration": 0.08695100000113598,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should generate business-level explanation with impact analysis",
          "status": "passed",
          "title": "should generate business-level explanation with impact analysis",
          "duration": 0.3099839999995311,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should calculate appropriate risk scores based on severity",
          "status": "passed",
          "title": "should calculate appropriate risk scores based on severity",
          "duration": 0.12703099999998813,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should generate complete explanation with all three tiers",
          "status": "passed",
          "title": "should generate complete explanation with all three tiers",
          "duration": 0.3399100000006001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should organize explanations by vulnerability type",
          "status": "passed",
          "title": "should organize explanations by vulnerability type",
          "duration": 0.24729200000001583,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should format explanation as markdown",
          "status": "passed",
          "title": "should format explanation as markdown",
          "duration": 0.13035200000012992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should generate comprehensive markdown report",
          "status": "passed",
          "title": "should generate comprehensive markdown report",
          "duration": 18.72548800000004,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943652,
      "endTime": 1760046943673.7256,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/explanation-framework.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should authenticate successfully with valid credentials",
          "status": "passed",
          "title": "should authenticate successfully with valid credentials",
          "duration": 0.5227169999998296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should throw error on authentication failure",
          "status": "passed",
          "title": "should throw error on authentication failure",
          "duration": 1.0097549999991315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should search issues with autofix label",
          "status": "passed",
          "title": "should search issues with autofix label",
          "duration": 0.886662000000797,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should handle empty search results",
          "status": "passed",
          "title": "should handle empty search results",
          "duration": 0.24578199999996286,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "createComment"
          ],
          "fullName": "JiraAdapter createComment should add comment to issue",
          "status": "passed",
          "title": "should add comment to issue",
          "duration": 0.38879799999995157,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "addLink"
          ],
          "fullName": "JiraAdapter addLink should create remote link to GitHub PR",
          "status": "passed",
          "title": "should create remote link to GitHub PR",
          "duration": 0.3707410000006348,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "updateIssueStatus"
          ],
          "fullName": "JiraAdapter updateIssueStatus should update issue status",
          "status": "passed",
          "title": "should update issue status",
          "duration": 0.36890300000050047,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943643,
      "endTime": 1760046943647.3708,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/platforms/jira/jira-adapter.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail when Claude only provides JSON without editing files",
          "status": "skipped",
          "title": "should fail when Claude only provides JSON without editing files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail to create PR when files are not actually modified",
          "status": "skipped",
          "title": "should fail to create PR when files are not actually modified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should successfully edit files when prompt explicitly requires Edit tool usage",
          "status": "skipped",
          "title": "should successfully edit files when prompt explicitly requires Edit tool usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should validate that both Edit tools AND JSON are used",
          "status": "skipped",
          "title": "should validate that both Edit tools AND JSON are used",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should use concise but effective prompt structure",
          "status": "skipped",
          "title": "should use concise but effective prompt structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should maintain backward compatibility with existing adapters",
          "status": "skipped",
          "title": "should maintain backward compatibility with existing adapters",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046934098,
      "endTime": 1760046934098,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-git-prompt.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should process issue successfully with git-based approach",
          "status": "passed",
          "title": "should process issue successfully with git-based approach",
          "duration": 0.8487350000013976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if repository has uncommitted changes",
          "status": "passed",
          "title": "should fail if repository has uncommitted changes",
          "duration": 0.26240300000063144,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if issue cannot be fixed",
          "status": "passed",
          "title": "should fail if issue cannot be fixed",
          "duration": 0.1769929999991291,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 0.3932380000005651,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943791,
      "endTime": 1760046943792.3933,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/git-based-processor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should store phase results successfully",
          "status": "passed",
          "title": "should store phase results successfully",
          "duration": 17.77173799999946,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should include API key in headers",
          "status": "passed",
          "title": "should include API key in headers",
          "duration": 0.3808919999992213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should fall back to local storage on API failure",
          "status": "passed",
          "title": "should fall back to local storage on API failure",
          "duration": 3.561786000000211,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should retrieve phase results successfully",
          "status": "passed",
          "title": "should retrieve phase results successfully",
          "duration": 1.0790450000004057,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should return null for 404 responses",
          "status": "passed",
          "title": "should return null for 404 responses",
          "duration": 0.27377200000046287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should fall back to local storage on API error",
          "status": "passed",
          "title": "should fall back to local storage on API error",
          "duration": 0.4784849999996368,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should validate allowed phase transitions",
          "status": "passed",
          "title": "should validate allowed phase transitions",
          "duration": 0.28406299999915063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should reject transition if commit has changed",
          "status": "passed",
          "title": "should reject transition if commit has changed",
          "duration": 0.1327980000005482,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should use GITHUB_SHA when git is not available (act/Docker scenario)",
          "status": "passed",
          "title": "should use GITHUB_SHA when git is not available (act/Docker scenario)",
          "duration": 0.17785000000003492,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should fallback to dummy SHA when neither git nor GITHUB_SHA available",
          "status": "passed",
          "title": "should fallback to dummy SHA when neither git nor GITHUB_SHA available",
          "duration": 0.2198339999995369,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943570,
      "endTime": 1760046943595.2197,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-data-client/__tests__/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFiles limit",
          "status": "passed",
          "title": "should respect maxFiles limit",
          "duration": 0.956531999998333,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should exclude default patterns",
          "status": "passed",
          "title": "should exclude default patterns",
          "duration": 0.3088580000003276,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should filter by language when specified",
          "status": "passed",
          "title": "should filter by language when specified",
          "duration": 0.22250699999858625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFileSize",
          "status": "passed",
          "title": "should respect maxFileSize",
          "duration": 0.20981600000050094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize changed files",
          "status": "passed",
          "title": "should prioritize changed files",
          "duration": 0.22981700000127603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize security-relevant files",
          "status": "passed",
          "title": "should prioritize security-relevant files",
          "duration": 0.14801299999999173,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should deprioritize test files",
          "status": "passed",
          "title": "should deprioritize test files",
          "duration": 0.15415399999983492,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should include all file metadata",
          "status": "passed",
          "title": "should include all file metadata",
          "duration": 0.12845500000003085,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should handle custom exclude patterns",
          "status": "passed",
          "title": "should handle custom exclude patterns",
          "duration": 0.17994999999973516,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should detect Elixir files",
          "status": "passed",
          "title": "should detect Elixir files",
          "duration": 0.11277900000095542,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should select files from multiple languages",
          "status": "passed",
          "title": "should select files from multiple languages",
          "duration": 0.21849899999870104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should distribute slots evenly across languages",
          "status": "passed",
          "title": "should distribute slots evenly across languages",
          "duration": 0.22851799999989453,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046943776,
      "endTime": 1760046943779.2285,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/file-selector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "status": "passed",
          "title": "should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "duration": 0.4711050000000796,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that ASTPatternInterpreter only supports JS/TS",
          "status": "passed",
          "title": "should show that ASTPatternInterpreter only supports JS/TS",
          "duration": 0.10082499999998618,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Desired State - These should guide GREEN phase"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Desired State - These should guide GREEN phase detector should use ElixirASTAnalyzer for multi-language support",
          "status": "passed",
          "title": "detector should use ElixirASTAnalyzer for multi-language support",
          "duration": 0.10735500000009779,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Memory Safety Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Memory Safety Check should not create detector in a way that causes memory issues",
          "status": "passed",
          "title": "should not create detector in a way that causes memory issues",
          "duration": 0.3154190000000199,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946346,
      "endTime": 1760046946346.4712,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/server-ast-unit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should not include tier parameter in request",
          "status": "passed",
          "title": "fetchPatterns should not include tier parameter in request",
          "duration": 0.6668839999999818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns response should not contain tier fields",
          "status": "passed",
          "title": "fetchPatterns response should not contain tier fields",
          "duration": 0.46397300000012365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should return all patterns with valid API key",
          "status": "passed",
          "title": "fetchPatterns should return all patterns with valid API key",
          "duration": 0.25327100000004066,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns without API key should return demo patterns only",
          "status": "passed",
          "title": "fetchPatterns without API key should return demo patterns only",
          "duration": 0.314145999999937,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access deprecated fetchPatternsByTier should still work for backward compatibility",
          "status": "passed",
          "title": "deprecated fetchPatternsByTier should still work for backward compatibility",
          "duration": 0.32445099999995364,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access PatternResponse type should not require tier fields",
          "status": "passed",
          "title": "PatternResponse type should not require tier fields",
          "duration": 0.2636889999998857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access error messages should not mention tiers",
          "status": "passed",
          "title": "error messages should not mention tiers",
          "duration": 1.3936879999998837,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Pattern counting without tiers"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Pattern counting without tiers should return total pattern count across all languages",
          "status": "passed",
          "title": "should return total pattern count across all languages",
          "duration": 0.9992259999999078,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946186,
      "endTime": 1760046946189.9993,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/pattern-api-client-tier-removal.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should verify environment variable is set when using vended credentials",
          "status": "passed",
          "title": "should verify environment variable is set when using vended credentials",
          "duration": 0.1368649999999434,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when not using vended credentials",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when not using vended credentials",
          "duration": 0.07484399999975722,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "duration": 0.058651999999710824,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946365,
      "endTime": 1760046946365.137,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/ai/vended-credentials-env.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should fetch patterns from real API",
          "status": "skipped",
          "title": "should fetch patterns from real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should handle language-specific pattern requests",
          "status": "skipped",
          "title": "should handle language-specific pattern requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Validation API"
          ],
          "fullName": "API Endpoint Integration Tests Validation API should validate vulnerabilities through real API",
          "status": "skipped",
          "title": "should validate vulnerabilities through real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should exchange credentials with real API",
          "status": "skipped",
          "title": "should exchange credentials with real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should handle credential refresh",
          "status": "skipped",
          "title": "should handle credential refresh",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Fix Tracking API"
          ],
          "fullName": "API Endpoint Integration Tests Fix Tracking API should record fix attempts",
          "status": "skipped",
          "title": "should record fix attempts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle rate limiting gracefully",
          "status": "skipped",
          "title": "should handle rate limiting gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle network errors with retry",
          "status": "skipped",
          "title": "should handle network errors with retry",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046944125,
      "endTime": 1760046944125,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/integration/api-endpoints.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should search for both configured label and rsolv label",
          "status": "passed",
          "title": "should search for both configured label and rsolv label",
          "duration": 0.30949999999984357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should deduplicate issues when they have multiple matching labels",
          "status": "passed",
          "title": "should deduplicate issues when they have multiple matching labels",
          "duration": 0.2218630000002122,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946332,
      "endTime": 1760046946332.3096,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/github/multi-label.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect XSS via document.write with string concatenation",
          "status": "passed",
          "title": "should detect XSS via document.write with string concatenation",
          "duration": 10.659823000000188,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect various XSS patterns",
          "status": "passed",
          "title": "should detect various XSS patterns",
          "duration": 0.48525500000005195,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946088,
      "endTime": 1760046946099.4854,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/regression/xss-pattern-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should return analysis with security vulnerabilities",
          "status": "passed",
          "title": "should return analysis with security vulnerabilities",
          "duration": 4.132309999999961,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should handle case with no security issues",
          "status": "passed",
          "title": "should handle case with no security issues",
          "duration": 4.099684000000025,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should work without codebase files",
          "status": "passed",
          "title": "should work without codebase files",
          "duration": 1.451090000000022,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946169,
      "endTime": 1760046946179.4512,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/security/security-analyzer-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Vitest tests with proper imports and syntax",
          "status": "passed",
          "title": "should generate Vitest tests with proper imports and syntax",
          "duration": 1.2139170000000377,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Mocha + Chai tests with appropriate assertions",
          "status": "passed",
          "title": "should generate Mocha + Chai tests with appropriate assertions",
          "duration": 0.6394030000001294,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate pytest tests with Python conventions",
          "status": "passed",
          "title": "should generate pytest tests with Python conventions",
          "duration": 0.8294819999998708,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Minitest tests for Ruby with spec syntax",
          "status": "passed",
          "title": "should generate Minitest tests for Ruby with spec syntax",
          "duration": 0.5779910000001109,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate ExUnit tests for Elixir with pattern matching",
          "status": "passed",
          "title": "should generate ExUnit tests for Elixir with pattern matching",
          "duration": 0.5054029999998875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate PHPUnit tests with proper annotations",
          "status": "passed",
          "title": "should generate PHPUnit tests with proper annotations",
          "duration": 0.7907600000000912,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect BDD style (describe/it) vs TDD style (test)",
          "status": "passed",
          "title": "should detect BDD style (describe/it) vs TDD style (test)",
          "duration": 0.6822019999999611,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should match assertion style (expect vs assert vs should)",
          "status": "passed",
          "title": "should match assertion style (expect vs assert vs should)",
          "duration": 0.6555789999999888,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should follow file naming conventions",
          "status": "passed",
          "title": "should follow file naming conventions",
          "duration": 0.692651000000069,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect and use existing test utilities",
          "status": "passed",
          "title": "should detect and use existing test utilities",
          "duration": 0.4650139999998828,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use CoverageAnalyzer to avoid duplicate tests",
          "status": "passed",
          "title": "should use CoverageAnalyzer to avoid duplicate tests",
          "duration": 0.5945819999999458,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use IssueInterpreter to understand vulnerability context",
          "status": "passed",
          "title": "should use IssueInterpreter to understand vulnerability context",
          "duration": 0.827199999999948,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should integrate with existing VulnerabilityTestGenerator",
          "status": "passed",
          "title": "should integrate with existing VulnerabilityTestGenerator",
          "duration": 0.38768499999991946,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle unknown test frameworks gracefully",
          "status": "passed",
          "title": "should handle unknown test frameworks gracefully",
          "duration": 0.28756799999996474,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle missing coverage data",
          "status": "passed",
          "title": "should handle missing coverage data",
          "duration": 0.3475349999998798,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle multi-language repositories",
          "status": "passed",
          "title": "should handle multi-language repositories",
          "duration": 0.2995730000000094,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946152,
      "endTime": 1760046946162.2996,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/adaptive-test-generator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use issue label override when present",
          "status": "passed",
          "title": "should use issue label override when present",
          "duration": 0.1587890000000698,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use vulnerability type specific config",
          "status": "passed",
          "title": "should use vulnerability type specific config",
          "duration": 0.08280999999988126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use customer tier config when no specific override",
          "status": "passed",
          "title": "should use customer tier config when no specific override",
          "duration": 0.05636599999979808,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use default when no specific config matches",
          "status": "passed",
          "title": "should use default when no specific config matches",
          "duration": 0.03748600000017177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should handle missing maxIterations config",
          "status": "passed",
          "title": "should handle missing maxIterations config",
          "duration": 0.04874900000004345,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should simulate successful fix after multiple attempts",
          "status": "passed",
          "title": "should simulate successful fix after multiple attempts",
          "duration": 0.07195899999987887,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should fail after max attempts exceeded",
          "status": "passed",
          "title": "should fail after max attempts exceeded",
          "duration": 0.047823999999764055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Test validation feedback integration"
          ],
          "fullName": "Fix Iteration Core Functionality Test validation feedback integration should include test failure context in retry prompt",
          "status": "passed",
          "title": "should include test failure context in retry prompt",
          "duration": 0.06379599999991115,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns Java SQL injection fix patterns",
          "status": "passed",
          "title": "Java SQL injection fix patterns",
          "duration": 0.055741000000125496,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PHP SQL injection fix patterns",
          "status": "passed",
          "title": "PHP SQL injection fix patterns",
          "duration": 0.06389999999964857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PDO fix patterns for PHP",
          "status": "passed",
          "title": "PDO fix patterns for PHP",
          "duration": 0.06593900000007125,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946326,
      "endTime": 1760046946327.066,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/fix-iteration-core.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should fail if repository has uncommitted changes",
          "status": "skipped",
          "title": "should fail if repository has uncommitted changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should proceed with clean git state",
          "status": "skipped",
          "title": "should proceed with clean git state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should stop if issue cannot be fixed",
          "status": "skipped",
          "title": "should stop if issue cannot be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should proceed to test generation if issue can be fixed",
          "status": "skipped",
          "title": "should proceed to test generation if issue can be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should generate tests when test generation is enabled",
          "status": "skipped",
          "title": "should generate tests when test generation is enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should skip test generation when disabled",
          "status": "skipped",
          "title": "should skip test generation when disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should validate fix when validation is enabled",
          "status": "skipped",
          "title": "should validate fix when validation is enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should retry fix when validation fails",
          "status": "skipped",
          "title": "should retry fix when validation fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should fail after max iterations",
          "status": "skipped",
          "title": "should fail after max iterations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should create educational PR by default",
          "status": "skipped",
          "title": "should create educational PR by default",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should use regular PR when educational is disabled",
          "status": "skipped",
          "title": "should use regular PR when educational is disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should rollback commit if PR creation fails",
          "status": "skipped",
          "title": "should rollback commit if PR creation fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle and rollback on unexpected errors",
          "status": "skipped",
          "title": "should handle and rollback on unexpected errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle git command failures gracefully",
          "status": "skipped",
          "title": "should handle git command failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use issue label override first",
          "status": "skipped",
          "title": "should use issue label override first",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use global config if no label override",
          "status": "skipped",
          "title": "should use global config if no label override",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use default if no config",
          "status": "skipped",
          "title": "should use default if no config",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should handle vulnerability type specific config",
          "status": "skipped",
          "title": "should handle vulnerability type specific config",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046944125,
      "endTime": 1760046944125,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/git-based-processor-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit function exists and has correct signature",
          "status": "passed",
          "title": "processIssueWithGit function exists and has correct signature",
          "duration": 0.12436499999967054,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations function exists and returns expected defaults",
          "status": "passed",
          "title": "getMaxIterations function exists and returns expected defaults",
          "duration": 0.07566999999971813,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations respects label overrides",
          "status": "passed",
          "title": "getMaxIterations respects label overrides",
          "duration": 0.06482699999969554,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations uses config when no label override",
          "status": "passed",
          "title": "getMaxIterations uses config when no label override",
          "duration": 0.053308000000015454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit returns expected result shape",
          "status": "passed",
          "title": "processIssueWithGit returns expected result shape",
          "duration": 0.0380049999998846,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946362,
      "endTime": 1760046946362.1243,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/git-based-processor-simple-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security analysis results",
          "status": "passed",
          "title": "should include security analysis results",
          "duration": 0.21508300000004965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.08738700000003519,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security recommendations",
          "status": "passed",
          "title": "should include security recommendations",
          "duration": 0.06638000000020838,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security fix templates",
          "status": "passed",
          "title": "should include security fix templates",
          "duration": 0.11121500000035667,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should mark affected files",
          "status": "passed",
          "title": "should mark affected files",
          "duration": 0.06759400000009919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security requirements",
          "status": "passed",
          "title": "should include security requirements",
          "duration": 0.06375699999989592,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include three-tier explanation structure",
          "status": "passed",
          "title": "should include three-tier explanation structure",
          "duration": 0.11394100000006802,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.05375199999980396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include fixes implemented",
          "status": "passed",
          "title": "should include fixes implemented",
          "duration": 0.03819199999998091,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include specific tier requirements",
          "status": "passed",
          "title": "should include specific tier requirements",
          "duration": 0.04802299999983006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include security impact summary",
          "status": "passed",
          "title": "should include security impact summary",
          "duration": 0.09267699999963952,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.050896999999622494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include PR description structure",
          "status": "passed",
          "title": "should include PR description structure",
          "duration": 0.06228899999996429,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should emphasize critical nature",
          "status": "passed",
          "title": "should emphasize critical nature",
          "duration": 0.04393800000025294,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.05171999999993204,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle single vulnerability type",
          "status": "passed",
          "title": "should handle single vulnerability type",
          "duration": 0.052630000000135624,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946306,
      "endTime": 1760046946307.114,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/security-prompts.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Jest from package.json",
          "status": "passed",
          "title": "should detect Jest from package.json",
          "duration": 0.20835799999986193,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Vitest from package.json",
          "status": "passed",
          "title": "should detect Vitest from package.json",
          "duration": 0.10782500000004802,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Mocha with Chai",
          "status": "passed",
          "title": "should detect Mocha with Chai",
          "duration": 0.1101859999998851,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Cypress for E2E testing",
          "status": "passed",
          "title": "should detect Cypress for E2E testing",
          "duration": 0.08241200000020399,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect multiple frameworks in one project",
          "status": "passed",
          "title": "should detect multiple frameworks in one project",
          "duration": 0.19355499999983294,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect pytest from requirements.txt",
          "status": "passed",
          "title": "should detect pytest from requirements.txt",
          "duration": 0.16862600000013117,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect unittest from import statements",
          "status": "passed",
          "title": "should detect unittest from import statements",
          "duration": 0.1422599999996237,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect RSpec from Gemfile",
          "status": "passed",
          "title": "should detect RSpec from Gemfile",
          "duration": 0.2177520000000186,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect Minitest from Gemfile",
          "status": "passed",
          "title": "should detect Minitest from Gemfile",
          "duration": 0.15000499999996464,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect Jest from test file patterns",
          "status": "passed",
          "title": "should detect Jest from test file patterns",
          "duration": 0.13742599999977756,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect RSpec from spec directory structure",
          "status": "passed",
          "title": "should detect RSpec from spec directory structure",
          "duration": 0.0789969999996174,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vi.config.js",
          "status": "passed",
          "title": "should detect from vi.config.js",
          "duration": 0.09367699999984325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vitest.config.ts",
          "status": "passed",
          "title": "should detect from vitest.config.ts",
          "duration": 0.05921200000011595,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should detect frameworks from repository path",
          "status": "passed",
          "title": "should detect frameworks from repository path",
          "duration": 0.29723199999989447,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should handle missing configuration files gracefully",
          "status": "passed",
          "title": "should handle missing configuration files gracefully",
          "duration": 0.09962700000005498,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should assign confidence scores based on detection method",
          "status": "passed",
          "title": "should assign confidence scores based on detection method",
          "duration": 0.06395100000008824,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should extract exact version from package.json",
          "status": "passed",
          "title": "should extract exact version from package.json",
          "duration": 0.058986000000004424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should handle version ranges",
          "status": "passed",
          "title": "should handle version ranges",
          "duration": 0.09907299999986208,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector Integration"
          ],
          "fullName": "TestFrameworkDetector Integration should integrate with test generator",
          "status": "passed",
          "title": "should integrate with test generator",
          "duration": 0.13054800000008981,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946274,
      "endTime": 1760046946277.1306,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/test-framework-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should have default timeout configurations",
          "status": "passed",
          "title": "should have default timeout configurations",
          "duration": 1.7259170000002086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from environment variables",
          "status": "passed",
          "title": "should load timeout from environment variables",
          "duration": 0.6217790000000605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from config file",
          "status": "passed",
          "title": "should load timeout from config file",
          "duration": 2.3438959999998588,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should merge timeouts with priority: env > file > default",
          "status": "passed",
          "title": "should merge timeouts with priority: env > file > default",
          "duration": 0.6037609999998494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should validate timeout values are numbers",
          "status": "passed",
          "title": "should validate timeout values are numbers",
          "duration": 0.364755999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should handle missing timeout properties gracefully",
          "status": "passed",
          "title": "should handle missing timeout properties gracefully",
          "duration": 0.5031240000002981,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should ensure AI provider timeout is reasonable",
          "status": "passed",
          "title": "should ensure AI provider timeout is reasonable",
          "duration": 0.36580300000014176,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946231,
      "endTime": 1760046946237.5032,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/config/__tests__/timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should require RSOLV_MODE environment variable",
          "status": "passed",
          "title": "should require RSOLV_MODE environment variable",
          "duration": 0.6548910000001342,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize scan mode from RSOLV_MODE",
          "status": "passed",
          "title": "should recognize scan mode from RSOLV_MODE",
          "duration": 0.48671599999988757,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize validate mode",
          "status": "passed",
          "title": "should recognize validate mode",
          "duration": 0.3890299999998206,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize mitigate mode",
          "status": "passed",
          "title": "should recognize mitigate mode",
          "duration": 0.37602800000013303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize full mode",
          "status": "passed",
          "title": "should recognize full mode",
          "duration": 0.38773799999989933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle batch validation with multiple issue IDs",
          "status": "passed",
          "title": "should handle batch validation with multiple issue IDs",
          "duration": 0.5015980000002855,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should respect max issues limit",
          "status": "passed",
          "title": "should respect max issues limit",
          "duration": 0.39982099999997445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle skip cache flag",
          "status": "passed",
          "title": "should handle skip cache flag",
          "duration": 0.36663599999974394,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when validate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when validate mode lacks issue ID",
          "duration": 0.36982799999987037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when mitigate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when mitigate mode lacks issue ID",
          "duration": 0.3597380000001067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when both single and multiple issue IDs are provided",
          "status": "passed",
          "title": "should throw error when both single and multiple issue IDs are provided",
          "duration": 0.3762549999996736,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when fix mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when fix mode lacks issue ID",
          "duration": 0.38956800000005387,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should normalize mode aliases",
          "status": "passed",
          "title": "should normalize mode aliases",
          "duration": 0.9172330000001239,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should throw error for unknown modes",
          "status": "passed",
          "title": "should throw error for unknown modes",
          "duration": 0.3833079999999427,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeDescription"
          ],
          "fullName": "ModeSelector getModeDescription should return appropriate descriptions for each mode",
          "status": "passed",
          "title": "should return appropriate descriptions for each mode",
          "duration": 0.41426000000001295,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require AI",
          "status": "passed",
          "title": "should identify which modes require AI",
          "duration": 0.34813300000041636,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require test generation",
          "status": "passed",
          "title": "should identify which modes require test generation",
          "duration": 0.3454309999997349,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require fix generation",
          "status": "passed",
          "title": "should identify which modes require fix generation",
          "duration": 0.3664110000004257,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946249,
      "endTime": 1760046946257.3665,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/mode-selector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "Test Execution with TestRunner"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration Test Execution with TestRunner should mark as validated when RED test fails (vulnerability confirmed)",
          "status": "passed",
          "title": "should mark as validated when RED test fails (vulnerability confirmed)",
          "duration": 0.5875949999999648,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "Test Execution with TestRunner"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration Test Execution with TestRunner should mark as false positive when RED test passes (no vulnerability)",
          "status": "passed",
          "title": "should mark as false positive when RED test passes (no vulnerability)",
          "duration": 0.45570299999963026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "PhaseDataClient Integration"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration PhaseDataClient Integration should store test execution results in PhaseDataClient",
          "status": "passed",
          "title": "should store test execution results in PhaseDataClient",
          "duration": 0.4673749999997199,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "PhaseDataClient Integration"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration PhaseDataClient Integration should include test output in stored metadata",
          "status": "passed",
          "title": "should include test output in stored metadata",
          "duration": 0.4302159999997457,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "GitHub Issue Labeling"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration GitHub Issue Labeling should apply rsolv:validated label when vulnerability is confirmed",
          "status": "passed",
          "title": "should apply rsolv:validated label when vulnerability is confirmed",
          "duration": 1.2456260000003567,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "GitHub Issue Labeling"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration GitHub Issue Labeling should apply rsolv:false-positive label when validation fails",
          "status": "passed",
          "title": "should apply rsolv:false-positive label when validation fails",
          "duration": 0.5585799999998926,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "Error Handling"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration Error Handling should handle test execution timeout",
          "status": "passed",
          "title": "should handle test execution timeout",
          "duration": 0.41381600000022445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "Error Handling"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration Error Handling should handle test execution errors gracefully",
          "status": "passed",
          "title": "should handle test execution errors gracefully",
          "duration": 0.8486680000000888,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-060 Phase 2.2: ValidationMode Test Execution Integration",
            "RFC-060 Phase 3.1: PhaseDataClient Metadata Storage"
          ],
          "fullName": "RFC-060 Phase 2.2: ValidationMode Test Execution Integration RFC-060 Phase 3.1: PhaseDataClient Metadata Storage should store branchName and testPath in PhaseDataClient",
          "status": "passed",
          "title": "should store branchName and testPath in PhaseDataClient",
          "duration": 0.5985969999996996,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946201,
      "endTime": 1760046946206.5986,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/validation-mode-test-execution.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should always attempt to commit tests even if branch creation initially fails",
          "status": "skipped",
          "title": "should always attempt to commit tests even if branch creation initially fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should force commit tests in test mode even if tests are imperfect",
          "status": "skipped",
          "title": "should force commit tests in test mode even if tests are imperfect",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should handle test commit even when git push fails",
          "status": "skipped",
          "title": "should handle test commit even when git push fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "validateIssue in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode validateIssue in test mode should ensure test commits happen in test mode regardless of test quality",
          "status": "skipped",
          "title": "should ensure test commits happen in test mode regardless of test quality",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046944125,
      "endTime": 1760046944125,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/validation-test-commit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with singular \"file\" property",
          "duration": 17.845653999999968,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with plural \"files\" property",
          "duration": 7.137487999999848,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 2.0705520000001343,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946115,
      "endTime": 1760046946142.0706,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/vendor-detection-regression.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should filter out vulnerabilities in comments",
          "status": "passed",
          "title": "should filter out vulnerabilities in comments",
          "duration": 0.7916360000003806,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should keep real vulnerabilities",
          "status": "passed",
          "title": "should keep real vulnerabilities",
          "duration": 0.4979700000003504,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle mixed results correctly",
          "status": "passed",
          "title": "should handle mixed results correctly",
          "duration": 0.24367799999981798,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle API failures gracefully",
          "status": "passed",
          "title": "should handle API failures gracefully",
          "duration": 0.5651870000001509,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946266,
      "endTime": 1760046946267.5652,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/scanner/__tests__/ast-validator-mocked.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "RED - Shows the bug existed before fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug RED - Shows the bug existed before fix BEFORE FIX: would pass all groups to createIssuesFromGroups ignoring max_issues",
          "status": "skipped",
          "title": "BEFORE FIX: would pass all groups to createIssuesFromGroups ignoring max_issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "GREEN - After the fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug GREEN - After the fix should only pass limited groups to createIssuesFromGroups",
          "status": "passed",
          "title": "should only pass limited groups to createIssuesFromGroups",
          "duration": 143.64167199999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "GREEN - After the fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug GREEN - After the fix should only create number of issues specified by max_issues",
          "status": "passed",
          "title": "should only create number of issues specified by max_issues",
          "duration": 200.5747919999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "REFACTOR - Maintain functionality"
          ],
          "fullName": "ScanOrchestrator - max_issues bug REFACTOR - Maintain functionality should still create all issues when no max_issues limit",
          "status": "passed",
          "title": "should still create all issues when no max_issues limit",
          "duration": 137.7721019999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "REFACTOR - Maintain functionality"
          ],
          "fullName": "ScanOrchestrator - max_issues bug REFACTOR - Maintain functionality should handle edge cases correctly",
          "status": "passed",
          "title": "should handle edge cases correctly",
          "duration": 137.39120400000002,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046945450,
      "endTime": 1760046946070.391,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/scanner/__tests__/scan-orchestrator-max-issues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should pass rsolvApiKey and useVendedCredentials to processIssues",
          "status": "passed",
          "title": "should pass rsolvApiKey and useVendedCredentials to processIssues",
          "duration": 510.66545899999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "status": "passed",
          "title": "should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "duration": 330.26356699999985,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046944579,
      "endTime": 1760046945419.2637,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-executor/__tests__/mitigate-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "encryption integration"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption encryption integration should encrypt files before sending to API",
          "status": "passed",
          "title": "should encrypt files before sending to API",
          "duration": 1.821425999999974,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "encryption integration"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption encryption integration should use AES-256-GCM encryption",
          "status": "passed",
          "title": "should use AES-256-GCM encryption",
          "duration": 0.6471710000000712,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "decryption of responses"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption decryption of responses should decrypt API responses when encryption is used",
          "status": "passed",
          "title": "should decrypt API responses when encryption is used",
          "duration": 0.6416150000000016,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946291,
      "endTime": 1760046946293.6472,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/elixir-ast-analyzer-encryption.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Issue: Multiple credential managers created"
          ],
          "fullName": "Credential Lifecycle Issues Issue: Multiple credential managers created should demonstrate the current problem - multiple managers",
          "status": "passed",
          "title": "should demonstrate the current problem - multiple managers",
          "duration": 4.557636000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 1: Singleton credential manager"
          ],
          "fullName": "Credential Lifecycle Issues Solution 1: Singleton credential manager should reuse the same credential manager instance",
          "status": "passed",
          "title": "should reuse the same credential manager instance",
          "duration": 0.5261440000000022,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 2: Handle credential expiration gracefully"
          ],
          "fullName": "Credential Lifecycle Issues Solution 2: Handle credential expiration gracefully should refresh expired credentials automatically",
          "status": "passed",
          "title": "should refresh expired credentials automatically",
          "duration": 6001.787481,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 3: Retry on exchange failure"
          ],
          "fullName": "Credential Lifecycle Issues Solution 3: Retry on exchange failure should retry credential exchange with exponential backoff",
          "status": "passed",
          "title": "should retry credential exchange with exponential backoff",
          "duration": 302.8803769999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Claude conversation logging"
          ],
          "fullName": "Credential Lifecycle Issues Claude conversation logging should log full Claude conversations when enabled",
          "status": "passed",
          "title": "should log full Claude conversations when enabled",
          "duration": 0.16031399999974383,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946793,
      "endTime": 1760046953103.1604,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/credentials/credential-lifecycle.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should NOT throw when creating Anthropic client with vended credentials and no API key",
          "status": "skipped",
          "title": "should NOT throw when creating Anthropic client with vended credentials and no API key",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should throw when creating Anthropic client without vended credentials and no API key",
          "status": "skipped",
          "title": "should throw when creating Anthropic client without vended credentials and no API key",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/__tests__/ai/anthropic-vending.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "RED - Shows the original problem"
          ],
          "fullName": "AITestGenerator - maxTokens fix RED - Shows the original problem should have used low maxTokens before fix (4000)",
          "status": "skipped",
          "title": "should have used low maxTokens before fix (4000)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should use at least 10000 maxTokens for test generation even with low config",
          "status": "skipped",
          "title": "should use at least 10000 maxTokens for test generation even with low config",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should preserve higher maxTokens if already configured",
          "status": "skipped",
          "title": "should preserve higher maxTokens if already configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should use 10000 maxTokens when no maxTokens is specified",
          "status": "skipped",
          "title": "should use 10000 maxTokens when no maxTokens is specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "REFACTOR - Ensure functionality is preserved"
          ],
          "fullName": "AITestGenerator - maxTokens fix REFACTOR - Ensure functionality is preserved should still generate valid test results with increased maxTokens",
          "status": "skipped",
          "title": "should still generate valid test results with increased maxTokens",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "REFACTOR - Ensure functionality is preserved"
          ],
          "fullName": "AITestGenerator - maxTokens fix REFACTOR - Ensure functionality is preserved should maintain other config properties unchanged",
          "status": "skipped",
          "title": "should maintain other config properties unchanged",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/ai-test-generator-maxtokens.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Analyzer"
          ],
          "fullName": "Issue Analyzer analyzeIssue should return analysis from AI client",
          "status": "passed",
          "title": "analyzeIssue should return analysis from AI client",
          "duration": 0.35797699999966426,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954338,
      "endTime": 1760046954338.358,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should validate fix iteration for Java SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for Java SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should handle fix iteration with max attempts",
          "status": "passed",
          "title": "should handle fix iteration with max attempts",
          "duration": 0.32688599999983126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should validate fix iteration for PHP SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for PHP SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should handle PDO fix patterns",
          "status": "passed",
          "title": "should handle PDO fix patterns",
          "duration": 0.11648700000023382,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Integration with Fix Validation"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Integration with Fix Validation should integrate with Claude Code fix validation loop",
          "status": "passed",
          "title": "should integrate with Claude Code fix validation loop",
          "duration": 0.9654780000000756,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954298,
      "endTime": 1760046954299.9656,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/fix-iteration-java-php.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Anthropic Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Anthropic Live Tests should make real API call to Anthropic",
          "status": "pending",
          "title": "should make real API call to Anthropic",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Anthropic Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Anthropic Live Tests should handle Anthropic with credential vending",
          "status": "pending",
          "title": "should handle Anthropic with credential vending",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "OpenAI Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests OpenAI Live Tests should make real API call to OpenAI",
          "status": "pending",
          "title": "should make real API call to OpenAI",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Ollama Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Ollama Live Tests should make real API call to local Ollama",
          "status": "pending",
          "title": "should make real API call to local Ollama",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Provider Comparison"
          ],
          "fullName": "Live LLM Adapter Tests Provider Comparison should compare responses across all available providers",
          "status": "pending",
          "title": "should compare responses across all available providers",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/llm-adapters-live.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle public S3 bucket vulnerability",
          "status": "passed",
          "title": "should handle public S3 bucket vulnerability",
          "duration": 0.4672280000004321,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle open security group vulnerability",
          "status": "passed",
          "title": "should handle open security group vulnerability",
          "duration": 0.25656400000025315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Terratest framework",
          "status": "passed",
          "title": "should detect Terratest framework",
          "duration": 1.3009640000000218,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Kitchen-Terraform",
          "status": "passed",
          "title": "should detect Kitchen-Terraform",
          "duration": 0.5988310000002457,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Pattern Limitations"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Pattern Limitations should demonstrate current IaC detection limitations",
          "status": "passed",
          "title": "should demonstrate current IaC detection limitations",
          "duration": 0.32983100000001286,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should generate appropriate test structure for Terraform",
          "status": "passed",
          "title": "should generate appropriate test structure for Terraform",
          "duration": 0.24059499999930267,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should identify IaC fix patterns",
          "status": "passed",
          "title": "should identify IaC fix patterns",
          "duration": 0.09176599999955215,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terratest test structure",
          "status": "passed",
          "title": "should understand Terratest test structure",
          "duration": 0.06806699999924604,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terraform Compliance structure",
          "status": "passed",
          "title": "should understand Terraform Compliance structure",
          "duration": 0.12272899999970832,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954267,
      "endTime": 1760046954271.1228,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/phase-6d-iac-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should iterate until Java SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until Java SQL injection is properly fixed",
          "duration": 0.2631789999995817,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should handle max iterations exceeded for Java",
          "status": "passed",
          "title": "should handle max iterations exceeded for Java",
          "duration": 0.1090619999995397,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should iterate until PHP SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until PHP SQL injection is properly fixed",
          "duration": 0.09380899999996473,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should generate proper test context for PHP",
          "status": "passed",
          "title": "should generate proper test context for PHP",
          "duration": 0.06725700000060897,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply Java-specific secure patterns",
          "status": "passed",
          "title": "should apply Java-specific secure patterns",
          "duration": 0.06509700000060548,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply PHP-specific secure patterns",
          "status": "passed",
          "title": "should apply PHP-specific secure patterns",
          "duration": 0.05749500000001717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Fix Validation Configuration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Fix Validation Configuration should respect configuration hierarchy",
          "status": "passed",
          "title": "should respect configuration hierarchy",
          "duration": 0.10604000000057567,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954332,
      "endTime": 1760046954332.2632,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/phase-6e-java-php-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should return solution from AI client",
          "status": "passed",
          "title": "generateSolution should return solution from AI client",
          "duration": 201.53243400000065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should use Claude Code adapter when provider is claude-code",
          "status": "passed",
          "title": "generateSolution should use Claude Code adapter when provider is claude-code",
          "duration": 0.3025360000001456,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should fallback to standard AI client for non-claude-code providers",
          "status": "passed",
          "title": "generateSolution should fallback to standard AI client for non-claude-code providers",
          "duration": 100.84005900000011,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046953784,
      "endTime": 1760046954086.84,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/solution.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate command injection tests",
          "status": "passed",
          "title": "should generate command injection tests",
          "duration": 0.3077109999994718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate path traversal tests",
          "status": "passed",
          "title": "should generate path traversal tests",
          "duration": 0.17244800000025862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate Ruby tests",
          "status": "passed",
          "title": "should generate Ruby tests",
          "duration": 0.21331999999983964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate PHP tests",
          "status": "passed",
          "title": "should generate PHP tests",
          "duration": 0.24637999999958993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate comprehensive functional validation tests",
          "status": "passed",
          "title": "should generate comprehensive functional validation tests",
          "duration": 0.316197000000102,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should handle E2E test generation for new vulnerability types",
          "status": "passed",
          "title": "should handle E2E test generation for new vulnerability types",
          "duration": 0.25966299999981857,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954244,
      "endTime": 1760046954245.3162,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/test-generator-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate complete test suite for SQL injection vulnerability",
          "status": "passed",
          "title": "should generate complete test suite for SQL injection vulnerability",
          "duration": 0.6855310000000827,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate red test that demonstrates vulnerability",
          "status": "passed",
          "title": "should generate red test that demonstrates vulnerability",
          "duration": 0.12160399999993388,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate green test that validates fix",
          "status": "passed",
          "title": "should generate green test that validates fix",
          "duration": 0.10016499999983353,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate refactor tests that ensure functionality",
          "status": "passed",
          "title": "should generate refactor tests that ensure functionality",
          "duration": 0.07685500000025058,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should handle different vulnerability types",
          "status": "passed",
          "title": "should handle different vulnerability types",
          "duration": 0.13110200000028271,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should handle different programming languages",
          "status": "passed",
          "title": "should handle different programming languages",
          "duration": 0.4180900000001202,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate E2E tests when requested",
          "status": "passed",
          "title": "should generate E2E tests when requested",
          "duration": 0.18048600000020087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should load SQL injection red test template",
          "status": "passed",
          "title": "should load SQL injection red test template",
          "duration": 0.0801659999997355,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should render template with context variables",
          "status": "passed",
          "title": "should render template with context variables",
          "duration": 0.10877999999956955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should validate template syntax",
          "status": "passed",
          "title": "should validate template syntax",
          "duration": 0.0798320000003514,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestExecutor (TDD - Green Phase)"
          ],
          "fullName": "TestExecutor (TDD - Green Phase) should execute red-green-refactor test suite",
          "status": "passed",
          "title": "should execute red-green-refactor test suite",
          "duration": 0.09292999999979656,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Test Generation Framework Integration (TDD - Green Phase)"
          ],
          "fullName": "Test Generation Framework Integration (TDD - Green Phase) should integrate with existing security analyzer",
          "status": "passed",
          "title": "should integrate with existing security analyzer",
          "duration": 3.739180999999917,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Test Generation Framework Integration (TDD - Green Phase)"
          ],
          "fullName": "Test Generation Framework Integration (TDD - Green Phase) should integrate with git-based processor for validation",
          "status": "passed",
          "title": "should integrate with git-based processor for validation",
          "duration": 12.314781000000039,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954197,
      "endTime": 1760046954215.3147,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/test-generator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should use default context gathering timeout of 30 seconds",
          "status": "passed",
          "title": "should use default context gathering timeout of 30 seconds",
          "duration": 2.2976049999997485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should use custom context gathering timeout when specified",
          "status": "passed",
          "title": "should use custom context gathering timeout when specified",
          "duration": 1.054349000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle analysis failure gracefully",
          "status": "passed",
          "title": "should handle analysis failure gracefully",
          "duration": 0.7492110000002867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle solution generation failure",
          "status": "passed",
          "title": "should handle solution generation failure",
          "duration": 0.935936999999285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should set different configurations based on context depth",
          "status": "passed",
          "title": "should set different configurations based on context depth",
          "duration": 2.262315999999373,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should process multiple issues with timeout handling",
          "status": "passed",
          "title": "should process multiple issues with timeout handling",
          "duration": 100.84115999999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle errors with sanitized messages",
          "status": "passed",
          "title": "should handle errors with sanitized messages",
          "duration": 2.9473699999998644,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should include processing time in results",
          "status": "passed",
          "title": "should include processing time in results",
          "duration": 200.6699719999997,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046953457,
      "endTime": 1760046953768.67,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/unified-processor-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load default config without maxIssues",
          "status": "passed",
          "title": "should load default config without maxIssues",
          "duration": 1.730993000000126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from environment variable",
          "status": "passed",
          "title": "should load maxIssues from environment variable",
          "duration": 0.37411599999995815,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from config file",
          "status": "passed",
          "title": "should load maxIssues from config file",
          "duration": 1.9156910000001517,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues environment variable should override config file for maxIssues",
          "status": "passed",
          "title": "environment variable should override config file for maxIssues",
          "duration": 0.4138259999999718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle invalid maxIssues values",
          "status": "passed",
          "title": "should handle invalid maxIssues values",
          "duration": 0.19076399999994464,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle zero maxIssues",
          "status": "passed",
          "title": "should handle zero maxIssues",
          "duration": 0.5171199999995224,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle negative maxIssues",
          "status": "passed",
          "title": "should handle negative maxIssues",
          "duration": 0.2716259999997419,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954233,
      "endTime": 1760046954238.2717,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/config/__tests__/index.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should default to Claude 4 Sonnet model",
          "status": "skipped",
          "title": "should default to Claude 4 Sonnet model",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should use Claude 4 Sonnet even when provider is set via env",
          "status": "skipped",
          "title": "should use Claude 4 Sonnet even when provider is set via env",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should preserve useVendedCredentials when env vars are set",
          "status": "skipped",
          "title": "should preserve useVendedCredentials when env vars are set",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should respect explicit model override",
          "status": "skipped",
          "title": "should respect explicit model override",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "Model metadata validation"
          ],
          "fullName": "Model Configuration Model metadata validation should have correct Claude 4 Sonnet capabilities",
          "status": "skipped",
          "title": "should have correct Claude 4 Sonnet capabilities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "GREEN - Config merging"
          ],
          "fullName": "Model Configuration GREEN - Config merging should properly merge configs with env vars taking precedence",
          "status": "skipped",
          "title": "should properly merge configs with env vars taking precedence",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/config/__tests__/model-config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include educational vulnerability explanation",
          "status": "passed",
          "title": "should include educational vulnerability explanation",
          "duration": 0.7458560000004582,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include AI-specific vulnerability context for slopsquatting",
          "status": "passed",
          "title": "should include AI-specific vulnerability context for slopsquatting",
          "duration": 0.3469969999996465,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include RSOLV value proposition",
          "status": "passed",
          "title": "should include RSOLV value proposition",
          "duration": 0.32922099999996135,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "GREEN Phase - Complete Flow"
          ],
          "fullName": "Educational PR Creation GREEN Phase - Complete Flow should create educational PR with all components",
          "status": "passed",
          "title": "should create educational PR with all components",
          "duration": 0.486761000000115,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954184,
      "endTime": 1760046954186.4868,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/github/__tests__/pr-git-educational.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute scan mode without prerequisites",
          "status": "passed",
          "title": "should execute scan mode without prerequisites",
          "duration": 50.63372799999979,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue or scan data for validate mode",
          "status": "skipped",
          "title": "should require issue or scan data for validate mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue for mitigate mode",
          "status": "skipped",
          "title": "should require issue for mitigate mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute full mode without prerequisites",
          "status": "skipped",
          "title": "should execute full mode without prerequisites",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should throw error for invalid mode",
          "status": "passed",
          "title": "should throw error for invalid mode",
          "duration": 0.3707249999997657,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeScan should detect vulnerabilities",
          "status": "passed",
          "title": "executeScan should detect vulnerabilities",
          "duration": 0.3561650000001464,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeValidate should generate RED tests",
          "status": "skipped",
          "title": "executeValidate should generate RED tests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeMitigate should fix vulnerability",
          "status": "passed",
          "title": "executeMitigate should fix vulnerability",
          "duration": 20.03805200000079,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeAllPhases should run scan, validate, and mitigate",
          "status": "passed",
          "title": "executeAllPhases should run scan, validate, and mitigate",
          "duration": 0.5269809999999779,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should store phase results using PhaseDataClient",
          "status": "passed",
          "title": "should store phase results using PhaseDataClient",
          "duration": 1.249706999999944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should retrieve phase results using PhaseDataClient",
          "status": "passed",
          "title": "should retrieve phase results using PhaseDataClient",
          "duration": 0.2902429999994638,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954103,
      "endTime": 1760046954176.2903,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/phase-executor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "VendorDetector functionality"
          ],
          "fullName": "Vendor File Filtering - Integration Tests VendorDetector functionality should correctly identify vendor files",
          "status": "passed",
          "title": "should correctly identify vendor files",
          "duration": 0.2070560000001933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "VendorDetector functionality"
          ],
          "fullName": "Vendor File Filtering - Integration Tests VendorDetector functionality should correctly identify application files",
          "status": "passed",
          "title": "should correctly identify application files",
          "duration": 0.42595799999980954,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Expected behavior in Validation Phase"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Expected behavior in Validation Phase validation result should include vendoredFile flag",
          "status": "passed",
          "title": "validation result should include vendoredFile flag",
          "duration": 0.1120600000003833,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Expected behavior in Mitigation Phase"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Expected behavior in Mitigation Phase should skip fix generation for vendor files",
          "status": "passed",
          "title": "should skip fix generation for vendor files",
          "duration": 0.07507799999984854,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "File extraction from various formats"
          ],
          "fullName": "Vendor File Filtering - Integration Tests File extraction from various formats should extract files from different vulnerability structures",
          "status": "passed",
          "title": "should extract files from different vulnerability structures",
          "duration": 0.1661210000002029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Current behavior vs Expected behavior"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Current behavior vs Expected behavior CURRENT: vendor files are processed in all phases",
          "status": "passed",
          "title": "CURRENT: vendor files are processed in all phases",
          "duration": 0.06548599999950966,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954319,
      "endTime": 1760046954320.166,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/vendor-filtering-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should set ANTHROPIC_API_KEY from vended credentials before executing CLI",
          "status": "skipped",
          "title": "should set ANTHROPIC_API_KEY from vended credentials before executing CLI",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should use vended credentials in production mode",
          "status": "skipped",
          "title": "should use vended credentials in production mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should prefer environment variable over vended credentials when available",
          "status": "skipped",
          "title": "should prefer environment variable over vended credentials when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Error Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Error Handling should return error when no API key is available",
          "status": "skipped",
          "title": "should return error when no API key is available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Error Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Error Handling should handle credential manager errors gracefully",
          "status": "skipped",
          "title": "should handle credential manager errors gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-cli-retry-vended.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should validate credential format before passing to Claude CLI",
          "status": "passed",
          "title": "should validate credential format before passing to Claude CLI",
          "duration": 1.005739999999605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should detect Anthropic API key format requirements",
          "status": "passed",
          "title": "should detect Anthropic API key format requirements",
          "duration": 1.1196209999998246,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should log detailed debugging info when authentication fails",
          "status": "passed",
          "title": "should log detailed debugging info when authentication fails",
          "duration": 0.4029129999998986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "GREEN - Passing tests (after implementation)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation GREEN - Passing tests (after implementation) should pass valid Anthropic credentials through successfully",
          "status": "passed",
          "title": "should pass valid Anthropic credentials through successfully",
          "duration": 0.26917499999944994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "Integration test - Real-world scenario"
          ],
          "fullName": "Claude Code CLI Credential Format Validation Integration test - Real-world scenario should handle the exact scenario from workflow 17873531908",
          "status": "passed",
          "title": "should handle the exact scenario from workflow 17873531908",
          "duration": 0.32121600000027684,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954256,
      "endTime": 1760046954259.4028,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-credential-format-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should generate solution with git metadata",
          "status": "skipped",
          "title": "should generate solution with git metadata",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should handle git command failures gracefully",
          "status": "skipped",
          "title": "should handle git command failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should use enhanced prompt for git-based workflow",
          "status": "skipped",
          "title": "should use enhanced prompt for git-based workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should extract solution from various response formats",
          "status": "skipped",
          "title": "should extract solution from various response formats",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046946662,
      "endTime": 1760046946662,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-git.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should timeout availability check after 5 seconds",
          "status": "passed",
          "title": "should timeout availability check after 5 seconds",
          "duration": 0.5964520000006814,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should timeout when Claude Code CLI is not available",
          "status": "passed",
          "title": "should timeout when Claude Code CLI is not available",
          "duration": 0.6651319999991756,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should handle file system errors gracefully",
          "status": "passed",
          "title": "should handle file system errors gracefully",
          "duration": 0.34579699999994773,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should respect timeout configuration in config",
          "status": "passed",
          "title": "should respect timeout configuration in config",
          "duration": 0.31094299999949726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should track usage data for timeout scenarios",
          "status": "passed",
          "title": "should track usage data for timeout scenarios",
          "duration": 0.33599099999992177,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should provide helpful error messages for timeout scenarios",
          "status": "passed",
          "title": "should provide helpful error messages for timeout scenarios",
          "duration": 0.36593600000014703,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should include retry count in usage analytics",
          "status": "passed",
          "title": "should include retry count in usage analytics",
          "duration": 0.3465299999998024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter Timeout Behavior"
          ],
          "fullName": "Claude Code Adapter Timeout Behavior should get analytics summary correctly",
          "status": "passed",
          "title": "should get analytics summary correctly",
          "duration": 0.7496069999997417,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954278,
      "endTime": 1760046954281.7495,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from file property",
          "status": "passed",
          "title": "should extract from file property",
          "duration": 0.44919600000048376,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from files array",
          "status": "passed",
          "title": "should extract from files array",
          "duration": 0.2103399999996327,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from path property",
          "status": "passed",
          "title": "should extract from path property",
          "duration": 0.1533849999996164,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from nested location",
          "status": "passed",
          "title": "should extract from nested location",
          "duration": 0.10434500000064872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.05106999999952677,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle vulnerabilities with no file info",
          "status": "passed",
          "title": "should handle vulnerabilities with no file info",
          "duration": 0.11753700000008394,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should deduplicate files",
          "status": "passed",
          "title": "should deduplicate files",
          "duration": 0.10107799999968847,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle mixed structures",
          "status": "passed",
          "title": "should handle mixed structures",
          "duration": 0.11528199999975186,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760046954308,
      "endTime": 1760046954309.2104,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/phase-executor/__tests__/file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Current Problem: Multiple credential exchanges"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Current Problem: Multiple credential exchanges should demonstrate the problem - multiple managers create multiple exchanges",
          "status": "passed",
          "title": "should demonstrate the problem - multiple managers create multiple exchanges",
          "duration": 1.3180859999997665,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing the Singleton Solution"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing the Singleton Solution should reuse the same credential manager instance",
          "status": "passed",
          "title": "should reuse the same credential manager instance",
          "duration": 0.40180199999986144,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing Error Handling"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing Error Handling should throw on network errors without retry",
          "status": "passed",
          "title": "should throw on network errors without retry",
          "duration": 0.5125279999997474,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing Credential Expiration Handling"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing Credential Expiration Handling should detect expired credentials",
          "status": "passed",
          "title": "should detect expired credentials",
          "duration": 150.83776499999976,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047129377,
      "endTime": 1760047129529.8376,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/test/credentials/credential-lifecycle-proper.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should detect issues from GitHub only when no other platforms configured",
          "status": "passed",
          "title": "should detect issues from GitHub only when no other platforms configured",
          "duration": 0.8809799999999086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should detect issues from both GitHub and Jira when configured",
          "status": "passed",
          "title": "should detect issues from both GitHub and Jira when configured",
          "duration": 0.7734660000000986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should handle errors gracefully and continue with other platforms",
          "status": "passed",
          "title": "should handle errors gracefully and continue with other platforms",
          "duration": 1.0307910000001357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should extract repository info from Jira issue description",
          "status": "passed",
          "title": "should extract repository info from Jira issue description",
          "duration": 0.49988600000006045,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128866,
      "endTime": 1760047128868.5,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/tests/platforms/issue-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Enhanced PHPUnit Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Enhanced PHPUnit Support should generate PHPUnit 9+ tests with modern assertions",
          "status": "passed",
          "title": "should generate PHPUnit 9+ tests with modern assertions",
          "duration": 3.229383000000098,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Enhanced PHPUnit Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Enhanced PHPUnit Support should generate PHPUnit tests with Laravel integration",
          "status": "passed",
          "title": "should generate PHPUnit tests with Laravel integration",
          "duration": 0.8194619999999304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests for file inclusion vulnerability",
          "status": "skipped",
          "title": "should generate Pest tests for file inclusion vulnerability",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests with dataset for multiple payloads",
          "status": "skipped",
          "title": "should generate Pest tests with dataset for multiple payloads",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests with Laravel helpers",
          "status": "passed",
          "title": "should generate Pest tests with Laravel helpers",
          "duration": 0.5844500000000608,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Symfony Integration"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Symfony Integration should generate PHPUnit tests with Symfony WebTestCase",
          "status": "passed",
          "title": "should generate PHPUnit tests with Symfony WebTestCase",
          "duration": 0.6169409999999971,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128700,
      "endTime": 1760047128704.617,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/adaptive-test-generator-php.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract JSON from markdown code blocks",
          "status": "passed",
          "title": "should extract JSON from markdown code blocks",
          "duration": 0.4909459999998944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract JSON with curly braces in string values",
          "status": "passed",
          "title": "should extract JSON with curly braces in string values",
          "duration": 0.41320200000018303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should handle JSON with escaped quotes in strings",
          "status": "passed",
          "title": "should handle JSON with escaped quotes in strings",
          "duration": 0.20100800000000163,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract the largest valid JSON object when multiple exist",
          "status": "passed",
          "title": "should extract the largest valid JSON object when multiple exist",
          "duration": 0.2374870000003284,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should handle incomplete JSON by attempting recovery",
          "status": "passed",
          "title": "should handle incomplete JSON by attempting recovery",
          "duration": 1.430978999999752,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should correctly extract JSON that comes after explanatory text",
          "status": "passed",
          "title": "should correctly extract JSON that comes after explanatory text",
          "duration": 0.39650499999970634,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "extractJsonFromResponse - utility function"
          ],
          "fullName": "AITestGenerator - JSON Extraction extractJsonFromResponse - utility function should use a proper JSON extraction method",
          "status": "passed",
          "title": "should use a proper JSON extraction method",
          "duration": 0.5132300000000214,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128849,
      "endTime": 1760047128853.5132,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/ai-test-generator-json-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructor should initialize with provided values",
          "status": "passed",
          "title": "constructor should initialize with provided values",
          "duration": 0.4924989999999525,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructPrompt should prioritize enhanced prompt when provided",
          "status": "passed",
          "title": "constructPrompt should prioritize enhanced prompt when provided",
          "duration": 0.3051650000002155,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructPrompt should create default prompt when no enhanced prompt provided",
          "status": "passed",
          "title": "constructPrompt should create default prompt when no enhanced prompt provided",
          "duration": 0.1611640000000989,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047129615,
      "endTime": 1760047129616.1611,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/claude-code.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Base Prompt Updates"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Base Prompt Updates should include red-green-refactor validation in base prompt",
          "status": "passed",
          "title": "should include red-green-refactor validation in base prompt",
          "duration": 0.6420739999998659,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Base Prompt Updates"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Base Prompt Updates should include test running instructions in base prompt",
          "status": "passed",
          "title": "should include test running instructions in base prompt",
          "duration": 0.35320899999987887,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include generated test code in prompt",
          "status": "passed",
          "title": "should include generated test code in prompt",
          "duration": 0.3436299999998482,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include test failure context on retry",
          "status": "passed",
          "title": "should include test failure context on retry",
          "duration": 0.2676149999997506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include iteration context",
          "status": "passed",
          "title": "should include iteration context",
          "duration": 0.16727999999966414,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Validation Instructions"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Validation Instructions should include test running instructions",
          "status": "passed",
          "title": "should include test running instructions",
          "duration": 0.16424800000004325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Validation Instructions"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Validation Instructions should emphasize security test validation",
          "status": "passed",
          "title": "should emphasize security test validation",
          "duration": 0.13909499999999753,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Multiple Test Frameworks"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Multiple Test Frameworks should handle multiple test frameworks in prompt",
          "status": "passed",
          "title": "should handle multiple test frameworks in prompt",
          "duration": 0.18486599999960163,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128772,
      "endTime": 1760047128774.2676,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/claude-prompts-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should use vended credentials for Anthropic API calls",
          "status": "passed",
          "title": "should use vended credentials for Anthropic API calls",
          "duration": 1.3239799999996649,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should use vended credentials for OpenAI API calls",
          "status": "passed",
          "title": "should use vended credentials for OpenAI API calls",
          "duration": 0.7058160000001408,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should handle credential refresh during long-running tasks",
          "status": "passed",
          "title": "should handle credential refresh during long-running tasks",
          "duration": 0.5791010000002643,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should fallback to direct API key if vending is disabled",
          "status": "passed",
          "title": "should fallback to direct API key if vending is disabled",
          "duration": 0.4100379999999859,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should handle vended credential errors gracefully",
          "status": "passed",
          "title": "should handle vended credential errors gracefully",
          "duration": 1.5032270000001517,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128878,
      "endTime": 1760047128882.5032,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/client-with-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify SQL injection from description",
          "status": "passed",
          "title": "should identify SQL injection from description",
          "duration": 5.289785999999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify XSS from description",
          "status": "passed",
          "title": "should identify XSS from description",
          "duration": 2.1482739999999865,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify multiple vulnerability types",
          "status": "passed",
          "title": "should identify multiple vulnerability types",
          "duration": 1.1864610000000084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should handle OWASP terminology",
          "status": "passed",
          "title": "should handle OWASP terminology",
          "duration": 1.5215670000000046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should extract file paths from various formats",
          "status": "passed",
          "title": "should extract file paths from various formats",
          "duration": 0.9699039999999854,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should extract function names from code snippets",
          "status": "passed",
          "title": "should extract function names from code snippets",
          "duration": 0.7389860000000112,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should handle relative and absolute paths",
          "status": "passed",
          "title": "should handle relative and absolute paths",
          "duration": 0.37348700000001145,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should detect critical severity",
          "status": "passed",
          "title": "should detect critical severity",
          "duration": 0.3190539999999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should detect severity from CVSS scores",
          "status": "passed",
          "title": "should detect severity from CVSS scores",
          "duration": 0.39668500000001927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should infer severity from language",
          "status": "passed",
          "title": "should infer severity from language",
          "duration": 0.3510430000000042,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Test Framework Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Test Framework Detection should detect mentioned test frameworks",
          "status": "passed",
          "title": "should detect mentioned test frameworks",
          "duration": 0.5394560000000013,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Test Framework Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Test Framework Detection should detect test file mentions",
          "status": "passed",
          "title": "should detect test file mentions",
          "duration": 0.2655650000000094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Natural Language to Pattern Mapping"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Natural Language to Pattern Mapping should map descriptions to AST patterns",
          "status": "passed",
          "title": "should map descriptions to AST patterns",
          "duration": 0.29217699999998104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Natural Language to Pattern Mapping"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Natural Language to Pattern Mapping should extract fix suggestions",
          "status": "passed",
          "title": "should extract fix suggestions",
          "duration": 0.4017259999999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should extract additional context from issue metadata",
          "status": "passed",
          "title": "should extract additional context from issue metadata",
          "duration": 0.2683140000000037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should handle markdown formatting",
          "status": "passed",
          "title": "should handle markdown formatting",
          "duration": 0.3720289999999977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should extract referenced URLs and PRs",
          "status": "passed",
          "title": "should extract referenced URLs and PRs",
          "duration": 0.33683899999999767,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Complex Real-World Examples"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Complex Real-World Examples should handle GitHub security advisory format",
          "status": "passed",
          "title": "should handle GitHub security advisory format",
          "duration": 1.0087179999999876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Complex Real-World Examples"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Complex Real-World Examples should handle detailed vulnerability report",
          "status": "passed",
          "title": "should handle detailed vulnerability report",
          "duration": 1.8095629999999971,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter Error Handling"
          ],
          "fullName": "IssueInterpreter Error Handling should handle empty issue body",
          "status": "passed",
          "title": "should handle empty issue body",
          "duration": 0.12632899999999836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter Error Handling"
          ],
          "fullName": "IssueInterpreter Error Handling should handle non-security issues gracefully",
          "status": "passed",
          "title": "should handle non-security issues gracefully",
          "duration": 0.23902400000000057,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047126855,
      "endTime": 1760047126875.239,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/__tests__/issue-interpreter.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should complete initialization with timeout",
          "status": "passed",
          "title": "should complete initialization with timeout",
          "duration": 1.2370890000001964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle timeout on initialization gracefully",
          "status": "passed",
          "title": "should handle timeout on initialization gracefully",
          "duration": 100.96314699999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle timeout on usage reporting gracefully",
          "status": "passed",
          "title": "should handle timeout on usage reporting gracefully",
          "duration": 101.72724599999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle credential auto-refresh on expiration",
          "status": "passed",
          "title": "should handle credential auto-refresh on expiration",
          "duration": 152.37429800000018,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should not hang when API is slow",
          "status": "passed",
          "title": "should not hang when API is slow",
          "duration": 102.74073099999987,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should clean up credentials on cleanup",
          "status": "passed",
          "title": "should clean up credentials on cleanup",
          "duration": 1.2747699999999895,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128907,
      "endTime": 1760047129367.2747,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/credentials/__tests__/timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "initialize"
          ],
          "fullName": "FeedbackStorage initialize should create empty feedback store if file does not exist",
          "status": "passed",
          "title": "should create empty feedback store if file does not exist",
          "duration": 3.2184799999999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "initialize"
          ],
          "fullName": "FeedbackStorage initialize should load existing data if file exists",
          "status": "passed",
          "title": "should load existing data if file exists",
          "duration": 0.5854640000000018,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should create feedback with generated ID",
          "status": "passed",
          "title": "should create feedback with generated ID",
          "duration": 1.1122409999999832,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should get feedback by ID",
          "status": "passed",
          "title": "should get feedback by ID",
          "duration": 0.5208959999999934,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return null when getting non-existent feedback",
          "status": "passed",
          "title": "should return null when getting non-existent feedback",
          "duration": 0.3264350000000036,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should update feedback",
          "status": "passed",
          "title": "should update feedback",
          "duration": 0.928528,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return null when updating non-existent feedback",
          "status": "passed",
          "title": "should return null when updating non-existent feedback",
          "duration": 0.5174979999999891,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should delete feedback",
          "status": "passed",
          "title": "should delete feedback",
          "duration": 0.8764920000000131,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return false when deleting non-existent feedback",
          "status": "passed",
          "title": "should return false when deleting non-existent feedback",
          "duration": 0.2557899999999904,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by issueId",
          "status": "passed",
          "title": "should query feedback by issueId",
          "duration": 0.45672700000000077,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by prId",
          "status": "passed",
          "title": "should query feedback by prId",
          "duration": 0.3510090000000048,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by reviewerId",
          "status": "passed",
          "title": "should query feedback by reviewerId",
          "duration": 0.3666240000000016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by type",
          "status": "passed",
          "title": "should query feedback by type",
          "duration": 0.33542099999999664,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by sentiment",
          "status": "passed",
          "title": "should query feedback by sentiment",
          "duration": 0.3691289999999867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by actionTaken",
          "status": "passed",
          "title": "should query feedback by actionTaken",
          "duration": 0.2905269999999973,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by date range",
          "status": "passed",
          "title": "should query feedback by date range",
          "duration": 0.29853199999999447,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should limit query results",
          "status": "passed",
          "title": "should limit query results",
          "duration": 0.6675830000000076,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should combine multiple query parameters",
          "status": "passed",
          "title": "should combine multiple query parameters",
          "duration": 0.3653600000000097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should get feedback for an issue",
          "status": "passed",
          "title": "should get feedback for an issue",
          "duration": 0.33385300000000484,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should get feedback for a PR",
          "status": "passed",
          "title": "should get feedback for a PR",
          "duration": 0.3265399999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Stats"
          ],
          "fullName": "FeedbackStorage Stats should generate correct statistics",
          "status": "passed",
          "title": "should generate correct statistics",
          "duration": 0.7317569999999876,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047126909,
      "endTime": 1760047126922.7317,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/feedback/__tests__/storage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should call PhaseDataClient.retrievePhaseResults() when checking out validation branch",
          "status": "passed",
          "title": "should call PhaseDataClient.retrievePhaseResults() when checking out validation branch",
          "duration": 0.7104130000000168,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should use PhaseDataClient API instead of local file reads",
          "status": "passed",
          "title": "should use PhaseDataClient API instead of local file reads",
          "duration": 0.4484019999999873,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should handle missing validation data gracefully",
          "status": "passed",
          "title": "should handle missing validation data gracefully",
          "duration": 0.27973199999996723,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should handle missing validate key in phase data",
          "status": "passed",
          "title": "should handle missing validate key in phase data",
          "duration": 0.26034099999992577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should handle missing branchName in validation data",
          "status": "passed",
          "title": "should handle missing branchName in validation data",
          "duration": 0.2528860000002169,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060: PhaseDataClient Integration"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060: PhaseDataClient Integration should return false when PhaseDataClient is not available",
          "status": "passed",
          "title": "should return false when PhaseDataClient is not available",
          "duration": 0.1918959999998151,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "RFC-060 Phase 3.1: No Local File Fallback"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration RFC-060 Phase 3.1: No Local File Fallback should retrieve branchName exclusively from PhaseDataClient API",
          "status": "passed",
          "title": "should retrieve branchName exclusively from PhaseDataClient API",
          "duration": 0.2557560000000194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#prepareTestContext"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #prepareTestContext retrieves branch name from PhaseDataClient",
          "status": "passed",
          "title": "retrieves branch name from PhaseDataClient",
          "duration": 0.30166799999983596,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#prepareTestContext"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #prepareTestContext reads test file content from git",
          "status": "passed",
          "title": "reads test file content from git",
          "duration": 0.2510330000000067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#buildTestAwarePrompt"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #buildTestAwarePrompt includes test content in prompt",
          "status": "passed",
          "title": "includes test content in prompt",
          "duration": 0.2904840000001059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#runPreFixTest"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #runPreFixTest executes test and returns failure result",
          "status": "passed",
          "title": "executes test and returns failure result",
          "duration": 0.30500400000005357,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#runPostFixTest"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #runPostFixTest executes test and returns success result",
          "status": "passed",
          "title": "executes test and returns success result",
          "duration": 0.2878570000000309,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#saveTestResults"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #saveTestResults delegates to PhaseDataClient",
          "status": "passed",
          "title": "delegates to PhaseDataClient",
          "duration": 0.40188100000000304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#calculateTrustScore"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #calculateTrustScore returns 0 when both tests fail",
          "status": "passed",
          "title": "returns 0 when both tests fail",
          "duration": 0.2163510000000315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#calculateTrustScore"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #calculateTrustScore returns 100 for perfect fix (pre-fail, post-pass)",
          "status": "passed",
          "title": "returns 100 for perfect fix (pre-fail, post-pass)",
          "duration": 0.19534700000008343,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#calculateTrustScore"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #calculateTrustScore returns 50 when both tests pass",
          "status": "passed",
          "title": "returns 50 when both tests pass",
          "duration": 0.14863400000012916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#calculateTrustScore"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #calculateTrustScore returns 0 when pre-pass but post-fail",
          "status": "passed",
          "title": "returns 0 when pre-pass but post-fail",
          "duration": 0.1449720000000525,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "MitigationMode - PhaseDataClient Integration",
            "#runTestSafely"
          ],
          "fullName": "MitigationMode - PhaseDataClient Integration #runTestSafely catches and returns error when test execution fails",
          "status": "passed",
          "title": "catches and returns error when test execution fails",
          "duration": 0.24984299999982795,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128685,
      "endTime": 1760047128690.2498,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/mitigation-mode-phasedata.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Normal mode (RSOLV_TESTING_MODE not set)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Normal mode (RSOLV_TESTING_MODE not set) should mark as false positive when tests pass",
          "status": "passed",
          "title": "should mark as false positive when tests pass",
          "duration": 232.14969199999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Normal mode (RSOLV_TESTING_MODE not set)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Normal mode (RSOLV_TESTING_MODE not set) should mark as validated when tests fail",
          "status": "passed",
          "title": "should mark as validated when tests fail",
          "duration": 151.60561099999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should mark as validated even when tests pass",
          "status": "passed",
          "title": "should mark as validated even when tests pass",
          "duration": 8.268917999999985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should still mark as validated when tests fail",
          "status": "passed",
          "title": "should still mark as validated when tests fail",
          "duration": 351.096814,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should include testing mode info in validation branch operations",
          "status": "passed",
          "title": "should include testing mode info in validation branch operations",
          "duration": 9.249143000000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should respect RSOLV_TESTING_MODE=false as normal mode",
          "status": "passed",
          "title": "should respect RSOLV_TESTING_MODE=false as normal mode",
          "duration": 151.55658599999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should handle testing mode with test generation failure",
          "status": "passed",
          "title": "should handle testing mode with test generation failure",
          "duration": 1.2150319999998374,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should handle testing mode with analysis failure",
          "status": "passed",
          "title": "should handle testing mode with analysis failure",
          "duration": 0.6810839999998279,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047127758,
      "endTime": 1760047128663.6812,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/modes/__tests__/validation-mode-testing-flag.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "findExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection findExistingIssue should find existing issue with matching vulnerability type label",
          "status": "passed",
          "title": "should find existing issue with matching vulnerability type label",
          "duration": 0.506640999999945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "findExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection findExistingIssue should return null when no existing issue found",
          "status": "passed",
          "title": "should return null when no existing issue found",
          "duration": 0.27313900000035574,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "updateExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection updateExistingIssue should update existing issue with new scan results",
          "status": "passed",
          "title": "should update existing issue with new scan results",
          "duration": 0.552103999999872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "createIssuesFromGroups with duplicate detection"
          ],
          "fullName": "IssueCreator - Duplicate Detection createIssuesFromGroups with duplicate detection should update existing issue instead of creating new one",
          "status": "passed",
          "title": "should update existing issue instead of creating new one",
          "duration": 0.4039469999997891,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "createIssuesFromGroups with duplicate detection"
          ],
          "fullName": "IssueCreator - Duplicate Detection createIssuesFromGroups with duplicate detection should create new issue when no duplicate exists",
          "status": "passed",
          "title": "should create new issue when no duplicate exists",
          "duration": 0.32383100000015475,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128896,
      "endTime": 1760047128898.404,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/scanner/__tests__/issue-creator-duplicates.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use x-api-key header for pattern fetching",
          "status": "passed",
          "title": "should use x-api-key header for pattern fetching",
          "duration": 0.8117400000000998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should NOT use Authorization Bearer header",
          "status": "passed",
          "title": "should NOT use Authorization Bearer header",
          "duration": 0.5804470000002766,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use query parameter for language",
          "status": "passed",
          "title": "should use query parameter for language",
          "duration": 0.4058140000001913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle API key from environment variable",
          "status": "passed",
          "title": "should handle API key from environment variable",
          "duration": 0.351622000000134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle missing API key gracefully",
          "status": "passed",
          "title": "should handle missing API key gracefully",
          "duration": 0.32938700000022436,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle 401 unauthorized response",
          "status": "passed",
          "title": "should handle 401 unauthorized response",
          "duration": 0.6234420000000682,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use consistent authentication across all endpoints",
          "status": "passed",
          "title": "should use consistent authentication across all endpoints",
          "duration": 0.48959500000000844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "Regression prevention for ADR-027"
          ],
          "fullName": "PatternAPIClient Authentication Regression prevention for ADR-027 should never use Bearer token for RSOLV API",
          "status": "passed",
          "title": "should never use Bearer token for RSOLV API",
          "duration": 0.8406270000000404,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "Regression prevention for ADR-027"
          ],
          "fullName": "PatternAPIClient Authentication Regression prevention for ADR-027 should use correct endpoint format with query parameters",
          "status": "passed",
          "title": "should use correct endpoint format with query parameters",
          "duration": 0.49596599999995306,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128835,
      "endTime": 1760047128840.4958,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/__tests__/pattern-api-auth.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate HIGH confidence for scores >= 0.8",
          "status": "passed",
          "title": "should calculate HIGH confidence for scores >= 0.8",
          "duration": 0.30967099999998027,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate MEDIUM confidence for scores 0.5-0.79",
          "status": "passed",
          "title": "should calculate MEDIUM confidence for scores 0.5-0.79",
          "duration": 0.18852800000013303,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate LOW confidence for scores 0.2-0.49",
          "status": "passed",
          "title": "should calculate LOW confidence for scores 0.2-0.49",
          "duration": 0.12891300000001138,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate REVIEW confidence for scores < 0.2",
          "status": "passed",
          "title": "should calculate REVIEW confidence for scores < 0.2",
          "duration": 0.10901999999987311,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return correct strategy for COMMAND_INJECTION",
          "status": "passed",
          "title": "should return correct strategy for COMMAND_INJECTION",
          "duration": 0.16915900000003603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return correct strategy for XSS variants",
          "status": "passed",
          "title": "should return correct strategy for XSS variants",
          "duration": 0.14821200000005774,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return DEFAULT strategy for unknown types",
          "status": "passed",
          "title": "should return DEFAULT strategy for unknown types",
          "duration": 0.1143659999997908,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should return confidence scores instead of binary validation",
          "status": "passed",
          "title": "should return confidence scores instead of binary validation",
          "duration": 8.975700999999844,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should never return 0 vulnerabilities if scan found any",
          "status": "passed",
          "title": "should never return 0 vulnerabilities if scan found any",
          "duration": 0.42263199999979406,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should process command injection without synthetic data workaround",
          "status": "passed",
          "title": "should process command injection without synthetic data workaround",
          "duration": 0.35190000000011423,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047129541,
      "endTime": 1760047129551.4226,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/validation/__tests__/confidence-scoring.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "successful execution"
          ],
          "fullName": "Claude Code CLI Retry Mechanism successful execution should succeed on first attempt without retry",
          "status": "passed",
          "title": "should succeed on first attempt without retry",
          "duration": 10.600978999999995,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on rate limit error and succeed",
          "status": "passed",
          "title": "should retry on rate limit error and succeed",
          "duration": 30.089788999999968,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on overloaded error",
          "status": "passed",
          "title": "should retry on overloaded error",
          "duration": 60.70273000000003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on network errors",
          "status": "passed",
          "title": "should retry on network errors",
          "duration": 30.538562000000013,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "non-retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism non-retryable errors should not retry on invalid API key error",
          "status": "passed",
          "title": "should not retry on invalid API key error",
          "duration": 10.557063999999968,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "non-retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism non-retryable errors should not retry on permission denied",
          "status": "passed",
          "title": "should not retry on permission denied",
          "duration": 10.259923000000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "max attempts"
          ],
          "fullName": "Claude Code CLI Retry Mechanism max attempts should respect max attempts configuration",
          "status": "passed",
          "title": "should respect max attempts configuration",
          "duration": 30.822535000000016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "max attempts"
          ],
          "fullName": "Claude Code CLI Retry Mechanism max attempts should fail after all retries exhausted",
          "status": "passed",
          "title": "should fail after all retries exhausted",
          "duration": 60.92138299999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "exponential backoff"
          ],
          "fullName": "Claude Code CLI Retry Mechanism exponential backoff should apply exponential backoff between retries",
          "status": "passed",
          "title": "should apply exponential backoff between retries",
          "duration": 61.037323000000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "exponential backoff"
          ],
          "fullName": "Claude Code CLI Retry Mechanism exponential backoff should cap delay at maxDelayMs",
          "status": "passed",
          "title": "should cap delay at maxDelayMs",
          "duration": 70.89492400000006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "custom retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism custom retryable errors should use custom retryable error list",
          "status": "passed",
          "title": "should use custom retryable error list",
          "duration": 30.66014599999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "custom retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism custom retryable errors should not retry errors not in custom list",
          "status": "passed",
          "title": "should not retry errors not in custom list",
          "duration": 10.291829000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should detect development mode via RSOLV_DEV_MODE",
          "status": "passed",
          "title": "should detect development mode via RSOLV_DEV_MODE",
          "duration": 0.1830449999999928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should detect development mode via USE_CLAUDE_CODE_MAX",
          "status": "passed",
          "title": "should detect development mode via USE_CLAUDE_CODE_MAX",
          "duration": 0.13622799999996005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should use Claude Code Max key in dev mode",
          "status": "passed",
          "title": "should use Claude Code Max key in dev mode",
          "duration": 0.13609299999995983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should fall back to regular key if Max key not set",
          "status": "passed",
          "title": "should fall back to regular key if Max key not set",
          "duration": 0.1869289999999637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should use regular key in production mode",
          "status": "passed",
          "title": "should use regular key in production mode",
          "duration": 0.12956900000006044,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047126934,
      "endTime": 1760047127353.187,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-cli-retry.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "generateSolution"
          ],
          "fullName": "ClaudeCodeCLIAdapter generateSolution should fail without ANTHROPIC_API_KEY",
          "status": "passed",
          "title": "should fail without ANTHROPIC_API_KEY",
          "duration": 0.3477349999998296,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "constructPrompt"
          ],
          "fullName": "ClaudeCodeCLIAdapter constructPrompt should generate structured phased prompt when enabled",
          "status": "passed",
          "title": "should generate structured phased prompt when enabled",
          "duration": 0.20519500000000335,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "constructPrompt"
          ],
          "fullName": "ClaudeCodeCLIAdapter constructPrompt should generate regular prompt when structured phases disabled",
          "status": "passed",
          "title": "should generate regular prompt when structured phases disabled",
          "duration": 0.13427100000035352,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047129619,
      "endTime": 1760047129620.205,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/claude-code-cli.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should generate complete prompt with all vulnerability details",
          "status": "passed",
          "title": "should generate complete prompt with all vulnerability details",
          "duration": 11.941295000000082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should handle missing specificVulnerabilities gracefully",
          "status": "passed",
          "title": "should handle missing specificVulnerabilities gracefully",
          "duration": 1.822338999999829,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should preserve vulnerabilities through validation iterations",
          "status": "passed",
          "title": "should preserve vulnerabilities through validation iterations",
          "duration": 3.9421339999998963,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "Prompt structure validation"
          ],
          "fullName": "Prompt Generation Integration Tests Prompt structure validation should order prompt sections correctly",
          "status": "passed",
          "title": "should order prompt sections correctly",
          "duration": 2.4833599999997205,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128784,
      "endTime": 1760047128804.4834,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/ai/adapters/__tests__/prompt-generation-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "initialization"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality initialization should initialize with config",
          "status": "passed",
          "title": "should initialize with config",
          "duration": 0.8024070000001302,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "initialization"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality initialization should use environment variables as fallback",
          "status": "passed",
          "title": "should use environment variables as fallback",
          "duration": 0.4293750000001637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should analyze single file",
          "status": "passed",
          "title": "should analyze single file",
          "duration": 1.089893999999731,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should handle empty file content",
          "status": "passed",
          "title": "should handle empty file content",
          "duration": 0.5721549999998388,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 0.8967560000000958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should analyze multiple files using analyze method",
          "status": "passed",
          "title": "should analyze multiple files using analyze method",
          "duration": 0.5800159999998868,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should handle empty file list",
          "status": "passed",
          "title": "should handle empty file list",
          "duration": 0.3019979999999123,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should respect file count limits",
          "status": "passed",
          "title": "should respect file count limits",
          "duration": 0.3102530000001025,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "session management"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality session management should reuse sessions within timeout",
          "status": "passed",
          "title": "should reuse sessions within timeout",
          "duration": 0.5453870000001189,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "session management"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality session management should create new session when expired",
          "status": "passed",
          "title": "should create new session when expired",
          "duration": 0.5971770000001015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "cleanup"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality cleanup should cleanup sessions on cleanup call",
          "status": "passed",
          "title": "should cleanup sessions on cleanup call",
          "duration": 0.6888120000003255,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1760047128822,
      "endTime": 1760047128828.6887,
      "status": "passed",
      "message": "",
      "name": "/var/tmp/vibe-kanban/worktrees/5d95-fix-up-existing/src/security/analyzers/__tests__/elixir-ast-analyzer-core.test.ts"
    }
  ],
  "passRate": "83.72%"
}