{
  "numTotalTestSuites": 608,
  "numPassedTestSuites": 605,
  "numFailedTestSuites": 3,
  "numPendingTestSuites": 0,
  "numTotalTests": 1012,
  "numPassedTests": 838,
  "numFailedTests": 2,
  "numPendingTests": 167,
  "numTodoTests": 0,
  "startTime": 1759804951726,
  "success": false,
  "testResults": [
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check pattern loading without detection",
          "status": "passed",
          "title": "should check pattern loading without detection",
          "duration": 3.1700700000001234,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should test small code detection",
          "status": "passed",
          "title": "should test small code detection",
          "duration": 1.93897300000026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Memory Investigation"
          ],
          "fullName": "Memory Investigation should check AST interpreter directly",
          "status": "passed",
          "title": "should check AST interpreter directly",
          "duration": 0.6489380000002711,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964778,
      "endTime": 1759804964783.649,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/memory-investigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should use ElixirASTAnalyzer when API key is provided",
          "status": "passed",
          "title": "should use ElixirASTAnalyzer when API key is provided",
          "duration": 0.5567649999993591,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should fall back to client-side AST when no API key",
          "status": "passed",
          "title": "should fall back to client-side AST when no API key",
          "duration": 0.3997899999994843,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should support multiple languages with server AST",
          "status": "passed",
          "title": "should support multiple languages with server AST",
          "duration": 0.5065829999984999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "New Detector with Server AST"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working New Detector with Server AST should only support JS/TS without server AST",
          "status": "passed",
          "title": "should only support JS/TS without server AST",
          "duration": 0.294119000000137,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should handle Python code through server AST",
          "status": "skipped",
          "title": "should handle Python code through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Mock Server AST Detection"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Mock Server AST Detection should reject unsupported languages gracefully",
          "status": "passed",
          "title": "should reject unsupported languages gracefully",
          "duration": 0.5318809999989753,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should respect useServerAST=false even with API key",
          "status": "passed",
          "title": "should respect useServerAST=false even with API key",
          "duration": 0.27006599999913306,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GREEN Phase - Server AST Integration Working",
            "Configuration Options"
          ],
          "fullName": "GREEN Phase - Server AST Integration Working Configuration Options should use environment variables as fallback",
          "status": "passed",
          "title": "should use environment variables as fallback",
          "duration": 0.21284100000048056,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964675,
      "endTime": 1759804964677.27,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-green-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use ASTPatternInterpreter for vulnerability detection",
          "status": "passed",
          "title": "should use ASTPatternInterpreter for vulnerability detection",
          "duration": 0.7354510000000118,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect JavaScript eval injection",
          "status": "passed",
          "title": "should detect JavaScript eval injection",
          "duration": 31.505296000000044,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Python SQL injection via server AST",
          "status": "skipped",
          "title": "should detect Python SQL injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect Ruby command injection via server AST",
          "status": "skipped",
          "title": "should detect Ruby command injection via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should detect PHP XSS via server AST",
          "status": "skipped",
          "title": "should detect PHP XSS via server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should achieve >90% accuracy on mixed language corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on mixed language corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "AST Integration Tests"
          ],
          "fullName": "Server-Side AST Integration AST Integration Tests should use server-side AST service endpoint",
          "status": "skipped",
          "title": "should use server-side AST service endpoint",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration",
            "Test Infrastructure"
          ],
          "fullName": "Server-Side AST Integration Test Infrastructure should have ElixirASTAnalyzer class available",
          "status": "passed",
          "title": "should have ElixirASTAnalyzer class available",
          "duration": 0.3587950000001001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804953796,
      "endTime": 1759804953829.359,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with singular \"file\" property",
          "duration": 0.4461730000002717,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should extract files from vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should extract files from vulnerabilities with plural \"files\" property",
          "duration": 0.22085499999957392,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 0.21764700000130688,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) should return empty array for vulnerabilities without file properties",
          "status": "passed",
          "title": "should return empty array for vulnerabilities without file properties",
          "duration": 0.12369300000136718,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection File Extraction (RFC-047 Fix)"
          ],
          "fullName": "Vendor Detection File Extraction (RFC-047 Fix) OLD BROKEN CODE: should demonstrate the bug",
          "status": "passed",
          "title": "OLD BROKEN CODE: should demonstrate the bug",
          "duration": 0.11356999999952677,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964717,
      "endTime": 1759804964718.1238,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/vendor-detection-file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should slice issues array when maxIssues is set",
          "status": "passed",
          "title": "should slice issues array when maxIssues is set",
          "duration": 0.5962189999991097,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is not set",
          "status": "passed",
          "title": "should return all issues when maxIssues is not set",
          "duration": 0.2573179999999411,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is 0",
          "status": "passed",
          "title": "should return all issues when maxIssues is 0",
          "duration": 0.12054600000010396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should return all issues when maxIssues is greater than issue count",
          "status": "passed",
          "title": "should return all issues when maxIssues is greater than issue count",
          "duration": 0.09982400000080816,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle single issue limit",
          "status": "passed",
          "title": "should handle single issue limit",
          "duration": 0.13177800000084972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Issue Limiting Logic"
          ],
          "fullName": "Issue Limiting Logic should handle exact match of maxIssues and issue count",
          "status": "passed",
          "title": "should handle exact match of maxIssues and issue count",
          "duration": 0.1170719999990979,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964726,
      "endTime": 1759804964727.2573,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/index-maxissues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should timeout workflow after 2 minutes",
          "status": "passed",
          "title": "should timeout workflow after 2 minutes",
          "duration": 100.93291999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should complete successfully before timeout",
          "status": "passed",
          "title": "should complete successfully before timeout",
          "duration": 0.6140800000000581,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should handle no issues gracefully without timeout",
          "status": "passed",
          "title": "should handle no issues gracefully without timeout",
          "duration": 0.24545899999998255,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should include timeout information in error message",
          "status": "passed",
          "title": "should include timeout information in error message",
          "duration": 100.08972499999982,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Workflow Timeout Behavior"
          ],
          "fullName": "Workflow Timeout Behavior should use configured processing options",
          "status": "passed",
          "title": "should use configured processing options",
          "duration": 0.7341480000000047,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804953515,
      "endTime": 1759804953718.7341,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/workflow-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should create a feature branch during validation",
          "status": "passed",
          "title": "should create a feature branch during validation",
          "duration": 43.39067499999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should commit generated red tests to the validation branch",
          "status": "passed",
          "title": "should commit generated red tests to the validation branch",
          "duration": 73.57422700000006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should store branch name in validation results",
          "status": "passed",
          "title": "should store branch name in validation results",
          "duration": 42.186758000000054,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should checkout validation branch in mitigation phase",
          "status": "passed",
          "title": "should checkout validation branch in mitigation phase",
          "duration": 75.34461099999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should handle missing validation branch gracefully",
          "status": "passed",
          "title": "should handle missing validation branch gracefully",
          "duration": 35.744764999999916,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Branch Persistence",
            "Phase 1 RED: Define expected behavior"
          ],
          "fullName": "Validation Branch Persistence Phase 1 RED: Define expected behavior should preserve test files between validation and mitigation phases",
          "status": "passed",
          "title": "should preserve test files between validation and mitigation phases",
          "duration": 94.4582170000001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804952766,
      "endTime": 1759804953131.4583,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/modes/validation-branch-persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should check if Claude Code CLI is actually available",
          "status": "passed",
          "title": "should check if Claude Code CLI is actually available",
          "duration": 1.2994849999995495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should generate real solution using Claude Code",
          "status": "passed",
          "title": "should generate real solution using Claude Code",
          "duration": 3168.4526529999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Live API Tests"
          ],
          "fullName": "Claude Code Live API Tests should work with enhanced prompts in live mode",
          "status": "passed",
          "title": "should work with enhanced prompts in live mode",
          "duration": 3024.9822170000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code File System Integration"
          ],
          "fullName": "Claude Code File System Integration should handle real file operations",
          "status": "passed",
          "title": "should handle real file operations",
          "duration": 0.41358300000138115,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804958175,
      "endTime": 1759804964370.4136,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-code-live.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation regardless of other settings",
          "status": "passed",
          "title": "should skip validation regardless of other settings",
          "duration": 5.2169599999997445,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "when DISABLE_FIX_VALIDATION is set"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction when DISABLE_FIX_VALIDATION is set should skip validation even if testGeneration.enabled is true",
          "status": "passed",
          "title": "should skip validation even if testGeneration.enabled is true",
          "duration": 0.8241269999998622,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.19383799999923212,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.06660800000099698,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "DISABLE_FIX_VALIDATION bug reproduction",
            "proper validation skip logic"
          ],
          "fullName": "DISABLE_FIX_VALIDATION bug reproduction proper validation skip logic should skip regardless of testGeneration settings when disabled",
          "status": "passed",
          "title": "should skip regardless of testGeneration settings when disabled",
          "duration": 0.05210900000020047,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964688,
      "endTime": 1759804964694.1938,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/disable-validation-bug.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback generates a solution with feedback integration",
          "status": "passed",
          "title": "generates a solution with feedback integration",
          "duration": 0.518911000001026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "generateSolutionWithFeedback"
          ],
          "fullName": "generateSolutionWithFeedback should integrate feedback when enhancing AI prompts",
          "status": "passed",
          "title": "should integrate feedback when enhancing AI prompts",
          "duration": 0.2749359999997978,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964708,
      "endTime": 1759804964708.5188,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/feedbackEnhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should create PR even when validation fails in test mode",
          "status": "skipped",
          "title": "should create PR even when validation fails in test mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should include validation failure details in result",
          "status": "skipped",
          "title": "should include validation failure details in result",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should not rollback changes when validation fails in test mode",
          "status": "skipped",
          "title": "should not rollback changes when validation fails in test mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should mark result as test mode",
          "status": "skipped",
          "title": "should mark result as test mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should not create PR when validation fails in normal mode",
          "status": "skipped",
          "title": "should not create PR when validation fails in normal mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedProcessor - Test Mode (NEEDS REFACTORING)"
          ],
          "fullName": "GitBasedProcessor - Test Mode (NEEDS REFACTORING) should rollback changes when validation fails in normal mode",
          "status": "skipped",
          "title": "should rollback changes when validation fails in normal mode",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804951726,
      "endTime": 1759804951726,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-test-mode.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect SQL injection vulnerabilities in code",
          "status": "passed",
          "title": "should detect SQL injection vulnerabilities in code",
          "duration": 5.601458000000093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should detect XSS vulnerabilities in code",
          "status": "passed",
          "title": "should detect XSS vulnerabilities in code",
          "duration": 1.4557499999998527,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should calculate appropriate risk levels",
          "status": "passed",
          "title": "should calculate appropriate risk levels",
          "duration": 1.452246999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should adjust complexity based on security risk",
          "status": "passed",
          "title": "should adjust complexity based on security risk",
          "duration": 1.7265870000001087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle files with no vulnerabilities",
          "status": "passed",
          "title": "should handle files with no vulnerabilities",
          "duration": 1.411301000000094,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Security Analysis"
          ],
          "fullName": "SecurityAwareAnalyzer Security Analysis should handle mixed languages",
          "status": "passed",
          "title": "should handle mixed languages",
          "duration": 1.1796120000001338,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect security issues from title and body",
          "status": "passed",
          "title": "should detect security issues from title and body",
          "duration": 0.7826680000000579,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer",
            "Issue Type Detection"
          ],
          "fullName": "SecurityAwareAnalyzer Issue Type Detection should detect bug issues",
          "status": "passed",
          "title": "should detect bug issues",
          "duration": 0.409987000000001,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804953154,
      "endTime": 1759804953168.41,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/security-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should skip when fixValidation.enabled is false",
          "status": "passed",
          "title": "should skip when fixValidation.enabled is false",
          "duration": 0.3447869999999966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is true",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is true",
          "duration": 0.09670499999992899,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "shouldSkipValidation (correct logic)"
          ],
          "fullName": "Validation Skip Logic shouldSkipValidation (correct logic) should not skip when fixValidation.enabled is undefined",
          "status": "passed",
          "title": "should not skip when fixValidation.enabled is undefined",
          "duration": 0.23332099999970524,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "status": "passed",
          "title": "FAILS to skip validation when DISABLE_FIX_VALIDATION is set but testGeneration.validateFixes is true",
          "duration": 0.12217400000008638,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "buggyValidationCondition (current bug)"
          ],
          "fullName": "Validation Skip Logic buggyValidationCondition (current bug) correctly skips when both are false",
          "status": "passed",
          "title": "correctly skips when both are false",
          "duration": 0.053899999998975545,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "status": "passed",
          "title": "should NOT enter validation when DISABLE_FIX_VALIDATION is set",
          "duration": 0.06457700000100886,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when fixValidation.enabled is true",
          "status": "passed",
          "title": "should enter validation when fixValidation.enabled is true",
          "duration": 0.07325099999980011,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should enter validation when testGeneration.validateFixes is true and not disabled",
          "status": "passed",
          "title": "should enter validation when testGeneration.validateFixes is true and not disabled",
          "duration": 0.06208599999990838,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Skip Logic",
            "Fixed validation condition"
          ],
          "fullName": "Validation Skip Logic Fixed validation condition should not enter validation when both are false/undefined",
          "status": "passed",
          "title": "should not enter validation when both are false/undefined",
          "duration": 0.09080600000015693,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964627,
      "endTime": 1759804964629.0908,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/validation-skip-logic.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent",
          "duration": 0.3989609999989625,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid FeedbackEvent with modifications",
          "status": "passed",
          "title": "should allow creating a valid FeedbackEvent with modifications",
          "duration": 0.17283900000074937,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should allow creating a valid PromptEnhancementContext",
          "status": "passed",
          "title": "should allow creating a valid PromptEnhancementContext",
          "duration": 0.3224229999996169,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Feedback Types"
          ],
          "fullName": "Feedback Types should enforce proper enumeration values",
          "status": "passed",
          "title": "should enforce proper enumeration values",
          "duration": 0.2573229999998148,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964640,
      "endTime": 1759804964641.3225,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/types.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should analyze issue and determine if fixable",
          "status": "passed",
          "title": "executeScanForIssue should analyze issue and determine if fixable",
          "duration": 78.92542600000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should fail if git has uncommitted changes",
          "status": "passed",
          "title": "executeScanForIssue should fail if git has uncommitted changes",
          "duration": 0.8697740000000067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Scan Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Scan Phase Extraction executeScanForIssue should store scan results in PhaseDataClient",
          "status": "passed",
          "title": "executeScanForIssue should store scan results in PhaseDataClient",
          "duration": 5.776407000000063,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should generate tests for vulnerability",
          "status": "passed",
          "title": "executeValidateForIssue should generate tests for vulnerability",
          "duration": 21.108038999999962,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "status": "passed",
          "title": "executeValidateForIssue should use TestGeneratingSecurityAnalyzer",
          "duration": 11.13114900000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Validate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Validate Phase Extraction executeValidateForIssue should store validation results",
          "status": "passed",
          "title": "executeValidateForIssue should store validation results",
          "duration": 3.901595000000043,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should apply fix using Claude Code",
          "status": "passed",
          "title": "executeMitigateForIssue should apply fix using Claude Code",
          "duration": 6.649577999999906,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should validate fix with generated tests",
          "status": "passed",
          "title": "executeMitigateForIssue should validate fix with generated tests",
          "duration": 6.060488000000078,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Mitigate Phase Extraction"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Mitigate Phase Extraction executeMitigateForIssue should retry on validation failure",
          "status": "passed",
          "title": "executeMitigateForIssue should retry on validation failure",
          "duration": 6.354305999999951,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should run all phases sequentially",
          "status": "passed",
          "title": "executeThreePhaseForIssue should run all phases sequentially",
          "duration": 23.178201999999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should abort if scan determines not fixable",
          "status": "passed",
          "title": "executeThreePhaseForIssue should abort if scan determines not fixable",
          "duration": 1.2605119999999488,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - processIssueWithGit refactoring",
            "Full Three-Phase Execution"
          ],
          "fullName": "Phase Decomposition - processIssueWithGit refactoring Full Three-Phase Execution executeThreePhaseForIssue should pass data between phases",
          "status": "passed",
          "title": "executeThreePhaseForIssue should pass data between phases",
          "duration": 1.3944680000000744,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804952531,
      "endTime": 1759804952699.3945,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-decomposition.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should have Ruby SQL injection pattern",
          "status": "passed",
          "title": "should have Ruby SQL injection pattern",
          "duration": 0.4017869999988761,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should match Ruby SQL injection with regex",
          "status": "passed",
          "title": "should match Ruby SQL injection with regex",
          "duration": 0.2537850000007893,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection with detector",
          "status": "passed",
          "title": "should detect Ruby SQL injection with detector",
          "duration": 1.1180119999989984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Ruby Vulnerability Detection"
          ],
          "fullName": "Ruby Vulnerability Detection should detect Ruby SQL injection in full code",
          "status": "passed",
          "title": "should detect Ruby SQL injection in full code",
          "duration": 1.0397549999997864,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964740,
      "endTime": 1759804964743.0398,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/ruby-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize parameterized queries as safe",
          "status": "passed",
          "title": "should recognize parameterized queries as safe",
          "duration": 0.5610909999995783,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize prepared statements as safe",
          "status": "passed",
          "title": "should recognize prepared statements as safe",
          "duration": 0.20120500000120956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby hash syntax as safe SQL",
          "status": "passed",
          "title": "should NOT consider Ruby hash syntax as safe SQL",
          "duration": 0.10141300000032061,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should NOT consider Ruby string interpolation as safe",
          "status": "passed",
          "title": "should NOT consider Ruby string interpolation as safe",
          "duration": 0.07309600000007777,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "SQL Injection Safe Patterns"
          ],
          "fullName": "Safe Usage Detection SQL Injection Safe Patterns should recognize actual named parameters as safe",
          "status": "passed",
          "title": "should recognize actual named parameters as safe",
          "duration": 0.12233699999887904,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Ruby ActiveRecord safe patterns",
          "status": "passed",
          "title": "should handle Ruby ActiveRecord safe patterns",
          "duration": 0.08671200000026147,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Safe Usage Detection",
            "Language-specific patterns"
          ],
          "fullName": "Safe Usage Detection Language-specific patterns should handle Python parameterized queries",
          "status": "passed",
          "title": "should handle Python parameterized queries",
          "duration": 0.14853100000073027,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964759,
      "endTime": 1759804964760.2012,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/safe-usage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect node_modules as vendor",
          "status": "passed",
          "title": "should detect node_modules as vendor",
          "duration": 0.5385589999998501,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect vendor directory as vendor",
          "status": "passed",
          "title": "should detect vendor directory as vendor",
          "duration": 0.13928499999997257,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect bower_components as vendor",
          "status": "passed",
          "title": "should detect bower_components as vendor",
          "duration": 0.09072100000003047,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect minified files as vendor",
          "status": "passed",
          "title": "should detect minified files as vendor",
          "duration": 0.0888999999999669,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should not detect application code as vendor",
          "status": "passed",
          "title": "should not detect application code as vendor",
          "duration": 0.36510599999996884,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vendor Directory Detection"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vendor Directory Detection should detect by file header comment",
          "status": "passed",
          "title": "should detect by file header comment",
          "duration": 0.26227700000004006,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify jQuery from file path",
          "status": "passed",
          "title": "should identify jQuery from file path",
          "duration": 0.33219499999995605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should identify Bootstrap from file content",
          "status": "passed",
          "title": "should identify Bootstrap from file content",
          "duration": 0.29635400000006484,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Library Identification"
          ],
          "fullName": "RFC-047: Vendor Library Detection Library Identification should return null for non-vendor files",
          "status": "passed",
          "title": "should return null for non-vendor files",
          "duration": 0.26651600000013786,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should find package.json dependencies",
          "status": "passed",
          "title": "should find package.json dependencies",
          "duration": 0.2598080000000209,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Dependency Analysis"
          ],
          "fullName": "RFC-047: Vendor Library Detection Dependency Analysis should check if file belongs to known dependency",
          "status": "passed",
          "title": "should check if file belongs to known dependency",
          "duration": 0.13009499999998297,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return update action for vendor vulnerabilities",
          "status": "passed",
          "title": "should return update action for vendor vulnerabilities",
          "duration": 0.30620199999998476,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should return fix action for application vulnerabilities",
          "status": "passed",
          "title": "should return fix action for application vulnerabilities",
          "duration": 0.18588699999986602,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Vulnerability Handling"
          ],
          "fullName": "RFC-047: Vendor Library Detection Vulnerability Handling should not attempt to patch vendor code",
          "status": "passed",
          "title": "should not attempt to patch vendor code",
          "duration": 0.2740919999998823,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should recommend safe update version",
          "status": "passed",
          "title": "should recommend safe update version",
          "duration": 0.4027379999999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Update Recommendations"
          ],
          "fullName": "RFC-047: Vendor Library Detection Update Recommendations should provide update commands",
          "status": "passed",
          "title": "should provide update commands",
          "duration": 0.18995700000004945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should create vendor-specific issue",
          "status": "passed",
          "title": "should create vendor-specific issue",
          "duration": 0.39778400000000147,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-047: Vendor Library Detection",
            "Issue Creation"
          ],
          "fullName": "RFC-047: Vendor Library Detection Issue Creation should not create patch PR for vendor files",
          "status": "passed",
          "title": "should not create patch PR for vendor files",
          "duration": 0.14871199999993223,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804953758,
      "endTime": 1759804953763.1487,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/vendor/__tests__/vendor-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when vended credentials are enabled",
          "status": "skipped",
          "title": "should use Claude CLI when vended credentials are enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when RSOLV_USE_CLI is true",
          "status": "skipped",
          "title": "should use Claude CLI when RSOLV_USE_CLI is true",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should use Claude CLI when structured phases are enabled",
          "status": "skipped",
          "title": "should use Claude CLI when structured phases are enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude CLI Usage in Mitigation"
          ],
          "fullName": "Claude CLI Usage in Mitigation should NOT fall back to SDK when vended credentials are enabled and CLI fails",
          "status": "skipped",
          "title": "should NOT fall back to SDK when vended credentials are enabled and CLI fails",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804951726,
      "endTime": 1759804951726,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-cli-mitigation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should pass specificVulnerabilities from issueContext to prompt",
          "status": "skipped",
          "title": "should pass specificVulnerabilities from issueContext to prompt",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should log debug info when specificVulnerabilities are present",
          "status": "skipped",
          "title": "should log debug info when specificVulnerabilities are present",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "specificVulnerabilities data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests specificVulnerabilities data flow should handle missing specificVulnerabilities gracefully",
          "status": "skipped",
          "title": "should handle missing specificVulnerabilities gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Data Flow Tests",
            "generateSolution data flow"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Data Flow Tests generateSolution data flow should preserve specificVulnerabilities through generateSolution call",
          "status": "skipped",
          "title": "should preserve specificVulnerabilities through generateSolution call",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804951726,
      "endTime": 1759804951726,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-data-flow.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should complete full analysis workflow",
          "status": "passed",
          "title": "should complete full analysis workflow",
          "duration": 1.589350000000195,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 3.565349000000424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "end-to-end workflow"
          ],
          "fullName": "ElixirASTAnalyzer - Integration end-to-end workflow should handle timeout",
          "status": "passed",
          "title": "should handle timeout",
          "duration": 202.43727200000103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "configuration"
          ],
          "fullName": "ElixirASTAnalyzer - Integration configuration should validate API key",
          "status": "passed",
          "title": "should validate API key",
          "duration": 0.9850810000007186,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "configuration"
          ],
          "fullName": "ElixirASTAnalyzer - Integration configuration should validate API URL",
          "status": "passed",
          "title": "should validate API URL",
          "duration": 0.49262799999996787,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "resource management"
          ],
          "fullName": "ElixirASTAnalyzer - Integration resource management should not leak memory with multiple analyses",
          "status": "passed",
          "title": "should not leak memory with multiple analyses",
          "duration": 0.582007999999405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Integration",
            "resource management"
          ],
          "fullName": "ElixirASTAnalyzer - Integration resource management should cleanup all resources on cleanup",
          "status": "passed",
          "title": "should cleanup all resources on cleanup",
          "duration": 0.5923530000000028,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804964407,
      "endTime": 1759804964617.5923,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection via string concatenation",
          "status": "skipped",
          "title": "should detect SQL injection via string concatenation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Python SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Python SQL Injection Detection should detect SQL injection with f-strings",
          "status": "skipped",
          "title": "should detect SQL injection with f-strings",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "JavaScript SQL Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) JavaScript SQL Injection Detection should detect SQL injection in JavaScript",
          "status": "skipped",
          "title": "should detect SQL injection in JavaScript",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Ruby Command Injection Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Ruby Command Injection Detection should detect command injection in Ruby",
          "status": "skipped",
          "title": "should detect command injection in Ruby",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "PHP XSS Detection"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) PHP XSS Detection should detect XSS in PHP echo statements",
          "status": "skipped",
          "title": "should detect XSS in PHP echo statements",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Accuracy Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Accuracy Metrics should achieve >90% accuracy on test corpus",
          "status": "skipped",
          "title": "should achieve >90% accuracy on test corpus",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode)",
            "Performance Metrics"
          ],
          "fullName": "AST Service Verification - REVIEW Phase (Needs RFC-048 Test Mode) Performance Metrics should analyze files with acceptable latency",
          "status": "skipped",
          "title": "should analyze files with acceptable latency",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965504,
      "endTime": 1759804965504,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ast-service-verification.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV3 - Python Support (Needs RFC-048 Test Mode)"
          ],
          "fullName": "SecurityDetectorV3 - Python Support (Needs RFC-048 Test Mode) should detect SQL injection in Python code using server-side AST",
          "status": "skipped",
          "title": "should detect SQL injection in Python code using server-side AST",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965504,
      "endTime": 1759804965504,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/detector-v3-python.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should apply RSOLV_TESTING_MODE from config.environmentVariables to process.env",
          "status": "passed",
          "title": "should apply RSOLV_TESTING_MODE from config.environmentVariables to process.env",
          "duration": 1.2431229999992865,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should detect testing mode when set via config.environmentVariables",
          "status": "passed",
          "title": "should detect testing mode when set via config.environmentVariables",
          "duration": 0.4238759999998365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should NOT apply testing mode when not in environmentVariables",
          "status": "passed",
          "title": "should NOT apply testing mode when not in environmentVariables",
          "duration": 0.2886769999995522,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should handle empty environmentVariables object",
          "status": "passed",
          "title": "should handle empty environmentVariables object",
          "duration": 0.5223080000005211,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should handle undefined environmentVariables",
          "status": "passed",
          "title": "should handle undefined environmentVariables",
          "duration": 0.21465799999987212,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "RSOLV_TESTING_MODE from environment_variables JSON"
          ],
          "fullName": "ValidationMode - Environment Variable Handling RSOLV_TESTING_MODE from environment_variables JSON should override existing environment variables",
          "status": "passed",
          "title": "should override existing environment variables",
          "duration": 0.26584399999956076,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Environment Variable Handling",
            "Testing mode behavior in validation"
          ],
          "fullName": "ValidationMode - Environment Variable Handling Testing mode behavior in validation should log testing mode message when enabled via environmentVariables",
          "status": "passed",
          "title": "should log testing mode message when enabled via environmentVariables",
          "duration": 0.2815040000004956,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804970458,
      "endTime": 1759804970461.2815,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/validation-mode-env.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use default API URL if not provided",
          "status": "passed",
          "title": "should use default API URL if not provided",
          "duration": 0.6760719999999765,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use provided API URL",
          "status": "passed",
          "title": "should use provided API URL",
          "duration": 0.3194370000001072,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use API key from config",
          "status": "passed",
          "title": "should use API key from config",
          "duration": 0.1528489999999465,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "constructor"
          ],
          "fullName": "PatternAPIClient constructor should use API key from environment if not in config",
          "status": "passed",
          "title": "should use API key from environment if not in config",
          "duration": 0.11153999999999087,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should fetch patterns for a language",
          "status": "passed",
          "title": "should fetch patterns for a language",
          "duration": 1.467975000000024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 4.560936999999967,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should use cached patterns within TTL",
          "status": "passed",
          "title": "should use cached patterns within TTL",
          "duration": 0.6969199999999773,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "fetchPatterns"
          ],
          "fullName": "PatternAPIClient fetchPatterns should handle patterns without API key (public only)",
          "status": "passed",
          "title": "should handle patterns without API key (public only)",
          "duration": 0.9757530000000543,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "PatternAPIClient enhanced patterns"
          ],
          "fullName": "PatternAPIClient PatternAPIClient enhanced patterns should handle enhanced patterns with AST rules",
          "status": "passed",
          "title": "should handle enhanced patterns with AST rules",
          "duration": 0.8925460000000385,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient",
            "PatternAPIClient enhanced patterns"
          ],
          "fullName": "PatternAPIClient PatternAPIClient enhanced patterns should handle patterns without enhanced features",
          "status": "passed",
          "title": "should handle patterns without enhanced features",
          "duration": 0.6769040000000359,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966410,
      "endTime": 1759804966420.677,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-api-client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should send correct batch payload format to validation API",
          "status": "passed",
          "title": "should send correct batch payload format to validation API",
          "duration": 4.0252120000000104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Validation Payload Format"
          ],
          "fullName": "Validation Payload Format should handle validation response correctly",
          "status": "passed",
          "title": "should handle validation response correctly",
          "duration": 1.1400669999999309,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966479,
      "endTime": 1759804966485.1401,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/validation-payload-format.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify RsolvApiClient is imported in pr.ts",
          "status": "passed",
          "title": "should verify RsolvApiClient is imported in pr.ts",
          "duration": 0.5621779999992214,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pull Request Fix Tracking"
          ],
          "fullName": "Pull Request Fix Tracking should verify recordFixAttempt is called after PR creation",
          "status": "passed",
          "title": "should verify recordFixAttempt is called after PR creation",
          "duration": 0.3898880000006102,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804970602,
      "endTime": 1759804970603.39,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/integration/pr-tracking.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Three-Phase Workflow Integration"
          ],
          "fullName": "Three-Phase Workflow Integration should complete full workflow: validation branch → test persistence → mitigation checkout",
          "status": "passed",
          "title": "should complete full workflow: validation branch → test persistence → mitigation checkout",
          "duration": 140.15518899999984,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Three-Phase Workflow Integration"
          ],
          "fullName": "Three-Phase Workflow Integration should handle missing validation branch gracefully",
          "status": "passed",
          "title": "should handle missing validation branch gracefully",
          "duration": 30.95819399999982,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966957,
      "endTime": 1759804967128.9583,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/integration/three-phase-workflow.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 tests for SQL injection vulnerability",
          "status": "passed",
          "title": "should generate JUnit 5 tests for SQL injection vulnerability",
          "duration": 1.2983809999999494,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "JUnit 5 Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support JUnit 5 Support should generate JUnit 5 parameterized tests for multiple attack vectors",
          "status": "passed",
          "title": "should generate JUnit 5 parameterized tests for multiple attack vectors",
          "duration": 0.7139010000000781,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG tests for XXE vulnerability",
          "status": "passed",
          "title": "should generate TestNG tests for XXE vulnerability",
          "duration": 0.9651149999999689,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "TestNG Support"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support TestNG Support should generate TestNG data provider tests",
          "status": "passed",
          "title": "should generate TestNG data provider tests",
          "duration": 1.2758820000000242,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - Java Framework Support",
            "Spring Boot Integration"
          ],
          "fullName": "AdaptiveTestGenerator - Java Framework Support Spring Boot Integration should generate Spring Boot test annotations for JUnit 5",
          "status": "passed",
          "title": "should generate Spring Boot test annotations for JUnit 5",
          "duration": 0.7688550000000305,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966437,
      "endTime": 1759804966441.7688,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/adaptive-test-generator-java.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should ignore .rsolv/ directory in git status check",
          "status": "skipped",
          "title": "should ignore .rsolv/ directory in git status check",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git Status - .rsolv Directory Handling"
          ],
          "fullName": "Git Status - .rsolv Directory Handling should still detect real uncommitted changes",
          "status": "skipped",
          "title": "should still detect real uncommitted changes",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965504,
      "endTime": 1759804965504,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-status-rsolv-ignore.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle Java SQL injection with multiple fix attempts",
          "status": "passed",
          "title": "should handle Java SQL injection with multiple fix attempts",
          "duration": 2.3448219999999083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should handle PHP SQL injection with PDO migration",
          "status": "passed",
          "title": "should handle PHP SQL injection with PDO migration",
          "duration": 2.339433999999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Simulated Fix Iteration Scenarios"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Simulated Fix Iteration Scenarios should respect max iteration limits for complex vulnerabilities",
          "status": "passed",
          "title": "should respect max iteration limits for complex vulnerabilities",
          "duration": 0.2595720000000483,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper Java test context for Claude Code",
          "status": "passed",
          "title": "should generate proper Java test context for Claude Code",
          "duration": 0.16007600000000366,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Test Context Generation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Test Context Generation should generate proper PHP test context for Claude Code",
          "status": "passed",
          "title": "should generate proper PHP test context for Claude Code",
          "duration": 0.13677800000004936,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate Java fixes use approved patterns",
          "status": "passed",
          "title": "should validate Java fixes use approved patterns",
          "duration": 0.30058999999994285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Integration Tests for Java/PHP Fix Validation",
            "Language-Specific Fix Validation"
          ],
          "fullName": "Phase 6E: Integration Tests for Java/PHP Fix Validation Language-Specific Fix Validation should validate PHP fixes use approved patterns",
          "status": "passed",
          "title": "should validate PHP fixes use approved patterns",
          "duration": 0.2175129999999399,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966215,
      "endTime": 1759804966221.3005,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6e-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should prioritize options.maxTokens over config and defaults",
          "status": "skipped",
          "title": "should prioritize options.maxTokens over config and defaults",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should use config.maxTokens when options.maxTokens is undefined",
          "status": "skipped",
          "title": "should use config.maxTokens when options.maxTokens is undefined",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should use use case default when both options and config are undefined",
          "status": "skipped",
          "title": "should use use case default when both options and config are undefined",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "RED - resolveMaxTokens priority order"
          ],
          "fullName": "Token Utils - TDD Tests RED - resolveMaxTokens priority order should fallback to STANDARD default for unknown use case",
          "status": "skipped",
          "title": "should fallback to STANDARD default for unknown use case",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should accept valid token limits",
          "status": "skipped",
          "title": "should accept valid token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should reject zero or negative token limits",
          "status": "skipped",
          "title": "should reject zero or negative token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "GREEN - validateTokenLimit edge cases"
          ],
          "fullName": "Token Utils - TDD Tests GREEN - validateTokenLimit edge cases should reject excessively high token limits",
          "status": "skipped",
          "title": "should reject excessively high token limits",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should use TEST_GENERATION default (10000) when no config provided",
          "status": "skipped",
          "title": "should use TEST_GENERATION default (10000) when no config provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should respect explicit options.maxTokens for test generation",
          "status": "skipped",
          "title": "should respect explicit options.maxTokens for test generation",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should validate the resolved token limit",
          "status": "skipped",
          "title": "should validate the resolved token limit",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "REFACTOR - getTestGenerationTokenLimit (our bug fix)"
          ],
          "fullName": "Token Utils - TDD Tests REFACTOR - getTestGenerationTokenLimit (our bug fix) should prevent the original 2000 token bug from recurring",
          "status": "skipped",
          "title": "should prevent the original 2000 token bug from recurring",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "Use case specific defaults"
          ],
          "fullName": "Token Utils - TDD Tests Use case specific defaults should have appropriate defaults for each use case",
          "status": "skipped",
          "title": "should have appropriate defaults for each use case",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Token Utils - TDD Tests",
            "Use case specific defaults"
          ],
          "fullName": "Token Utils - TDD Tests Use case specific defaults should never default to the problematic 2000 token limit",
          "status": "skipped",
          "title": "should never default to the problematic 2000 token limit",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965504,
      "endTime": 1759804965504,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/token-utils.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should split 14-file vulnerability into chunks of 3",
          "status": "passed",
          "title": "should split 14-file vulnerability into chunks of 3",
          "duration": 0.6697300000000723,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should respect token limits per chunk",
          "status": "passed",
          "title": "should respect token limits per chunk",
          "duration": 0.3831629999999677,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Basic Chunking"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Basic Chunking should keep related files together when possible",
          "status": "passed",
          "title": "should keep related files together when possible",
          "duration": 0.186554000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by module",
          "status": "passed",
          "title": "should group files by module",
          "duration": 0.21081200000003264,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should group files by severity",
          "status": "passed",
          "title": "should group files by severity",
          "duration": 0.16240900000002512,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Chunking Strategies"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Chunking Strategies should analyze file dependencies",
          "status": "passed",
          "title": "should analyze file dependencies",
          "duration": 0.2566799999999603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should generate multiple PRs for chunked vulnerability",
          "status": "passed",
          "title": "should generate multiple PRs for chunked vulnerability",
          "duration": 6.942427000000066,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Multi-PR Generation"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Multi-PR Generation should link PRs in series with dependencies",
          "status": "passed",
          "title": "should link PRs in series with dependencies",
          "duration": 0.6751730000000862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should calculate complexity based on file count",
          "status": "passed",
          "title": "should calculate complexity based on file count",
          "duration": 6.045845999999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Complexity Analysis"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Complexity Analysis should route complex vulnerabilities to manual guide",
          "status": "passed",
          "title": "should route complex vulnerabilities to manual guide",
          "duration": 0.4851459999999861,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should handle hardcoded secrets with environment variables",
          "status": "passed",
          "title": "should handle hardcoded secrets with environment variables",
          "duration": 9.289454999999975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-046: Multi-file Vulnerability Chunking",
            "Special Handlers"
          ],
          "fullName": "RFC-046: Multi-file Vulnerability Chunking Special Handlers should not break functionality when removing secrets",
          "status": "passed",
          "title": "should not break functionality when removing secrets",
          "duration": 0.44589799999994284,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966353,
      "endTime": 1759804966379.4458,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/chunking/__tests__/vulnerability-chunker.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should run command successfully",
          "status": "passed",
          "title": "should run command successfully",
          "duration": 1.054029000000014,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should fail when containers are disabled",
          "status": "passed",
          "title": "should fail when containers are disabled",
          "duration": 1.9672830000000658,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should create and clean up temporary directory",
          "status": "passed",
          "title": "should create and clean up temporary directory",
          "duration": 0.5717730000000074,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use provided working directory",
          "status": "passed",
          "title": "should use provided working directory",
          "duration": 0.3818829999999025,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle command execution failure",
          "status": "passed",
          "title": "should handle command execution failure",
          "duration": 0.4122869999999921,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should include environment variables in Docker command",
          "status": "passed",
          "title": "should include environment variables in Docker command",
          "duration": 0.35957299999995485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should apply resource limits",
          "status": "passed",
          "title": "should apply resource limits",
          "duration": 0.31541299999992134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should add security options",
          "status": "passed",
          "title": "should add security options",
          "duration": 0.3095349999999826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle volume mounts",
          "status": "passed",
          "title": "should handle volume mounts",
          "duration": 0.3255570000000034,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should escape shell arguments properly",
          "status": "passed",
          "title": "should escape shell arguments properly",
          "duration": 0.4800669999999627,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should use custom timeout",
          "status": "passed",
          "title": "should use custom timeout",
          "duration": 0.4910229999999274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Run"
          ],
          "fullName": "Container Run should handle timeout errors",
          "status": "passed",
          "title": "should handle timeout errors",
          "duration": 1.3236050000000432,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966511,
      "endTime": 1759804966518.3235,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/containers/__tests__/run.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove Anthropic references",
          "status": "passed",
          "title": "should remove Anthropic references",
          "duration": 1.112100000000055,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should remove OpenAI references",
          "status": "passed",
          "title": "should remove OpenAI references",
          "duration": 0.4017820000001393,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API URLs",
          "status": "passed",
          "title": "should sanitize API URLs",
          "duration": 0.26120099999980084,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize API keys and credentials",
          "status": "passed",
          "title": "should sanitize API keys and credentials",
          "duration": 0.39127400000006674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should sanitize model names",
          "status": "passed",
          "title": "should sanitize model names",
          "duration": 0.48116000000004533,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle complex error messages",
          "status": "passed",
          "title": "should handle complex error messages",
          "duration": 0.17759399999999914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should preserve helpful error context",
          "status": "passed",
          "title": "should preserve helpful error context",
          "duration": 0.14996099999984835,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeErrorMessage"
          ],
          "fullName": "Error Sanitizer sanitizeErrorMessage should handle edge cases",
          "status": "passed",
          "title": "should handle edge cases",
          "duration": 0.0869759999998223,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should sanitize Error objects",
          "status": "passed",
          "title": "should sanitize Error objects",
          "duration": 0.1959110000000237,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle non-Error objects",
          "status": "passed",
          "title": "should handle non-Error objects",
          "duration": 0.11594000000013693,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Error Sanitizer",
            "sanitizeError"
          ],
          "fullName": "Error Sanitizer sanitizeError should handle complex objects",
          "status": "passed",
          "title": "should handle complex objects",
          "duration": 0.10373600000002625,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966837,
      "endTime": 1759804966841.1038,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/utils/__tests__/error-sanitizer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should authenticate successfully",
          "status": "skipped",
          "title": "should authenticate successfully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should create and search for test issue",
          "status": "skipped",
          "title": "should create and search for test issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should add comment to issue",
          "status": "skipped",
          "title": "should add comment to issue",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter Integration Tests"
          ],
          "fullName": "JiraAdapter Integration Tests should link external resource",
          "status": "skipped",
          "title": "should link external resource",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965504,
      "endTime": 1759804965504,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/jira-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should gather context successfully",
          "status": "passed",
          "title": "should gather context successfully",
          "duration": 1.3582730000000538,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should use cached context on second call",
          "status": "passed",
          "title": "should use cached context on second call",
          "duration": 0.28185499999995045,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "gatherDeepContext"
          ],
          "fullName": "EnhancedClaudeCodeAdapter gatherDeepContext should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.30738300000007257,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should generate enhanced solution with deep context",
          "status": "passed",
          "title": "should generate enhanced solution with deep context",
          "duration": 0.44694299999991927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "generateEnhancedSolution"
          ],
          "fullName": "EnhancedClaudeCodeAdapter generateEnhancedSolution should use enhanced prompt when provided",
          "status": "passed",
          "title": "should use enhanced prompt when provided",
          "duration": 0.28971200000000863,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should build proper context gathering prompt",
          "status": "passed",
          "title": "should build proper context gathering prompt",
          "duration": 0.11205199999994875,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "EnhancedClaudeCodeAdapter",
            "integration with context caching"
          ],
          "fullName": "EnhancedClaudeCodeAdapter integration with context caching should create minimal context correctly",
          "status": "passed",
          "title": "should create minimal context correctly",
          "duration": 0.14131699999984448,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966807,
      "endTime": 1759804966810.1414,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should check if Claude CLI is available",
          "status": "passed",
          "title": "should check if Claude CLI is available",
          "duration": 0.7893049999993309,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should construct a proper prompt",
          "status": "passed",
          "title": "should construct a proper prompt",
          "duration": 0.3126090000005206,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Integration"
          ],
          "fullName": "Claude Code CLI Integration should generate a real solution using Claude CLI",
          "status": "skipped",
          "title": "should generate a real solution using Claude CLI",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804970404,
      "endTime": 1759804970405.3125,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should initialize with correct configuration",
          "status": "passed",
          "title": "should initialize with correct configuration",
          "duration": 2.1181060000000116,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle generateSolution request correctly",
          "status": "passed",
          "title": "should handle generateSolution request correctly",
          "duration": 3.3855050000000233,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Basic Operations"
          ],
          "fullName": "Claude Code SDK Adapter Basic Operations should handle empty response gracefully",
          "status": "passed",
          "title": "should handle empty response gracefully",
          "duration": 1.3730520000000297,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle query errors gracefully",
          "status": "passed",
          "title": "should handle query errors gracefully",
          "duration": 3.091255999999987,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Error Handling"
          ],
          "fullName": "Claude Code SDK Adapter Error Handling should handle invalid JSON response",
          "status": "passed",
          "title": "should handle invalid JSON response",
          "duration": 1.1207059999999842,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should handle missing API key",
          "status": "passed",
          "title": "should handle missing API key",
          "duration": 0.8869050000000129,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Configuration Options"
          ],
          "fullName": "Claude Code SDK Adapter Configuration Options should respect timeout configuration",
          "status": "passed",
          "title": "should respect timeout configuration",
          "duration": 201.21331700000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle multiple file changes",
          "status": "passed",
          "title": "should handle multiple file changes",
          "duration": 1.2360679999999888,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle security vulnerabilities in input",
          "status": "passed",
          "title": "should handle security vulnerabilities in input",
          "duration": 0.9910649999999919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Complex Scenarios"
          ],
          "fullName": "Claude Code SDK Adapter Complex Scenarios should handle retry logic",
          "status": "passed",
          "title": "should handle retry logic",
          "duration": 0.8565570000000093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should format system message correctly",
          "status": "passed",
          "title": "should format system message correctly",
          "duration": 0.587571999999966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Message Formatting"
          ],
          "fullName": "Claude Code SDK Adapter Message Formatting should include file contents in message",
          "status": "passed",
          "title": "should include file contents in message",
          "duration": 0.525100000000009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle very large responses",
          "status": "passed",
          "title": "should handle very large responses",
          "duration": 1.350484999999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code SDK Adapter",
            "Edge Cases"
          ],
          "fullName": "Claude Code SDK Adapter Edge Cases should handle special characters in paths",
          "status": "passed",
          "title": "should handle special characters in paths",
          "duration": 0.6524149999999622,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804965822,
      "endTime": 1759804966042.6523,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "RED Phase - Current Single-Phase Failures"
          ],
          "fullName": "Two-Phase Claude Code Conversation RED Phase - Current Single-Phase Failures should fail with single-phase approach (files not edited)",
          "status": "passed",
          "title": "should fail with single-phase approach (files not edited)",
          "duration": 1.139037999999914,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should successfully edit files then provide JSON with two-phase approach",
          "status": "passed",
          "title": "should successfully edit files then provide JSON with two-phase approach",
          "duration": 1.3551710000000412,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "GREEN Phase - Two-Phase Solution"
          ],
          "fullName": "Two-Phase Claude Code Conversation GREEN Phase - Two-Phase Solution should handle conversation flow correctly",
          "status": "passed",
          "title": "should handle conversation flow correctly",
          "duration": 0.8432219999999688,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should use clean separation of concerns",
          "status": "passed",
          "title": "should use clean separation of concerns",
          "duration": 0.40415500000005977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should handle phase failures gracefully",
          "status": "passed",
          "title": "should handle phase failures gracefully",
          "duration": 0.3677650000000767,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should maintain conversation context between phases",
          "status": "passed",
          "title": "should maintain conversation context between phases",
          "duration": 0.6506600000000162,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "REFACTOR Phase - Optimized Implementation"
          ],
          "fullName": "Two-Phase Claude Code Conversation REFACTOR Phase - Optimized Implementation should complete within reasonable time",
          "status": "passed",
          "title": "should complete within reasonable time",
          "duration": 0.5152699999999868,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Two-Phase Claude Code Conversation",
            "Integration Tests"
          ],
          "fullName": "Two-Phase Claude Code Conversation Integration Tests should work with real Claude Code SDK",
          "status": "passed",
          "title": "should work with real Claude Code SDK",
          "duration": 0.552310000000034,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966320,
      "endTime": 1759804966326.5522,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/two-phase-conversation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Current Bug: Empty validation vulnerabilities array"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Current Bug: Empty validation vulnerabilities array should extract files when validation data has empty vulnerabilities array",
          "status": "passed",
          "title": "should extract files when validation data has empty vulnerabilities array",
          "duration": 0.8996409999999742,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 1: Vulnerabilities directly in validation data"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 1: Vulnerabilities directly in validation data should extract file from vulnerability with \"file\" property",
          "status": "passed",
          "title": "should extract file from vulnerability with \"file\" property",
          "duration": 0.24959100000000944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"path\" instead of \"file\"",
          "status": "passed",
          "title": "should handle vulnerability with \"path\" instead of \"file\"",
          "duration": 0.1310569999998279,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Possible Structure 2: Vulnerabilities with different property names"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Possible Structure 2: Vulnerabilities with different property names should handle vulnerability with \"location\" property",
          "status": "passed",
          "title": "should handle vulnerability with \"location\" property",
          "duration": 0.08150399999999536,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Robust file extraction function"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Robust file extraction function should handle all possible vulnerability structures",
          "status": "passed",
          "title": "should handle all possible vulnerability structures",
          "duration": 0.2917050000000927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection TDD - File Extraction from Validation Data",
            "Vendor detection with proper types"
          ],
          "fullName": "Vendor Detection TDD - File Extraction from Validation Data Vendor detection with proper types should detect vendor files correctly",
          "status": "passed",
          "title": "should detect vendor files correctly",
          "duration": 0.14107800000010684,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966822,
      "endTime": 1759804966824.2917,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/vendor-detection-tdd.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse single file with single vulnerability",
          "status": "passed",
          "title": "should parse single file with single vulnerability",
          "duration": 0.9603759999999966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should parse multiple files with multiple vulnerabilities",
          "status": "passed",
          "title": "should parse multiple files with multiple vulnerabilities",
          "duration": 0.4719880000000103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle files with no vulnerabilities gracefully",
          "status": "passed",
          "title": "should handle files with no vulnerabilities gracefully",
          "duration": 0.18800500000008924,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle malformed issue body without crashing",
          "status": "passed",
          "title": "should handle malformed issue body without crashing",
          "duration": 0.12515499999994972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should extract vulnerability type correctly",
          "status": "passed",
          "title": "should extract vulnerability type correctly",
          "duration": 0.1482660000000351,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "parseIssueBody"
          ],
          "fullName": "IssueBodyParser parseIssueBody should handle special characters in file paths",
          "status": "passed",
          "title": "should handle special characters in file paths",
          "duration": 0.0721770000000106,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should replace unknown.js with actual filenames",
          "status": "passed",
          "title": "should replace unknown.js with actual filenames",
          "duration": 0.4631859999999506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should handle multiple vulnerabilities and match by line number",
          "status": "passed",
          "title": "should handle multiple vulnerabilities and match by line number",
          "duration": 0.264679000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueBodyParser",
            "enhanceValidationData"
          ],
          "fullName": "IssueBodyParser enhanceValidationData should preserve validation data that cannot be matched",
          "status": "passed",
          "title": "should preserve validation data that cannot be matched",
          "duration": 0.17968599999994694,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804966537,
      "endTime": 1759804966540.1797,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/utils/__tests__/issue-body-parser.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should parse JavaScript code successfully",
          "status": "passed",
          "title": "should parse JavaScript code successfully",
          "duration": 7.9365459999999075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Python code",
          "status": "passed",
          "title": "should fail to parse Python code",
          "duration": 1.076251000000184,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse Ruby code",
          "status": "passed",
          "title": "should fail to parse Ruby code",
          "duration": 0.7930299999998169,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Babel Parser Language Support"
          ],
          "fullName": "Babel Parser Language Support should fail to parse PHP code",
          "status": "passed",
          "title": "should fail to parse PHP code",
          "duration": 0.9363399999999729,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973344,
      "endTime": 1759804973354.9363,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/babel-parser-issue.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to reconstruct regex from serialized format",
          "status": "passed",
          "title": "should fail to reconstruct regex from serialized format",
          "duration": 0.5566200000000663,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle enhanced pattern response with serialized regex",
          "status": "passed",
          "title": "should fail to handle enhanced pattern response with serialized regex",
          "duration": 0.23788799999988441,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should demonstrate the need for regex flag mapping",
          "status": "passed",
          "title": "should demonstrate the need for regex flag mapping",
          "duration": 0.5428850000000693,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle nested regex in AST rules",
          "status": "passed",
          "title": "should fail to handle nested regex in AST rules",
          "duration": 0.2073600000001079,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Phase 2.1: Failing tests for regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Phase 2.1: Failing tests for regex reconstruction should fail to handle regex in context rules",
          "status": "passed",
          "title": "should fail to handle regex in context rules",
          "duration": 0.13671899999985726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should correctly reconstruct regex from serialized format",
          "status": "passed",
          "title": "should correctly reconstruct regex from serialized format",
          "duration": 0.04896499999995285,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction",
            "Expected behavior after implementation"
          ],
          "fullName": "Pattern API Regex Reconstruction Expected behavior after implementation should handle complex patterns with multiple regex objects",
          "status": "passed",
          "title": "should handle complex patterns with multiple regex objects",
          "duration": 0.046443999999837615,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973269,
      "endTime": 1759804973271.2073,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-regex-reconstruction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint should call /api/v1/ast/validate NOT /ast/validate",
          "status": "passed",
          "title": "should call /api/v1/ast/validate NOT /ast/validate",
          "duration": 0.9349220000001424,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "AST validation endpoint"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression AST validation endpoint fixed implementation correctly calls /api/v1/ast/validate",
          "status": "passed",
          "title": "fixed implementation correctly calls /api/v1/ast/validate",
          "duration": 0.43170899999995527,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "API request format"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression API request format should send correct payload format for validation",
          "status": "passed",
          "title": "should send correct payload format for validation",
          "duration": 0.41900600000008126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle 404 gracefully and return null",
          "status": "passed",
          "title": "should handle 404 gracefully and return null",
          "duration": 0.34470200000009754,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Validation Endpoint Regression",
            "Error handling"
          ],
          "fullName": "IssueEnricher - Validation Endpoint Regression Error handling should handle network errors gracefully",
          "status": "passed",
          "title": "should handle network errors gracefully",
          "duration": 1.3678290000000288,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueEnricher - Fixed Implementation"
          ],
          "fullName": "IssueEnricher - Fixed Implementation should successfully validate when using correct endpoint",
          "status": "passed",
          "title": "should successfully validate when using correct endpoint",
          "duration": 0.5357440000000224,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973076,
      "endTime": 1759804973080.5356,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/validation/enricher.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #610: API endpoint mismatch"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #610: API endpoint mismatch should use /api/v1/vulnerabilities/validate as primary endpoint",
          "status": "passed",
          "title": "should use /api/v1/vulnerabilities/validate as primary endpoint",
          "duration": 0.7885019999998804,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should return vulnerability validation results not empty array",
          "status": "passed",
          "title": "should return vulnerability validation results not empty array",
          "duration": 0.8743939999999384,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Issue #617: Validation returning actual results"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Issue #617: Validation returning actual results should handle NoSQL injection with $where correctly",
          "status": "passed",
          "title": "should handle NoSQL injection with $where correctly",
          "duration": 0.5436230000000251,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Cache functionality regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Cache functionality regression should include cache stats in response",
          "status": "passed",
          "title": "should include cache stats in response",
          "duration": 0.36604800000009163,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should provide clear error message when API key is invalid",
          "status": "passed",
          "title": "should provide clear error message when API key is invalid",
          "duration": 0.318903999999975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Regression: Validation Endpoint Compatibility",
            "Error handling regression"
          ],
          "fullName": "Regression: Validation Endpoint Compatibility Error handling regression should handle malformed repository names gracefully",
          "status": "passed",
          "title": "should handle malformed repository names gracefully",
          "duration": 0.22374100000001818,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "E2E Regression: Full validation flow"
          ],
          "fullName": "E2E Regression: Full validation flow should complete validation workflow successfully",
          "status": "passed",
          "title": "should complete validation workflow successfully",
          "duration": 0.1725690000000668,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972678,
      "endTime": 1759804972681.3188,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/validation-endpoint.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should use AST validation when enabled and API key is provided",
          "status": "passed",
          "title": "should use AST validation when enabled and API key is provided",
          "duration": 3.5978000000000065,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should skip AST validation when disabled",
          "status": "passed",
          "title": "should skip AST validation when disabled",
          "duration": 1.270059000000174,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should skip AST validation when no API key is provided",
          "status": "passed",
          "title": "should skip AST validation when no API key is provided",
          "duration": 1.4943000000000666,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RepositoryScanner with AST Validation"
          ],
          "fullName": "RepositoryScanner with AST Validation should provide file contents to AST validator",
          "status": "passed",
          "title": "should provide file contents to AST validator",
          "duration": 1.1770050000000083,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972718,
      "endTime": 1759804972726.177,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/scanner/repository-scanner-ast.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect files mentioned without quotes",
          "status": "passed",
          "title": "should detect files mentioned without quotes",
          "duration": 0.8443150000000514,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect common auth files mentioned casually",
          "status": "passed",
          "title": "should detect common auth files mentioned casually",
          "duration": 0.29584799999997813,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Solution:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Solution:\" keyword",
          "duration": 0.2295480000000225,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should extract approach from \"Fix:\" keyword",
          "status": "passed",
          "title": "should extract approach from \"Fix:\" keyword",
          "duration": 0.2139870000000883,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should use whole response as approach if no keywords found",
          "status": "passed",
          "title": "should use whole response as approach if no keywords found",
          "duration": 0.22939599999995153,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should detect multiple file types",
          "status": "passed",
          "title": "should detect multiple file types",
          "duration": 0.25600699999995413,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle responses with \"To fix this\" keyword",
          "status": "passed",
          "title": "should handle responses with \"To fix this\" keyword",
          "duration": 0.27363000000013926,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should still fail if response is too short",
          "status": "passed",
          "title": "should still fail if response is too short",
          "duration": 0.26952699999992547,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Improved Analyzer Parsing"
          ],
          "fullName": "Improved Analyzer Parsing should handle mixed format responses",
          "status": "passed",
          "title": "should handle mixed format responses",
          "duration": 0.3705579999998463,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973255,
      "endTime": 1759804973258.3706,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/analyzer-parsing.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should initialize Claude Code adapter",
          "status": "passed",
          "title": "should initialize Claude Code adapter",
          "duration": 0.8937410000000909,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should generate solution with Claude Code when available",
          "status": "passed",
          "title": "should generate solution with Claude Code when available",
          "duration": 2.0475300000000516,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should fall back gracefully when Claude Code is not available",
          "status": "passed",
          "title": "should fall back gracefully when Claude Code is not available",
          "duration": 0.6822050000000672,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should handle errors gracefully",
          "status": "passed",
          "title": "should handle errors gracefully",
          "duration": 0.9867580000000089,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 1.2843629999999848,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Integration Tests"
          ],
          "fullName": "Claude Code Integration Tests should integrate with standard AI client",
          "status": "passed",
          "title": "should integrate with standard AI client",
          "duration": 0.26988200000005236,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972652,
      "endTime": 1759804972658.2844,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-code-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass test results to adapter on first attempt",
          "status": "passed",
          "title": "should pass test results to adapter on first attempt",
          "duration": 21.32421599999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should pass validation context on retry after failed validation",
          "status": "passed",
          "title": "should pass validation context on retry after failed validation",
          "duration": 0.6970519999999851,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Processor Prompt Integration"
          ],
          "fullName": "Git-based Processor Prompt Integration should enhance issue context with test failure info on retry",
          "status": "passed",
          "title": "should enhance issue context with test failure info on retry",
          "duration": 8.258019000000104,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973179,
      "endTime": 1759804973209.258,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-prompt-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "status": "passed",
          "title": "should create and pass credential manager to EnhancedClaudeCodeAdapter when using vended credentials",
          "duration": 2.3034540000001016,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when useVendedCredentials is false",
          "status": "passed",
          "title": "should not create credential manager when useVendedCredentials is false",
          "duration": 1.389519000000064,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should not create credential manager when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not create credential manager when rsolvApiKey is missing",
          "duration": 0.944039999999859,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Credential Manager Passing"
          ],
          "fullName": "Unified Processor Credential Manager Passing should handle credential manager creation errors gracefully",
          "status": "passed",
          "title": "should handle credential manager creation errors gracefully",
          "duration": 1.0759259999999813,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973004,
      "endTime": 1759804973010.076,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/unified-processor-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt adds patterns to avoid from negative feedback",
          "status": "passed",
          "title": "adds patterns to avoid from negative feedback",
          "duration": 0.7380170000001272,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt returns the original prompt when there are no patterns",
          "status": "passed",
          "title": "returns the original prompt when there are no patterns",
          "duration": 0.2539919999999256,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "enhancePrompt"
          ],
          "fullName": "PromptEnhancer enhancePrompt includes examples of successful solutions",
          "status": "passed",
          "title": "includes examples of successful solutions",
          "duration": 0.1953640000001542,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext returns a valid enhancement context for a given issue",
          "status": "passed",
          "title": "returns a valid enhancement context for a given issue",
          "duration": 1.9254040000000714,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PromptEnhancer",
            "generateEnhancementContext"
          ],
          "fullName": "PromptEnhancer generateEnhancementContext handles errors gracefully",
          "status": "passed",
          "title": "handles errors gracefully",
          "duration": 4.254065000000082,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973041,
      "endTime": 1759804973049.2542,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/enhancer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should execute mitigation with validation data from prior phase",
          "status": "passed",
          "title": "should execute mitigation with validation data from prior phase",
          "duration": 164.27542100000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should handle missing validation data gracefully",
          "status": "passed",
          "title": "should handle missing validation data gracefully",
          "duration": 5.646658000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Basic Execution"
          ],
          "fullName": "Mitigation-Only Mode Basic Execution should retrieve validation data from PhaseDataClient if not provided",
          "status": "passed",
          "title": "should retrieve validation data from PhaseDataClient if not provided",
          "duration": 5.177209000000062,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should apply fix using GitBasedClaudeCodeAdapter",
          "status": "passed",
          "title": "should apply fix using GitBasedClaudeCodeAdapter",
          "duration": 7.3317859999999655,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should verify tests pass after fix (GREEN phase)",
          "status": "passed",
          "title": "should verify tests pass after fix (GREEN phase)",
          "duration": 4.800612000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should retry fix if tests fail",
          "status": "passed",
          "title": "should retry fix if tests fail",
          "duration": 5.595071000000075,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Fix Application"
          ],
          "fullName": "Mitigation-Only Mode Fix Application should refactor code to match codebase style",
          "status": "passed",
          "title": "should refactor code to match codebase style",
          "duration": 4.494652999999971,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should create educational PR with test results",
          "status": "passed",
          "title": "should create educational PR with test results",
          "duration": 4.217356999999993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should include before/after code in PR description",
          "status": "passed",
          "title": "should include before/after code in PR description",
          "duration": 4.342721999999981,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "PR Creation"
          ],
          "fullName": "Mitigation-Only Mode PR Creation should add security education context to PR",
          "status": "passed",
          "title": "should add security education context to PR",
          "duration": 4.1782850000000735,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle multiple issues in batch",
          "status": "skipped",
          "title": "should handle multiple issues in batch",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Multiple Issues"
          ],
          "fullName": "Mitigation-Only Mode Multiple Issues should handle partial failures gracefully",
          "status": "skipped",
          "title": "should handle partial failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle missing AI adapter gracefully",
          "status": "passed",
          "title": "should handle missing AI adapter gracefully",
          "duration": 4.778626000000031,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should handle test execution failures",
          "status": "passed",
          "title": "should handle test execution failures",
          "duration": 3.6652939999999035,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Mitigation-Only Mode",
            "Error Handling"
          ],
          "fullName": "Mitigation-Only Mode Error Handling should timeout if fix takes too long",
          "status": "passed",
          "title": "should timeout if fix takes too long",
          "duration": 203.75374899999997,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972121,
      "endTime": 1759804972543.7537,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/mitigation-only-mode.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests PhaseExecutor has all decomposed methods",
          "status": "skipped",
          "title": "PhaseExecutor has all decomposed methods",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeScanForIssue returns correct structure",
          "status": "skipped",
          "title": "executeScanForIssue returns correct structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeValidateForIssue accepts scan data",
          "status": "skipped",
          "title": "executeValidateForIssue accepts scan data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeMitigateForIssue accepts scan and validation data",
          "status": "skipped",
          "title": "executeMitigateForIssue accepts scan and validation data",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests executeThreePhaseForIssue coordinates all phases",
          "status": "skipped",
          "title": "executeThreePhaseForIssue coordinates all phases",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Phase data flows between phases correctly",
          "status": "skipped",
          "title": "Phase data flows between phases correctly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Aborts if scan determines issue cannot be fixed",
          "status": "skipped",
          "title": "Aborts if scan determines issue cannot be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase Decomposition - Simple Tests"
          ],
          "fullName": "Phase Decomposition - Simple Tests Helper methods are accessible",
          "status": "skipped",
          "title": "Helper methods are accessible",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804971293,
      "endTime": 1759804971293,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-decomposition-simple.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 1: Scan (Already Working)"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 1: Scan (Already Working) should mark vulnerabilities in vendor files with isVendor flag",
          "status": "skipped",
          "title": "should mark vulnerabilities in vendor files with isVendor flag",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 2: Validation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 2: Validation - Vendor File Filtering should mark vendor file vulnerabilities as VENDORED, not FALSE_POSITIVE",
          "status": "skipped",
          "title": "should mark vendor file vulnerabilities as VENDORED, not FALSE_POSITIVE",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 2: Validation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 2: Validation - Vendor File Filtering should skip test generation for vendor files",
          "status": "skipped",
          "title": "should skip test generation for vendor files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 3: Mitigation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 3: Mitigation - Vendor File Filtering should not generate fixes for vendor files",
          "status": "skipped",
          "title": "should not generate fixes for vendor files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Phase 3: Mitigation - Vendor File Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Phase 3: Mitigation - Vendor File Filtering should exclude vendor files from fix generation even if mixed with app files",
          "status": "skipped",
          "title": "should exclude vendor files from fix generation even if mixed with app files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Integration: End-to-End Vendor Filtering"
          ],
          "fullName": "Vendor Filtering Across All Phases Integration: End-to-End Vendor Filtering should handle vendor files correctly through all phases",
          "status": "skipped",
          "title": "should handle vendor files correctly through all phases",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Vendor Detection Helper Functions"
          ],
          "fullName": "Vendor Filtering Across All Phases Vendor Detection Helper Functions should extract files from various issue formats",
          "status": "skipped",
          "title": "should extract files from various issue formats",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Filtering Across All Phases",
            "Vendor Detection Helper Functions"
          ],
          "fullName": "Vendor Filtering Across All Phases Vendor Detection Helper Functions should correctly identify vendor patterns",
          "status": "skipped",
          "title": "should correctly identify vendor patterns",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804971293,
      "endTime": 1759804971293,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/vendor-filtering-all-phases.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should correlate vulnerabilities with known CVE entries",
          "status": "passed",
          "title": "should correlate vulnerabilities with known CVE entries",
          "duration": 11.343089999999847,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should map CVE severity scores to our risk levels",
          "status": "passed",
          "title": "should map CVE severity scores to our risk levels",
          "duration": 0.4937529999999697,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Correlation"
          ],
          "fullName": "CveCorrelator CVE Database Correlation should handle multiple vulnerability types",
          "status": "passed",
          "title": "should handle multiple vulnerability types",
          "duration": 10.815583999999944,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-89 (SQL Injection)",
          "status": "passed",
          "title": "should find CVEs related to CWE-89 (SQL Injection)",
          "duration": 0.7659049999999752,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should find CVEs related to CWE-79 (XSS)",
          "status": "passed",
          "title": "should find CVEs related to CWE-79 (XSS)",
          "duration": 0.1831720000000132,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CWE to CVE Mapping"
          ],
          "fullName": "CveCorrelator CWE to CVE Mapping should handle unknown CWE IDs gracefully",
          "status": "passed",
          "title": "should handle unknown CWE IDs gracefully",
          "duration": 10.403503,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should enhance vulnerability risk assessment with CVE data",
          "status": "passed",
          "title": "should enhance vulnerability risk assessment with CVE data",
          "duration": 0.6074700000001485,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Risk Assessment Enhancement"
          ],
          "fullName": "CveCorrelator Risk Assessment Enhancement should calculate appropriate enhanced risk levels",
          "status": "passed",
          "title": "should calculate appropriate enhanced risk levels",
          "duration": 0.20320399999991423,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should have access to CVE database with recent entries",
          "status": "passed",
          "title": "should have access to CVE database with recent entries",
          "duration": 0.6913909999998396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "CVE Database Management"
          ],
          "fullName": "CveCorrelator CVE Database Management should provide CVE search capabilities",
          "status": "passed",
          "title": "should provide CVE search capabilities",
          "duration": 0.4064450000000761,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should generate CVE-enhanced security reports",
          "status": "passed",
          "title": "should generate CVE-enhanced security reports",
          "duration": 0.4556609999999637,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Integration with Security Analysis"
          ],
          "fullName": "CveCorrelator Integration with Security Analysis should provide actionable CVE-based recommendations",
          "status": "passed",
          "title": "should provide actionable CVE-based recommendations",
          "duration": 0.38629100000002836,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should cache CVE lookups for better performance",
          "status": "passed",
          "title": "should cache CVE lookups for better performance",
          "duration": 10.646624999999858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "CveCorrelator",
            "Performance and Caching"
          ],
          "fullName": "CveCorrelator Performance and Caching should handle large vulnerability sets efficiently",
          "status": "passed",
          "title": "should handle large vulnerability sets efficiently",
          "duration": 0.6493930000001455,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972748,
      "endTime": 1759804972796.6494,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/cve-correlator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Ruby SQL injection with factory patterns",
          "status": "passed",
          "title": "should detect Ruby SQL injection with factory patterns",
          "duration": 1.7686530000000857,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python SQL injection",
          "status": "passed",
          "title": "should detect Python SQL injection",
          "duration": 1.170123999999987,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should detect Python pickle deserialization",
          "status": "passed",
          "title": "should detect Python pickle deserialization",
          "duration": 0.7146020000000135,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should handle multiple patterns correctly",
          "status": "passed",
          "title": "should handle multiple patterns correctly",
          "duration": 1.6225879999999506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityDetectorV2 Pattern Loading"
          ],
          "fullName": "SecurityDetectorV2 Pattern Loading should not have regex serialization issues",
          "status": "passed",
          "title": "should not have regex serialization issues",
          "duration": 1.9271790000000237,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973298,
      "endTime": 1759804973304.9272,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/detector-v2-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in backticks",
          "status": "passed",
          "title": "should detect file paths in backticks",
          "duration": 0.9319399999999405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in Affected Files section",
          "status": "passed",
          "title": "should detect file paths in Affected Files section",
          "duration": 0.5924509999999827,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths with File: prefix in code blocks",
          "status": "passed",
          "title": "should detect file paths with File: prefix in code blocks",
          "duration": 0.4419900000000325,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect file paths in plain comments within code blocks",
          "status": "passed",
          "title": "should detect file paths in plain comments within code blocks",
          "duration": 0.328755000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "parseIssueForFiles"
          ],
          "fullName": "ValidationEnricher parseIssueForFiles should detect various file path comment formats",
          "status": "passed",
          "title": "should detect various file path comment formats",
          "duration": 1.1351130000000467,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect SQL injection vulnerability in file content",
          "status": "passed",
          "title": "should detect SQL injection vulnerability in file content",
          "duration": 2.0144890000001396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "analyzeFile"
          ],
          "fullName": "ValidationEnricher analyzeFile should detect XSS vulnerability in file content",
          "status": "passed",
          "title": "should detect XSS vulnerability in file content",
          "duration": 1.2009679999998752,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect SQL injection from issue title",
          "status": "passed",
          "title": "should detect SQL injection from issue title",
          "duration": 0.39106999999989966,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationEnricher",
            "extractVulnerabilityType"
          ],
          "fullName": "ValidationEnricher extractVulnerabilityType should detect XSS from issue title",
          "status": "passed",
          "title": "should detect XSS from issue title",
          "duration": 0.19615999999996347,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973095,
      "endTime": 1759804973103.196,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/validation/__tests__/enricher.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should generate correct JQL for both rsolv and autofix labels",
          "status": "passed",
          "title": "should generate correct JQL for both rsolv and autofix labels",
          "duration": 2.8426370000001953,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search should handle custom label configurations",
          "status": "passed",
          "title": "should handle custom label configurations",
          "duration": 0.3859310000000278,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Jira Label Search"
          ],
          "fullName": "Jira Label Search demonstrates JQL queries for different scenarios",
          "status": "passed",
          "title": "demonstrates JQL queries for different scenarios",
          "duration": 0.3990119999998569,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973331,
      "endTime": 1759804973334.399,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/label-search.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should include specific vulnerability details when provided",
          "status": "skipped",
          "title": "should include specific vulnerability details when provided",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should forbid modifying test files explicitly",
          "status": "skipped",
          "title": "should forbid modifying test files explicitly",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter - Enhanced Prompts",
            "constructPromptWithTestContext with specific vulnerabilities"
          ],
          "fullName": "GitBasedClaudeCodeAdapter - Enhanced Prompts constructPromptWithTestContext with specific vulnerabilities should group vulnerabilities by file",
          "status": "skipped",
          "title": "should group vulnerabilities by file",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804971293,
      "endTime": 1759804971293,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should store and retrieve validation data with correct structure",
          "status": "passed",
          "title": "should store and retrieve validation data with correct structure",
          "duration": 4.607511999999815,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Phase Data Persistence"
          ],
          "fullName": "PhaseExecutor - Phase Data Persistence should handle the actual structure returned by retrievePhaseResults",
          "status": "passed",
          "title": "should handle the actual structure returned by retrievePhaseResults",
          "duration": 1.6095349999998234,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804973235,
      "endTime": 1759804973241.6096,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/phase-data-persistence.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect eval injection",
          "status": "passed",
          "title": "should detect eval injection",
          "duration": 2.101697999999942,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect SQL injection",
          "status": "passed",
          "title": "should detect SQL injection",
          "duration": 0.9170349999999416,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "JavaScript vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection JavaScript vulnerability patterns should detect XSS vulnerabilities",
          "status": "passed",
          "title": "should detect XSS vulnerabilities",
          "duration": 0.6894090000000688,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect Python eval usage",
          "status": "passed",
          "title": "should detect Python eval usage",
          "duration": 0.641901000000189,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "Python vulnerability patterns"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection Python vulnerability patterns should detect command injection",
          "status": "passed",
          "title": "should detect command injection",
          "duration": 0.6836909999999534,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "multi-language support"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection multi-language support should handle mixed language files",
          "status": "passed",
          "title": "should handle mixed language files",
          "duration": 0.9004860000000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should filter out false positives based on confidence",
          "status": "passed",
          "title": "should filter out false positives based on confidence",
          "duration": 0.5876889999999548,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Pattern Detection",
            "false positive filtering"
          ],
          "fullName": "ElixirASTAnalyzer - Pattern Detection false positive filtering should provide confidence scores",
          "status": "passed",
          "title": "should provide confidence scores",
          "duration": 0.5466460000000097,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804972694,
      "endTime": 1759804972701.5466,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-patterns.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback to regex detection when AST service is unavailable",
          "status": "skipped",
          "title": "should fallback to regex detection when AST service is unavailable",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST parsing times out",
          "status": "skipped",
          "title": "should fallback when AST parsing times out",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should fallback when AST returns parse errors",
          "status": "skipped",
          "title": "should fallback when AST returns parse errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should prefer AST results when available",
          "status": "skipped",
          "title": "should prefer AST results when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "fallback to regex when AST fails"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) fallback to regex when AST fails should handle mixed results (some AST, some fallback)",
          "status": "skipped",
          "title": "should handle mixed results (some AST, some fallback)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should lower confidence for regex-only detections",
          "status": "skipped",
          "title": "should lower confidence for regex-only detections",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode)",
            "confidence adjustment"
          ],
          "fullName": "AST Analyzer Fallback Strategy (Needs RFC-048 Test Mode) confidence adjustment should not double-count vulnerabilities detected by both methods",
          "status": "skipped",
          "title": "should not double-count vulnerabilities detected by both methods",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804971293,
      "endTime": 1759804971293,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/fallback-strategy.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should NOT enable enhanced context by default",
          "status": "passed",
          "title": "should NOT enable enhanced context by default",
          "duration": 3104.3396679999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced Context Default Behavior"
          ],
          "fullName": "Enhanced Context Default Behavior should enable enhanced context only when explicitly requested",
          "status": "passed",
          "title": "should enable enhanced context only when explicitly requested",
          "duration": 3411.6942200000003,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804976302,
      "endTime": 1759804982818.6943,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/enhanced-context-default.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 1: Diffie-Hellman Key Exchange (Most Secure)"
          ],
          "fullName": "AST Service Key Exchange Option 1: Diffie-Hellman Key Exchange (Most Secure) should establish shared secret using DH key exchange",
          "status": "passed",
          "title": "should establish shared secret using DH key exchange",
          "duration": 165.38158299999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 2: ECDH Key Exchange (Modern & Efficient)"
          ],
          "fullName": "AST Service Key Exchange Option 2: ECDH Key Exchange (Modern & Efficient) should establish shared secret using ECDH",
          "status": "passed",
          "title": "should establish shared secret using ECDH",
          "duration": 1.3911809999999605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Option 3: Pre-shared Key with Secure Transport"
          ],
          "fullName": "AST Service Key Exchange Option 3: Pre-shared Key with Secure Transport should use client-provided key over TLS (simplest secure option)",
          "status": "passed",
          "title": "should use client-provided key over TLS (simplest secure option)",
          "duration": 0.6420480000001589,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Service Key Exchange",
            "Current Implementation Issues"
          ],
          "fullName": "AST Service Key Exchange Current Implementation Issues should fail when server uses different key than client",
          "status": "passed",
          "title": "should fail when server uses different key than client",
          "duration": 0.47791899999992893,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975959,
      "endTime": 1759804976127.642,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/key-exchange.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show detector uses client-side ASTPatternInterpreter",
          "status": "passed",
          "title": "should show detector uses client-side ASTPatternInterpreter",
          "duration": 0.791845000000194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Architecture Tests - Confirm Current State"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Architecture Tests - Confirm Current State should show we need ElixirASTAnalyzer for server-side AST",
          "status": "passed",
          "title": "should show we need ElixirASTAnalyzer for server-side AST",
          "duration": 0.625912999999855,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should demonstrate that Python detection requires server-side AST",
          "status": "passed",
          "title": "should demonstrate that Python detection requires server-side AST",
          "duration": 0.4735450000000583,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Language Support Tests - Without Actually Parsing"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Language Support Tests - Without Actually Parsing should show that multi-language support is needed",
          "status": "passed",
          "title": "should show that multi-language support is needed",
          "duration": 0.13997399999993831,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should detect JS vulnerabilities with current system",
          "status": "passed",
          "title": "should detect JS vulnerabilities with current system",
          "duration": 5.113109000000122,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Safe Detection Tests - Only JS/TS"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Safe Detection Tests - Only JS/TS should NOT attempt to parse non-JS languages with Babel",
          "status": "passed",
          "title": "should NOT attempt to parse non-JS languages with Babel",
          "duration": 0.431231999999909,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should require server-side AST for accurate multi-language detection",
          "status": "passed",
          "title": "should require server-side AST for accurate multi-language detection",
          "duration": 0.20567899999991823,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Integration - Safe RED Phase Tests",
            "Server-Side AST Requirements"
          ],
          "fullName": "Server-Side AST Integration - Safe RED Phase Tests Server-Side AST Requirements should show ElixirASTAnalyzer can handle multiple languages",
          "status": "passed",
          "title": "should show ElixirASTAnalyzer can handle multiple languages",
          "duration": 0.13394899999980225,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975942,
      "endTime": 1759804975950.2056,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-integration-safe.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "status": "skipped",
          "title": "FAILS: detector should use ElixirASTAnalyzer instead of ASTPatternInterpreter",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "What We Have vs What We Need"
          ],
          "fullName": "RED Phase - Server AST Integration Needed What We Have vs What We Need FAILS: detector should support multiple languages through server AST",
          "status": "skipped",
          "title": "FAILS: detector should support multiple languages through server AST",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Multi-Language Detection Requirements"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Multi-Language Detection Requirements FAILS: should detect vulnerabilities in Python code",
          "status": "skipped",
          "title": "FAILS: should detect vulnerabilities in Python code",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RED Phase - Server AST Integration Needed",
            "Integration Point"
          ],
          "fullName": "RED Phase - Server AST Integration Needed Integration Point FAILS: detector constructor should accept ElixirASTAnalyzer",
          "status": "skipped",
          "title": "FAILS: detector constructor should accept ElixirASTAnalyzer",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974073,
      "endTime": 1759804974073,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-red-phase.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should reconstruct regex from serialized format",
          "status": "passed",
          "title": "should reconstruct regex from serialized format",
          "duration": 0.8379439999999931,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle multiple regex with different flags",
          "status": "passed",
          "title": "should handle multiple regex with different flags",
          "duration": 0.3736659999999574,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in AST rules",
          "status": "passed",
          "title": "should handle regex in AST rules",
          "duration": 0.21708699999999226,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle regex in context rules",
          "status": "passed",
          "title": "should handle regex in context rules",
          "duration": 0.2703910000000178,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle deeply nested regex objects",
          "status": "passed",
          "title": "should handle deeply nested regex objects",
          "duration": 0.2313810000000558,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern API Regex Reconstruction Success",
            "Phase 2.2: Successful regex reconstruction"
          ],
          "fullName": "Pattern API Regex Reconstruction Success Phase 2.2: Successful regex reconstruction should handle mixed string and regex patterns gracefully",
          "status": "passed",
          "title": "should handle mixed string and regex patterns gracefully",
          "duration": 0.3472160000000031,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974659,
      "endTime": 1759804974662.3472,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-regex-reconstruction-success.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return JavaScript patterns",
          "status": "passed",
          "title": "should return JavaScript patterns",
          "duration": 2.4096320000000446,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return TypeScript patterns (same as JavaScript)",
          "status": "passed",
          "title": "should return TypeScript patterns (same as JavaScript)",
          "duration": 1.3824599999999805,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should return empty array for unsupported language",
          "status": "passed",
          "title": "should return empty array for unsupported language",
          "duration": 0.41502200000002176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "LocalPatternSource getPatternsByLanguage should handle case-insensitive language names",
          "status": "passed",
          "title": "should handle case-insensitive language names",
          "duration": 0.529954000000032,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns of specific type",
          "status": "passed",
          "title": "should return patterns of specific type",
          "duration": 0.2953630000000089,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getPatternsByType"
          ],
          "fullName": "LocalPatternSource getPatternsByType should return patterns from all languages",
          "status": "passed",
          "title": "should return patterns from all languages",
          "duration": 0.16077300000000605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "LocalPatternSource",
            "getAllPatterns"
          ],
          "fullName": "LocalPatternSource getAllPatterns should return minimal fallback patterns",
          "status": "passed",
          "title": "should return minimal fallback patterns",
          "duration": 0.16314899999997579,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should fetch patterns from API",
          "status": "passed",
          "title": "should fetch patterns from API",
          "duration": 1.1519979999999919,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getPatternsByLanguage"
          ],
          "fullName": "ApiPatternSource getPatternsByLanguage should handle API errors",
          "status": "passed",
          "title": "should handle API errors",
          "duration": 1.0335479999999961,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should fetch patterns for all supported languages",
          "status": "passed",
          "title": "should fetch patterns for all supported languages",
          "duration": 0.8854440000000068,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ApiPatternSource",
            "getAllPatterns"
          ],
          "fullName": "ApiPatternSource getAllPatterns should continue fetching even if some languages fail",
          "status": "passed",
          "title": "should continue fetching even if some languages fail",
          "duration": 0.7466369999999642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should use API source when available",
          "status": "passed",
          "title": "should use API source when available",
          "duration": 0.3868709999999851,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "HybridPatternSource"
          ],
          "fullName": "HybridPatternSource should fall back to local source on API error",
          "status": "passed",
          "title": "should fall back to local source on API error",
          "duration": 0.2920689999999695,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "status": "passed",
          "title": "should create LocalPatternSource when USE_LOCAL_PATTERNS is true",
          "duration": 1.052377999999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create HybridPatternSource when API key is provided",
          "status": "passed",
          "title": "should create HybridPatternSource when API key is provided",
          "duration": 0.1897639999999683,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should create LocalPatternSource when no API key is provided",
          "status": "passed",
          "title": "should create LocalPatternSource when no API key is provided",
          "duration": 0.10811999999998534,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "createPatternSource"
          ],
          "fullName": "createPatternSource should pass API URL to HybridPatternSource",
          "status": "passed",
          "title": "should pass API URL to HybridPatternSource",
          "duration": 0.1094829999999547,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974384,
      "endTime": 1759804974396.1897,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-source.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create singleton instance",
          "status": "passed",
          "title": "should create singleton instance",
          "duration": 0.574188999999933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should respect log level configuration",
          "status": "passed",
          "title": "should respect log level configuration",
          "duration": 0.3208379999996396,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should create log directory when enabled",
          "status": "passed",
          "title": "should create log directory when enabled",
          "duration": 0.7776269999999386,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log conversation to file",
          "status": "passed",
          "title": "should log conversation to file",
          "duration": 1.517475000000104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ConversationLogger"
          ],
          "fullName": "ConversationLogger should log summary when enabled",
          "status": "passed",
          "title": "should log summary when enabled",
          "duration": 12.743879000000106,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804976213,
      "endTime": 1759804976229.744,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ai/conversation-logger.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should provide at least 25 patterns per major language",
          "status": "failed",
          "title": "should provide at least 25 patterns per major language",
          "duration": 2.763198000000102,
          "failureMessages": [
            "AssertionError: javascript should have at least 25 patterns: expected 12 to be greater than or equal to 25\n    at /home/dylan/dev/rsolv/RSOLV-action/test/regression/pattern-availability.test.ts:40:93\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "when RSOLV_API_KEY is available"
          ],
          "fullName": "Pattern Availability Regression Test when RSOLV_API_KEY is available should cover all critical vulnerability types",
          "status": "failed",
          "title": "should cover all critical vulnerability types",
          "duration": 3.5673730000000887,
          "failureMessages": [
            "AssertionError: sql_injection should have patterns: expected 0 to be greater than 0\n    at /home/dylan/dev/rsolv/RSOLV-action/test/regression/pattern-availability.test.ts:61:65\n    at processTicksAndRejections (node:internal/process/task_queues:105:5)\n    at file:///home/dylan/dev/rsolv/RSOLV-action/node_modules/@vitest/runner/dist/chunk-hooks.js:752:20"
          ],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should have at least 10 JavaScript patterns in minimal set",
          "status": "passed",
          "title": "should have at least 10 JavaScript patterns in minimal set",
          "duration": 0.8056600000004437,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "minimal patterns baseline (always runs)"
          ],
          "fullName": "Pattern Availability Regression Test minimal patterns baseline (always runs) should detect pattern count degradation",
          "status": "passed",
          "title": "should detect pattern count degradation",
          "duration": 0.3305350000000544,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have valid regex patterns",
          "status": "passed",
          "title": "should have valid regex patterns",
          "duration": 7.439863999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Pattern Availability Regression Test",
            "pattern quality checks"
          ],
          "fullName": "Pattern Availability Regression Test pattern quality checks should have unique pattern IDs",
          "status": "passed",
          "title": "should have unique pattern IDs",
          "duration": 0.9390069999999469,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804976139,
      "endTime": 1759804976155.939,
      "status": "failed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/regression/pattern-availability.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for Anthropic when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for Anthropic when vending is disabled",
          "duration": 1.3348290000003544,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should use direct API key for OpenAI when vending is disabled",
          "status": "passed",
          "title": "should use direct API key for OpenAI when vending is disabled",
          "duration": 0.5073590000001786,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 1.9169170000000122,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client Direct API Integration"
          ],
          "fullName": "AI Client Direct API Integration should throw error for missing API key",
          "status": "passed",
          "title": "should throw error for missing API key",
          "duration": 0.3197870000003604,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804976177,
      "endTime": 1759804976181.3198,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/client-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should detect security issues and enable security analysis mode",
          "status": "passed",
          "title": "should detect security issues and enable security analysis mode",
          "duration": 204.65059999999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should include security analysis data when processing security issues",
          "status": "passed",
          "title": "should include security analysis data when processing security issues",
          "duration": 202.17909800000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security-Aware Processor Integration"
          ],
          "fullName": "Security-Aware Processor Integration should respect enableSecurityAnalysis configuration flag",
          "status": "passed",
          "title": "should respect enableSecurityAnalysis configuration flag",
          "duration": 201.98056399999996,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975198,
      "endTime": 1759804975806.9805,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/processor-security-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set up container when Docker is available",
          "status": "passed",
          "title": "should set up container when Docker is available",
          "duration": 1.217443000000003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should disable containers when Docker is not available",
          "status": "passed",
          "title": "should disable containers when Docker is not available",
          "duration": 1.7400170000000799,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should skip setup if containers are already disabled",
          "status": "passed",
          "title": "should skip setup if containers are already disabled",
          "duration": 0.4198519999999917,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate container configuration",
          "status": "passed",
          "title": "should validate container configuration",
          "duration": 0.6659689999999046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate memory limit format",
          "status": "passed",
          "title": "should validate memory limit format",
          "duration": 0.5394390000001295,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate CPU limit format",
          "status": "passed",
          "title": "should validate CPU limit format",
          "duration": 0.8104789999999866,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should validate timeout value",
          "status": "passed",
          "title": "should validate timeout value",
          "duration": 0.644945000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should handle image pull failure in development mode",
          "status": "passed",
          "title": "should handle image pull failure in development mode",
          "duration": 0.439960999999812,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should throw on image pull failure in production mode",
          "status": "passed",
          "title": "should throw on image pull failure in production mode",
          "duration": 0.5889650000001438,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply strict security profile",
          "status": "passed",
          "title": "should apply strict security profile",
          "duration": 0.50678599999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should apply relaxed security profile",
          "status": "passed",
          "title": "should apply relaxed security profile",
          "duration": 0.35312599999997474,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should configure network restrictions",
          "status": "passed",
          "title": "should configure network restrictions",
          "duration": 0.37597299999993083,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Container Setup"
          ],
          "fullName": "Container Setup should set environment variables",
          "status": "passed",
          "title": "should set environment variables",
          "duration": 0.3847099999998136,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975905,
      "endTime": 1759804975914.3848,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/containers/__tests__/setup.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies positive sentiment correctly",
          "status": "passed",
          "title": "classifies positive sentiment correctly",
          "duration": 0.9267880000002151,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment classifies negative sentiment correctly",
          "status": "passed",
          "title": "classifies negative sentiment correctly",
          "duration": 0.4009969999997338,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentiment"
          ],
          "fullName": "FeedbackCollector analyzeSentiment defaults to neutral sentiment when text is ambiguous",
          "status": "passed",
          "title": "defaults to neutral sentiment when text is ambiguous",
          "duration": 0.2682579999996051,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns positive sentiment for approved reviews regardless of content",
          "status": "passed",
          "title": "returns positive sentiment for approved reviews regardless of content",
          "duration": 0.165990999999849,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview returns negative sentiment for change requests regardless of content",
          "status": "passed",
          "title": "returns negative sentiment for change requests regardless of content",
          "duration": 0.09223800000017945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "analyzeSentimentFromReview"
          ],
          "fullName": "FeedbackCollector analyzeSentimentFromReview analyzes comment content when review state is commented",
          "status": "passed",
          "title": "analyzes comment content when review state is commented",
          "duration": 0.11031499999990046,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook processes PR comment events correctly",
          "status": "passed",
          "title": "processes PR comment events correctly",
          "duration": 0.36203400000022157,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackCollector",
            "handleWebhook"
          ],
          "fullName": "FeedbackCollector handleWebhook returns null for irrelevant webhook events",
          "status": "passed",
          "title": "returns null for irrelevant webhook events",
          "duration": 0.6528960000000552,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804976198,
      "endTime": 1759804976200.6528,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/collector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly query Linear GraphQL API for labeled issues",
          "status": "skipped",
          "title": "should correctly query Linear GraphQL API for labeled issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should integrate with issue detector for multi-platform detection",
          "status": "skipped",
          "title": "should integrate with issue detector for multi-platform detection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should handle pagination for large result sets",
          "status": "skipped",
          "title": "should handle pagination for large result sets",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Programmatic Verification"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Programmatic Verification should correctly map repository information from issue description",
          "status": "skipped",
          "title": "should correctly map repository information from issue description",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should be triggered by GitHub Actions schedule",
          "status": "skipped",
          "title": "should be triggered by GitHub Actions schedule",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Polling Mechanism"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Polling Mechanism should handle concurrent platform checks",
          "status": "skipped",
          "title": "should handle concurrent platform checks",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should find issues with either autofix OR rsolv label",
          "status": "skipped",
          "title": "should find issues with either autofix OR rsolv label",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Linear Integration End-to-End - DISABLED",
            "Label-based Issue Detection"
          ],
          "fullName": "Linear Integration End-to-End - DISABLED Label-based Issue Detection should filter by team if teamId is provided",
          "status": "skipped",
          "title": "should filter by team if teamId is provided",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974073,
      "endTime": 1759804974073,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/platforms/linear/linear-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "RED Tests - Prove the problem exists"
          ],
          "fullName": "IssueCreator - max_issues limit RED Tests - Prove the problem exists should create all issues when max_issues is not specified",
          "status": "skipped",
          "title": "should create all issues when max_issues is not specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "RED Tests - Prove the problem exists"
          ],
          "fullName": "IssueCreator - max_issues limit RED Tests - Prove the problem exists should fail to limit issues when max_issues is set but not implemented",
          "status": "skipped",
          "title": "should fail to limit issues when max_issues is set but not implemented",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should respect max_issues limit when set to 3",
          "status": "skipped",
          "title": "should respect max_issues limit when set to 3",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should respect max_issues limit when set to 1",
          "status": "skipped",
          "title": "should respect max_issues limit when set to 1",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should handle max_issues of 0 by creating no issues",
          "status": "skipped",
          "title": "should handle max_issues of 0 by creating no issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "GREEN Tests - Verify the fix works"
          ],
          "fullName": "IssueCreator - max_issues limit GREEN Tests - Verify the fix works should handle max_issues larger than available groups",
          "status": "skipped",
          "title": "should handle max_issues larger than available groups",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should still respect createIssues flag when false",
          "status": "skipped",
          "title": "should still respect createIssues flag when false",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should maintain issue creation order (highest severity first)",
          "status": "skipped",
          "title": "should maintain issue creation order (highest severity first)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should log appropriate messages when limiting issues",
          "status": "skipped",
          "title": "should log appropriate messages when limiting issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should handle empty vulnerability groups array",
          "status": "skipped",
          "title": "should handle empty vulnerability groups array",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - max_issues limit",
            "REFACTOR Tests - Ensure functionality is preserved"
          ],
          "fullName": "IssueCreator - max_issues limit REFACTOR Tests - Ensure functionality is preserved should continue creating issues even if one fails",
          "status": "skipped",
          "title": "should continue creating issues even if one fails",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974073,
      "endTime": 1759804974073,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/scanner/__tests__/issue-creator-max-issues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should generate basic OWASP compliance report",
          "status": "passed",
          "title": "should generate basic OWASP compliance report",
          "duration": 0.7827790000001187,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should categorize vulnerabilities by OWASP category",
          "status": "passed",
          "title": "should categorize vulnerabilities by OWASP category",
          "duration": 0.2975619999999708,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "OWASP Compliance Report"
          ],
          "fullName": "ComplianceGenerator OWASP Compliance Report should calculate compliance status based on severity",
          "status": "passed",
          "title": "should calculate compliance status based on severity",
          "duration": 0.14659199999982775,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "SOC 2 Compliance Report"
          ],
          "fullName": "ComplianceGenerator SOC 2 Compliance Report should generate SOC 2 compliance report",
          "status": "passed",
          "title": "should generate SOC 2 compliance report",
          "duration": 0.24205400000005284,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should generate markdown compliance report",
          "status": "passed",
          "title": "should generate markdown compliance report",
          "duration": 0.2777290000001358,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ComplianceGenerator",
            "Report Generation"
          ],
          "fullName": "ComplianceGenerator Report Generation should handle empty vulnerability lists",
          "status": "passed",
          "title": "should handle empty vulnerability lists",
          "duration": 0.1848299999999199,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975871,
      "endTime": 1759804975873.2778,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/compliance.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for SQL injection",
          "status": "passed",
          "title": "should generate line-level explanation for SQL injection",
          "duration": 0.44942600000001676,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Line-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Line-Level Explanations should generate line-level explanation for XSS",
          "status": "passed",
          "title": "should generate line-level explanation for XSS",
          "duration": 0.14013599999998405,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should generate concept-level explanation for security concepts",
          "status": "passed",
          "title": "should generate concept-level explanation for security concepts",
          "duration": 0.4528890000000274,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Concept-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Concept-Level Explanations should include prevention methods and attack scenarios",
          "status": "passed",
          "title": "should include prevention methods and attack scenarios",
          "duration": 0.1507490000000189,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should generate business-level explanation with impact analysis",
          "status": "passed",
          "title": "should generate business-level explanation with impact analysis",
          "duration": 0.4508580000000393,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Business-Level Explanations"
          ],
          "fullName": "ThreeTierExplanationFramework Business-Level Explanations should calculate appropriate risk scores based on severity",
          "status": "passed",
          "title": "should calculate appropriate risk scores based on severity",
          "duration": 0.16051199999992605,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should generate complete explanation with all three tiers",
          "status": "passed",
          "title": "should generate complete explanation with all three tiers",
          "duration": 0.4440110000000459,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Complete Three-Tier Explanation"
          ],
          "fullName": "ThreeTierExplanationFramework Complete Three-Tier Explanation should organize explanations by vulnerability type",
          "status": "passed",
          "title": "should organize explanations by vulnerability type",
          "duration": 0.32119299999999384,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should format explanation as markdown",
          "status": "passed",
          "title": "should format explanation as markdown",
          "duration": 0.1886530000000448,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ThreeTierExplanationFramework",
            "Output Formatting"
          ],
          "fullName": "ThreeTierExplanationFramework Output Formatting should generate comprehensive markdown report",
          "status": "passed",
          "title": "should generate comprehensive markdown report",
          "duration": 14.487341000000015,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974710,
      "endTime": 1759804974727.4873,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/explanation-framework.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should authenticate successfully with valid credentials",
          "status": "passed",
          "title": "should authenticate successfully with valid credentials",
          "duration": 1.1920670000000086,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "authenticate"
          ],
          "fullName": "JiraAdapter authenticate should throw error on authentication failure",
          "status": "passed",
          "title": "should throw error on authentication failure",
          "duration": 1.2677810000000136,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should search issues with autofix label",
          "status": "passed",
          "title": "should search issues with autofix label",
          "duration": 1.5249860000000126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "searchIssues"
          ],
          "fullName": "JiraAdapter searchIssues should handle empty search results",
          "status": "passed",
          "title": "should handle empty search results",
          "duration": 0.4239279999999894,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "createComment"
          ],
          "fullName": "JiraAdapter createComment should add comment to issue",
          "status": "passed",
          "title": "should add comment to issue",
          "duration": 0.6133309999999597,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "addLink"
          ],
          "fullName": "JiraAdapter addLink should create remote link to GitHub PR",
          "status": "passed",
          "title": "should create remote link to GitHub PR",
          "duration": 0.48860799999999927,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "JiraAdapter",
            "updateIssueStatus"
          ],
          "fullName": "JiraAdapter updateIssueStatus should update issue status",
          "status": "passed",
          "title": "should update issue status",
          "duration": 0.4926690000000349,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974512,
      "endTime": 1759804974517.4927,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/jira/jira-adapter.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail when Claude only provides JSON without editing files",
          "status": "skipped",
          "title": "should fail when Claude only provides JSON without editing files",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "RED Phase - Current Prompt Failures"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness RED Phase - Current Prompt Failures should fail to create PR when files are not actually modified",
          "status": "skipped",
          "title": "should fail to create PR when files are not actually modified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should successfully edit files when prompt explicitly requires Edit tool usage",
          "status": "skipped",
          "title": "should successfully edit files when prompt explicitly requires Edit tool usage",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "GREEN Phase - Prompt Improvements"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness GREEN Phase - Prompt Improvements should validate that both Edit tools AND JSON are used",
          "status": "skipped",
          "title": "should validate that both Edit tools AND JSON are used",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should use concise but effective prompt structure",
          "status": "skipped",
          "title": "should use concise but effective prompt structure",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter Prompt Effectiveness",
            "REFACTOR Phase - Optimized Prompt"
          ],
          "fullName": "GitBasedClaudeCodeAdapter Prompt Effectiveness REFACTOR Phase - Optimized Prompt should maintain backward compatibility with existing adapters",
          "status": "skipped",
          "title": "should maintain backward compatibility with existing adapters",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974073,
      "endTime": 1759804974073,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git-prompt.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should process issue successfully with git-based approach",
          "status": "passed",
          "title": "should process issue successfully with git-based approach",
          "duration": 1.7404699999999593,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if repository has uncommitted changes",
          "status": "passed",
          "title": "should fail if repository has uncommitted changes",
          "duration": 0.8241749999999683,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should fail if issue cannot be fixed",
          "status": "passed",
          "title": "should fail if issue cannot be fixed",
          "duration": 0.4100309999998899,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Git-based Issue Processor"
          ],
          "fullName": "Git-based Issue Processor should use vended credentials when configured",
          "status": "passed",
          "title": "should use vended credentials when configured",
          "duration": 0.6554960000000847,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804975848,
      "endTime": 1759804975851.6555,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/git-based-processor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should store phase results successfully",
          "status": "passed",
          "title": "should store phase results successfully",
          "duration": 4.754457000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should include API key in headers",
          "status": "passed",
          "title": "should include API key in headers",
          "duration": 0.9402850000000171,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "storePhaseResults"
          ],
          "fullName": "PhaseDataClient storePhaseResults should fall back to local storage on API failure",
          "status": "passed",
          "title": "should fall back to local storage on API failure",
          "duration": 8.163230999999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should retrieve phase results successfully",
          "status": "passed",
          "title": "should retrieve phase results successfully",
          "duration": 1.4443579999999656,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should return null for 404 responses",
          "status": "passed",
          "title": "should return null for 404 responses",
          "duration": 0.5695420000000126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "retrievePhaseResults"
          ],
          "fullName": "PhaseDataClient retrievePhaseResults should fall back to local storage on API error",
          "status": "passed",
          "title": "should fall back to local storage on API error",
          "duration": 0.9947169999999801,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should validate allowed phase transitions",
          "status": "passed",
          "title": "should validate allowed phase transitions",
          "duration": 0.4391340000000241,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should reject transition if commit has changed",
          "status": "passed",
          "title": "should reject transition if commit has changed",
          "duration": 0.1733639999999923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should use GITHUB_SHA when git is not available (act/Docker scenario)",
          "status": "passed",
          "title": "should use GITHUB_SHA when git is not available (act/Docker scenario)",
          "duration": 0.16924899999997933,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseDataClient",
            "validatePhaseTransition"
          ],
          "fullName": "PhaseDataClient validatePhaseTransition should fallback to dummy SHA when neither git nor GITHUB_SHA available",
          "status": "passed",
          "title": "should fallback to dummy SHA when neither git nor GITHUB_SHA available",
          "duration": 0.3457509999999502,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974473,
      "endTime": 1759804974492.3457,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-data-client/__tests__/client.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFiles limit",
          "status": "passed",
          "title": "should respect maxFiles limit",
          "duration": 1.6976080000000024,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should exclude default patterns",
          "status": "passed",
          "title": "should exclude default patterns",
          "duration": 0.5600509999999872,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should filter by language when specified",
          "status": "passed",
          "title": "should filter by language when specified",
          "duration": 0.4301690000000349,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should respect maxFileSize",
          "status": "passed",
          "title": "should respect maxFileSize",
          "duration": 0.2948390000000245,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize changed files",
          "status": "passed",
          "title": "should prioritize changed files",
          "duration": 0.30577799999997524,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should prioritize security-relevant files",
          "status": "passed",
          "title": "should prioritize security-relevant files",
          "duration": 0.22564999999997326,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should deprioritize test files",
          "status": "passed",
          "title": "should deprioritize test files",
          "duration": 0.24102900000002592,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should include all file metadata",
          "status": "passed",
          "title": "should include all file metadata",
          "duration": 0.23780800000002955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should handle custom exclude patterns",
          "status": "passed",
          "title": "should handle custom exclude patterns",
          "duration": 0.3089979999999741,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectFiles"
          ],
          "fullName": "FileSelector selectFiles should detect Elixir files",
          "status": "passed",
          "title": "should detect Elixir files",
          "duration": 0.2560010000000261,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should select files from multiple languages",
          "status": "passed",
          "title": "should select files from multiple languages",
          "duration": 0.38856100000003835,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FileSelector",
            "selectDiverseFiles"
          ],
          "fullName": "FileSelector selectDiverseFiles should distribute slots evenly across languages",
          "status": "passed",
          "title": "should distribute slots evenly across languages",
          "duration": 0.2493910000000028,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804974539,
      "endTime": 1759804974544.3887,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/file-selector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "status": "passed",
          "title": "should show that detector uses ASTPatternInterpreter (not ElixirASTAnalyzer)",
          "duration": 1.435026999999991,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Current Implementation Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Current Implementation Check should show that ASTPatternInterpreter only supports JS/TS",
          "status": "passed",
          "title": "should show that ASTPatternInterpreter only supports JS/TS",
          "duration": 0.7912070000002132,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Desired State - These should guide GREEN phase"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Desired State - These should guide GREEN phase detector should use ElixirASTAnalyzer for multi-language support",
          "status": "passed",
          "title": "detector should use ElixirASTAnalyzer for multi-language support",
          "duration": 0.47367899999971996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Server-Side AST Unit Tests - RED Phase",
            "Memory Safety Check"
          ],
          "fullName": "Server-Side AST Unit Tests - RED Phase Memory Safety Check should not create detector in a way that causes memory issues",
          "status": "passed",
          "title": "should not create detector in a way that causes memory issues",
          "duration": 1.0783300000002782,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986377,
      "endTime": 1759804986383.0784,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/server-ast-unit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should not include tier parameter in request",
          "status": "passed",
          "title": "fetchPatterns should not include tier parameter in request",
          "duration": 1.561674000000039,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns response should not contain tier fields",
          "status": "passed",
          "title": "fetchPatterns response should not contain tier fields",
          "duration": 1.0743399999998928,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns should return all patterns with valid API key",
          "status": "passed",
          "title": "fetchPatterns should return all patterns with valid API key",
          "duration": 0.5665509999998903,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access fetchPatterns without API key should return demo patterns only",
          "status": "passed",
          "title": "fetchPatterns without API key should return demo patterns only",
          "duration": 0.6672080000000733,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access deprecated fetchPatternsByTier should still work for backward compatibility",
          "status": "passed",
          "title": "deprecated fetchPatternsByTier should still work for backward compatibility",
          "duration": 0.5030239999998685,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access PatternResponse type should not require tier fields",
          "status": "passed",
          "title": "PatternResponse type should not require tier fields",
          "duration": 0.4049680000000535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Tier-less Pattern Access"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Tier-less Pattern Access error messages should not mention tiers",
          "status": "passed",
          "title": "error messages should not mention tiers",
          "duration": 4.551198999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient - Tier Removal (TDD)",
            "Pattern counting without tiers"
          ],
          "fullName": "PatternAPIClient - Tier Removal (TDD) Pattern counting without tiers should return total pattern count across all languages",
          "status": "passed",
          "title": "should return total pattern count across all languages",
          "duration": 1.9818360000001576,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985371,
      "endTime": 1759804985382.982,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/pattern-api-client-tier-removal.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should search for both configured label and rsolv label",
          "status": "passed",
          "title": "should search for both configured label and rsolv label",
          "duration": 1.2568969999997535,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitHub Multi-Label Search"
          ],
          "fullName": "GitHub Multi-Label Search should deduplicate issues when they have multiple matching labels",
          "status": "passed",
          "title": "should deduplicate issues when they have multiple matching labels",
          "duration": 0.580431999999746,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986403,
      "endTime": 1759804986405.5803,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/github/multi-label.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect XSS via document.write with string concatenation",
          "status": "passed",
          "title": "should detect XSS via document.write with string concatenation",
          "duration": 5.518365999999787,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "XSS Pattern Detection"
          ],
          "fullName": "XSS Pattern Detection should detect various XSS patterns",
          "status": "passed",
          "title": "should detect various XSS patterns",
          "duration": 0.8367729999999938,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986183,
      "endTime": 1759804986189.8367,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/regression/xss-pattern-detection.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should return analysis with security vulnerabilities",
          "status": "passed",
          "title": "should return analysis with security vulnerabilities",
          "duration": 7.022594000000026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should handle case with no security issues",
          "status": "passed",
          "title": "should handle case with no security issues",
          "duration": 3.423131000000012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "SecurityAwareAnalyzer Integration"
          ],
          "fullName": "SecurityAwareAnalyzer Integration should work without codebase files",
          "status": "passed",
          "title": "should work without codebase files",
          "duration": 2.3976849999999104,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986284,
      "endTime": 1759804986297.3977,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/security/security-analyzer-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should verify environment variable is set when using vended credentials",
          "status": "passed",
          "title": "should verify environment variable is set when using vended credentials",
          "duration": 0.6658250000000407,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when not using vended credentials",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when not using vended credentials",
          "duration": 0.3016290000000481,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vended Credentials Environment Variable"
          ],
          "fullName": "Vended Credentials Environment Variable should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "status": "passed",
          "title": "should not set RSOLV_API_KEY when rsolvApiKey is missing",
          "duration": 0.19213099999979022,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986395,
      "endTime": 1759804986396.3015,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/ai/vended-credentials-env.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should fetch patterns from real API",
          "status": "skipped",
          "title": "should fetch patterns from real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Pattern API"
          ],
          "fullName": "API Endpoint Integration Tests Pattern API should handle language-specific pattern requests",
          "status": "skipped",
          "title": "should handle language-specific pattern requests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Validation API"
          ],
          "fullName": "API Endpoint Integration Tests Validation API should validate vulnerabilities through real API",
          "status": "skipped",
          "title": "should validate vulnerabilities through real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should exchange credentials with real API",
          "status": "skipped",
          "title": "should exchange credentials with real API",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Credential Exchange API"
          ],
          "fullName": "API Endpoint Integration Tests Credential Exchange API should handle credential refresh",
          "status": "skipped",
          "title": "should handle credential refresh",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Endpoint Integration Tests",
            "Fix Tracking API"
          ],
          "fullName": "API Endpoint Integration Tests Fix Tracking API should record fix attempts",
          "status": "skipped",
          "title": "should record fix attempts",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle rate limiting gracefully",
          "status": "skipped",
          "title": "should handle rate limiting gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "API Error Handling"
          ],
          "fullName": "API Error Handling should handle network errors with retry",
          "status": "skipped",
          "title": "should handle network errors with retry",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804983509,
      "endTime": 1759804983509,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/integration/api-endpoints.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Vitest tests with proper imports and syntax",
          "status": "passed",
          "title": "should generate Vitest tests with proper imports and syntax",
          "duration": 4.769370999999978,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Mocha + Chai tests with appropriate assertions",
          "status": "passed",
          "title": "should generate Mocha + Chai tests with appropriate assertions",
          "duration": 1.3796520000000214,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate pytest tests with Python conventions",
          "status": "passed",
          "title": "should generate pytest tests with Python conventions",
          "duration": 1.362688999999989,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate Minitest tests for Ruby with spec syntax",
          "status": "passed",
          "title": "should generate Minitest tests for Ruby with spec syntax",
          "duration": 1.0578449999999862,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate ExUnit tests for Elixir with pattern matching",
          "status": "passed",
          "title": "should generate ExUnit tests for Elixir with pattern matching",
          "duration": 0.831074000000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Framework-Specific Test Generation"
          ],
          "fullName": "AdaptiveTestGenerator Framework-Specific Test Generation should generate PHPUnit tests with proper annotations",
          "status": "passed",
          "title": "should generate PHPUnit tests with proper annotations",
          "duration": 1.1672519999999622,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect BDD style (describe/it) vs TDD style (test)",
          "status": "passed",
          "title": "should detect BDD style (describe/it) vs TDD style (test)",
          "duration": 0.99581900000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should match assertion style (expect vs assert vs should)",
          "status": "passed",
          "title": "should match assertion style (expect vs assert vs should)",
          "duration": 0.8803330000000074,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should follow file naming conventions",
          "status": "passed",
          "title": "should follow file naming conventions",
          "duration": 1.0278869999999642,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Convention Detection and Matching"
          ],
          "fullName": "AdaptiveTestGenerator Convention Detection and Matching should detect and use existing test utilities",
          "status": "passed",
          "title": "should detect and use existing test utilities",
          "duration": 0.7747989999999731,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use CoverageAnalyzer to avoid duplicate tests",
          "status": "passed",
          "title": "should use CoverageAnalyzer to avoid duplicate tests",
          "duration": 0.9650120000000015,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should use IssueInterpreter to understand vulnerability context",
          "status": "passed",
          "title": "should use IssueInterpreter to understand vulnerability context",
          "duration": 5.453527000000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Integration with Other Components"
          ],
          "fullName": "AdaptiveTestGenerator Integration with Other Components should integrate with existing VulnerabilityTestGenerator",
          "status": "passed",
          "title": "should integrate with existing VulnerabilityTestGenerator",
          "duration": 0.717646000000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle unknown test frameworks gracefully",
          "status": "passed",
          "title": "should handle unknown test frameworks gracefully",
          "duration": 0.5536759999999958,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle missing coverage data",
          "status": "passed",
          "title": "should handle missing coverage data",
          "duration": 0.43253600000002734,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator",
            "Edge Cases and Error Handling"
          ],
          "fullName": "AdaptiveTestGenerator Edge Cases and Error Handling should handle multi-language repositories",
          "status": "passed",
          "title": "should handle multi-language repositories",
          "duration": 0.5455890000000068,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804983944,
      "endTime": 1759804983967.5457,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/adaptive-test-generator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use issue label override when present",
          "status": "passed",
          "title": "should use issue label override when present",
          "duration": 0.39394000000015694,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use vulnerability type specific config",
          "status": "passed",
          "title": "should use vulnerability type specific config",
          "duration": 0.1857239999999365,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use customer tier config when no specific override",
          "status": "passed",
          "title": "should use customer tier config when no specific override",
          "duration": 0.15795600000001286,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should use default when no specific config matches",
          "status": "passed",
          "title": "should use default when no specific config matches",
          "duration": 0.10068200000000616,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "getMaxIterations configuration hierarchy"
          ],
          "fullName": "Fix Iteration Core Functionality getMaxIterations configuration hierarchy should handle missing maxIterations config",
          "status": "passed",
          "title": "should handle missing maxIterations config",
          "duration": 0.09736899999984416,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should simulate successful fix after multiple attempts",
          "status": "passed",
          "title": "should simulate successful fix after multiple attempts",
          "duration": 0.16680399999995643,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Fix iteration flow simulation"
          ],
          "fullName": "Fix Iteration Core Functionality Fix iteration flow simulation should fail after max attempts exceeded",
          "status": "passed",
          "title": "should fail after max attempts exceeded",
          "duration": 0.1119779999999082,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Test validation feedback integration"
          ],
          "fullName": "Fix Iteration Core Functionality Test validation feedback integration should include test failure context in retry prompt",
          "status": "passed",
          "title": "should include test failure context in retry prompt",
          "duration": 0.16403399999990143,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns Java SQL injection fix patterns",
          "status": "passed",
          "title": "Java SQL injection fix patterns",
          "duration": 0.14495099999999184,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PHP SQL injection fix patterns",
          "status": "passed",
          "title": "PHP SQL injection fix patterns",
          "duration": 0.12495400000011614,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Core Functionality",
            "Language-specific fix patterns"
          ],
          "fullName": "Fix Iteration Core Functionality Language-specific fix patterns PDO fix patterns for PHP",
          "status": "passed",
          "title": "PDO fix patterns for PHP",
          "duration": 0.363503000000037,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985354,
      "endTime": 1759804985356.3635,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/fix-iteration-core.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should fail if repository has uncommitted changes",
          "status": "skipped",
          "title": "should fail if repository has uncommitted changes",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 1: Git State Check"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 1: Git State Check should proceed with clean git state",
          "status": "skipped",
          "title": "should proceed with clean git state",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should stop if issue cannot be fixed",
          "status": "skipped",
          "title": "should stop if issue cannot be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 2: Issue Analysis"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 2: Issue Analysis should proceed to test generation if issue can be fixed",
          "status": "skipped",
          "title": "should proceed to test generation if issue can be fixed",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should generate tests when test generation is enabled",
          "status": "skipped",
          "title": "should generate tests when test generation is enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 3: Test Generation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 3: Test Generation should skip test generation when disabled",
          "status": "skipped",
          "title": "should skip test generation when disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should validate fix when validation is enabled",
          "status": "skipped",
          "title": "should validate fix when validation is enabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should retry fix when validation fails",
          "status": "skipped",
          "title": "should retry fix when validation fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 4: Fix Validation Loop"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 4: Fix Validation Loop should fail after max iterations",
          "status": "skipped",
          "title": "should fail after max iterations",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should create educational PR by default",
          "status": "skipped",
          "title": "should create educational PR by default",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should use regular PR when educational is disabled",
          "status": "skipped",
          "title": "should use regular PR when educational is disabled",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Phase 5: PR Creation"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Phase 5: PR Creation should rollback commit if PR creation fails",
          "status": "skipped",
          "title": "should rollback commit if PR creation fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle and rollback on unexpected errors",
          "status": "skipped",
          "title": "should handle and rollback on unexpected errors",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "Error Handling"
          ],
          "fullName": "processIssueWithGit - Characterization Tests Error Handling should handle git command failures gracefully",
          "status": "skipped",
          "title": "should handle git command failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use issue label override first",
          "status": "skipped",
          "title": "should use issue label override first",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use global config if no label override",
          "status": "skipped",
          "title": "should use global config if no label override",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should use default if no config",
          "status": "skipped",
          "title": "should use default if no config",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Characterization Tests",
            "getMaxIterations"
          ],
          "fullName": "processIssueWithGit - Characterization Tests getMaxIterations should handle vulnerability type specific config",
          "status": "skipped",
          "title": "should handle vulnerability type specific config",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804983509,
      "endTime": 1759804983509,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit function exists and has correct signature",
          "status": "passed",
          "title": "processIssueWithGit function exists and has correct signature",
          "duration": 0.7227609999999913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations function exists and returns expected defaults",
          "status": "passed",
          "title": "getMaxIterations function exists and returns expected defaults",
          "duration": 0.43963399999984176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations respects label overrides",
          "status": "passed",
          "title": "getMaxIterations respects label overrides",
          "duration": 0.19496299999991606,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization getMaxIterations uses config when no label override",
          "status": "passed",
          "title": "getMaxIterations uses config when no label override",
          "duration": 0.14594499999975596,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "processIssueWithGit - Simple Characterization"
          ],
          "fullName": "processIssueWithGit - Simple Characterization processIssueWithGit returns expected result shape",
          "status": "passed",
          "title": "processIssueWithGit returns expected result shape",
          "duration": 0.1261899999999514,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986359,
      "endTime": 1759804986361.146,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/git-based-processor-simple-characterization.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security analysis results",
          "status": "passed",
          "title": "should include security analysis results",
          "duration": 0.5095320000000356,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.16753400000004603,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security recommendations",
          "status": "passed",
          "title": "should include security recommendations",
          "duration": 0.12159799999994902,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security fix templates",
          "status": "passed",
          "title": "should include security fix templates",
          "duration": 0.12134500000001935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should mark affected files",
          "status": "passed",
          "title": "should mark affected files",
          "duration": 0.1072870000000421,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecuritySolutionPrompt"
          ],
          "fullName": "Security Prompts buildSecuritySolutionPrompt should include security requirements",
          "status": "passed",
          "title": "should include security requirements",
          "duration": 0.149454999999989,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include three-tier explanation structure",
          "status": "passed",
          "title": "should include three-tier explanation structure",
          "duration": 0.19261200000005374,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.12480500000003758,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include fixes implemented",
          "status": "passed",
          "title": "should include fixes implemented",
          "duration": 0.08237799999994877,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityExplanationPrompt"
          ],
          "fullName": "Security Prompts buildSecurityExplanationPrompt should include specific tier requirements",
          "status": "passed",
          "title": "should include specific tier requirements",
          "duration": 0.10802300000000287,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include security impact summary",
          "status": "passed",
          "title": "should include security impact summary",
          "duration": 0.18922999999995227,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include vulnerability details",
          "status": "passed",
          "title": "should include vulnerability details",
          "duration": 0.11514599999998154,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should include PR description structure",
          "status": "passed",
          "title": "should include PR description structure",
          "duration": 0.1776310000000194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "buildSecurityPrDescriptionPrompt"
          ],
          "fullName": "Security Prompts buildSecurityPrDescriptionPrompt should emphasize critical nature",
          "status": "passed",
          "title": "should emphasize critical nature",
          "duration": 0.10100799999997889,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.11803199999997105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Security Prompts",
            "Edge Cases"
          ],
          "fullName": "Security Prompts Edge Cases should handle single vulnerability type",
          "status": "passed",
          "title": "should handle single vulnerability type",
          "duration": 0.13052600000003167,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804984290,
      "endTime": 1759804984293.1306,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/security-prompts.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Jest from package.json",
          "status": "passed",
          "title": "should detect Jest from package.json",
          "duration": 1.102860000000078,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Vitest from package.json",
          "status": "passed",
          "title": "should detect Vitest from package.json",
          "duration": 0.2469940000000861,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Mocha with Chai",
          "status": "passed",
          "title": "should detect Mocha with Chai",
          "duration": 0.31177600000000893,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect Cypress for E2E testing",
          "status": "passed",
          "title": "should detect Cypress for E2E testing",
          "duration": 0.1630529999999908,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "JavaScript/TypeScript Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) JavaScript/TypeScript Framework Detection should detect multiple frameworks in one project",
          "status": "passed",
          "title": "should detect multiple frameworks in one project",
          "duration": 0.8757309999999734,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect pytest from requirements.txt",
          "status": "passed",
          "title": "should detect pytest from requirements.txt",
          "duration": 0.3394670000000133,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Python Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Python Framework Detection should detect unittest from import statements",
          "status": "passed",
          "title": "should detect unittest from import statements",
          "duration": 0.17820099999994454,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect RSpec from Gemfile",
          "status": "passed",
          "title": "should detect RSpec from Gemfile",
          "duration": 0.31909600000005867,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Ruby Framework Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Ruby Framework Detection should detect Minitest from Gemfile",
          "status": "passed",
          "title": "should detect Minitest from Gemfile",
          "duration": 0.18833199999994577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect Jest from test file patterns",
          "status": "passed",
          "title": "should detect Jest from test file patterns",
          "duration": 0.18538599999999406,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Test File Pattern Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Test File Pattern Detection should detect RSpec from spec directory structure",
          "status": "passed",
          "title": "should detect RSpec from spec directory structure",
          "duration": 0.12918300000001182,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vi.config.js",
          "status": "passed",
          "title": "should detect from vi.config.js",
          "duration": 0.17781999999999698,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Configuration File Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Configuration File Detection should detect from vitest.config.ts",
          "status": "passed",
          "title": "should detect from vitest.config.ts",
          "duration": 0.13261800000009316,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should detect frameworks from repository path",
          "status": "passed",
          "title": "should detect frameworks from repository path",
          "duration": 0.6592850000000681,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should handle missing configuration files gracefully",
          "status": "passed",
          "title": "should handle missing configuration files gracefully",
          "duration": 0.2950060000000576,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Comprehensive Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Comprehensive Detection should assign confidence scores based on detection method",
          "status": "passed",
          "title": "should assign confidence scores based on detection method",
          "duration": 0.09478500000000167,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should extract exact version from package.json",
          "status": "passed",
          "title": "should extract exact version from package.json",
          "duration": 0.10832600000003367,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector (TDD - Red Phase)",
            "Framework Version Detection"
          ],
          "fullName": "TestFrameworkDetector (TDD - Red Phase) Framework Version Detection should handle version ranges",
          "status": "passed",
          "title": "should handle version ranges",
          "duration": 0.14945399999999154,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestFrameworkDetector Integration"
          ],
          "fullName": "TestFrameworkDetector Integration should integrate with test generator",
          "status": "passed",
          "title": "should integrate with test generator",
          "duration": 0.24331699999993361,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804984061,
      "endTime": 1759804984068.2434,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/test-framework-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should have default timeout configurations",
          "status": "passed",
          "title": "should have default timeout configurations",
          "duration": 3.606053999999858,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from environment variables",
          "status": "passed",
          "title": "should load timeout from environment variables",
          "duration": 1.1788820000001579,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should load timeout from config file",
          "status": "passed",
          "title": "should load timeout from config file",
          "duration": 4.355442999999923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should merge timeouts with priority: env > file > default",
          "status": "passed",
          "title": "should merge timeouts with priority: env > file > default",
          "duration": 1.5228070000002845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should validate timeout values are numbers",
          "status": "passed",
          "title": "should validate timeout values are numbers",
          "duration": 0.9261790000000474,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should handle missing timeout properties gracefully",
          "status": "passed",
          "title": "should handle missing timeout properties gracefully",
          "duration": 0.9988989999997102,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Timeout Settings"
          ],
          "fullName": "Config Timeout Settings should ensure AI provider timeout is reasonable",
          "status": "passed",
          "title": "should ensure AI provider timeout is reasonable",
          "duration": 0.8079870000001392,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986224,
      "endTime": 1759804986237.808,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/config/__tests__/timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should require RSOLV_MODE environment variable",
          "status": "passed",
          "title": "should require RSOLV_MODE environment variable",
          "duration": 1.2435029999999188,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize scan mode from RSOLV_MODE",
          "status": "passed",
          "title": "should recognize scan mode from RSOLV_MODE",
          "duration": 0.6530210000000807,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize validate mode",
          "status": "passed",
          "title": "should recognize validate mode",
          "duration": 0.41782000000011976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize mitigate mode",
          "status": "passed",
          "title": "should recognize mitigate mode",
          "duration": 0.341427000000067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should recognize full mode",
          "status": "passed",
          "title": "should recognize full mode",
          "duration": 0.488303999999971,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle batch validation with multiple issue IDs",
          "status": "passed",
          "title": "should handle batch validation with multiple issue IDs",
          "duration": 0.5193339999998443,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should respect max issues limit",
          "status": "passed",
          "title": "should respect max issues limit",
          "duration": 0.4197100000001228,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should handle skip cache flag",
          "status": "passed",
          "title": "should handle skip cache flag",
          "duration": 0.4486739999999827,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when validate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when validate mode lacks issue ID",
          "duration": 0.43081999999981235,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when mitigate mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when mitigate mode lacks issue ID",
          "duration": 0.3547639999999319,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when both single and multiple issue IDs are provided",
          "status": "passed",
          "title": "should throw error when both single and multiple issue IDs are provided",
          "duration": 0.3404090000001361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeConfig"
          ],
          "fullName": "ModeSelector getModeConfig should throw error when fix mode lacks issue ID",
          "status": "passed",
          "title": "should throw error when fix mode lacks issue ID",
          "duration": 0.3332380000001649,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should normalize mode aliases",
          "status": "passed",
          "title": "should normalize mode aliases",
          "duration": 1.2150100000001203,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "normalizeMode"
          ],
          "fullName": "ModeSelector normalizeMode should throw error for unknown modes",
          "status": "passed",
          "title": "should throw error for unknown modes",
          "duration": 0.48072499999989304,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "getModeDescription"
          ],
          "fullName": "ModeSelector getModeDescription should return appropriate descriptions for each mode",
          "status": "passed",
          "title": "should return appropriate descriptions for each mode",
          "duration": 0.3998870000000352,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require AI",
          "status": "passed",
          "title": "should identify which modes require AI",
          "duration": 0.3111549999998715,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require test generation",
          "status": "passed",
          "title": "should identify which modes require test generation",
          "duration": 0.33970899999985704,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ModeSelector",
            "mode requirements"
          ],
          "fullName": "ModeSelector mode requirements should identify which modes require fix generation",
          "status": "passed",
          "title": "should identify which modes require fix generation",
          "duration": 0.29722100000003593,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985228,
      "endTime": 1759804985237.3396,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/mode-selector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should always attempt to commit tests even if branch creation initially fails",
          "status": "skipped",
          "title": "should always attempt to commit tests even if branch creation initially fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should force commit tests in test mode even if tests are imperfect",
          "status": "skipped",
          "title": "should force commit tests in test mode even if tests are imperfect",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode in test mode should handle test commit even when git push fails",
          "status": "skipped",
          "title": "should handle test commit even when git push fails",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - Test Commit in Test Mode",
            "validateIssue in test mode"
          ],
          "fullName": "ValidationMode - Test Commit in Test Mode validateIssue in test mode should ensure test commits happen in test mode regardless of test quality",
          "status": "skipped",
          "title": "should ensure test commits happen in test mode regardless of test quality",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804983509,
      "endTime": 1759804983509,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/validation-test-commit.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with singular \"file\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with singular \"file\" property",
          "duration": 91.67774600000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle vulnerabilities with plural \"files\" property",
          "status": "passed",
          "title": "should handle vulnerabilities with plural \"files\" property",
          "duration": 5.670581999999968,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor Detection Regression Tests (RFC-047)"
          ],
          "fullName": "Vendor Detection Regression Tests (RFC-047) should handle mixed vulnerabilities with both file and files properties",
          "status": "passed",
          "title": "should handle mixed vulnerabilities with both file and files properties",
          "duration": 4.360682999999881,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985111,
      "endTime": 1759804985212.3606,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/vendor-detection-regression.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should filter out vulnerabilities in comments",
          "status": "passed",
          "title": "should filter out vulnerabilities in comments",
          "duration": 1.7460790000000088,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should keep real vulnerabilities",
          "status": "passed",
          "title": "should keep real vulnerabilities",
          "duration": 0.6184449999998378,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle mixed results correctly",
          "status": "passed",
          "title": "should handle mixed results correctly",
          "duration": 0.488559000000123,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AST Validator with Mocked API",
            "False Positive Filtering"
          ],
          "fullName": "AST Validator with Mocked API False Positive Filtering should handle API failures gracefully",
          "status": "passed",
          "title": "should handle API failures gracefully",
          "duration": 1.1630850000001374,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985398,
      "endTime": 1759804985402.163,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/scanner/__tests__/ast-validator-mocked.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "RED - Shows the bug existed before fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug RED - Shows the bug existed before fix BEFORE FIX: would pass all groups to createIssuesFromGroups ignoring max_issues",
          "status": "skipped",
          "title": "BEFORE FIX: would pass all groups to createIssuesFromGroups ignoring max_issues",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "GREEN - After the fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug GREEN - After the fix should only pass limited groups to createIssuesFromGroups",
          "status": "passed",
          "title": "should only pass limited groups to createIssuesFromGroups",
          "duration": 184.65804300000002,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "GREEN - After the fix"
          ],
          "fullName": "ScanOrchestrator - max_issues bug GREEN - After the fix should only create number of issues specified by max_issues",
          "status": "passed",
          "title": "should only create number of issues specified by max_issues",
          "duration": 144.77704800000004,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "REFACTOR - Maintain functionality"
          ],
          "fullName": "ScanOrchestrator - max_issues bug REFACTOR - Maintain functionality should still create all issues when no max_issues limit",
          "status": "passed",
          "title": "should still create all issues when no max_issues limit",
          "duration": 142.8496439999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ScanOrchestrator - max_issues bug",
            "REFACTOR - Maintain functionality"
          ],
          "fullName": "ScanOrchestrator - max_issues bug REFACTOR - Maintain functionality should handle edge cases correctly",
          "status": "passed",
          "title": "should handle edge cases correctly",
          "duration": 142.63506400000006,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804984369,
      "endTime": 1759804984984.635,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/scanner/__tests__/scan-orchestrator-max-issues.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should pass rsolvApiKey and useVendedCredentials to processIssues",
          "status": "passed",
          "title": "should pass rsolvApiKey and useVendedCredentials to processIssues",
          "duration": 436.30665199999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor - Mitigate Phase Credential Handling"
          ],
          "fullName": "PhaseExecutor - Mitigate Phase Credential Handling should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "status": "passed",
          "title": "should fail gracefully when rsolvApiKey is missing but vended credentials are enabled",
          "duration": 269.6314150000003,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804985438,
      "endTime": 1759804986143.6313,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/mitigate-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "encryption integration"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption encryption integration should encrypt files before sending to API",
          "status": "passed",
          "title": "should encrypt files before sending to API",
          "duration": 2.2335579999999027,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "encryption integration"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption encryption integration should use AES-256-GCM encryption",
          "status": "passed",
          "title": "should use AES-256-GCM encryption",
          "duration": 1.258690000000115,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Encryption",
            "decryption of responses"
          ],
          "fullName": "ElixirASTAnalyzer - Encryption decryption of responses should decrypt API responses when encryption is used",
          "status": "passed",
          "title": "should decrypt API responses when encryption is used",
          "duration": 0.993605000000116,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804986259,
      "endTime": 1759804986263.9937,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-encryption.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Issue: Multiple credential managers created"
          ],
          "fullName": "Credential Lifecycle Issues Issue: Multiple credential managers created should demonstrate the current problem - multiple managers",
          "status": "passed",
          "title": "should demonstrate the current problem - multiple managers",
          "duration": 2.629278999999997,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 1: Singleton credential manager"
          ],
          "fullName": "Credential Lifecycle Issues Solution 1: Singleton credential manager should reuse the same credential manager instance",
          "status": "passed",
          "title": "should reuse the same credential manager instance",
          "duration": 0.6942870000000312,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 2: Handle credential expiration gracefully"
          ],
          "fullName": "Credential Lifecycle Issues Solution 2: Handle credential expiration gracefully should refresh expired credentials automatically",
          "status": "passed",
          "title": "should refresh expired credentials automatically",
          "duration": 6003.586964,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Solution 3: Retry on exchange failure"
          ],
          "fullName": "Credential Lifecycle Issues Solution 3: Retry on exchange failure should retry credential exchange with exponential backoff",
          "status": "passed",
          "title": "should retry credential exchange with exponential backoff",
          "duration": 304.26288699999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues",
            "Claude conversation logging"
          ],
          "fullName": "Credential Lifecycle Issues Claude conversation logging should log full Claude conversations when enabled",
          "status": "passed",
          "title": "should log full Claude conversations when enabled",
          "duration": 0.3979609999996683,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988924,
      "endTime": 1759804995236.398,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/credentials/credential-lifecycle.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should NOT throw when creating Anthropic client with vended credentials and no API key",
          "status": "skipped",
          "title": "should NOT throw when creating Anthropic client with vended credentials and no API key",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Anthropic Client with Vended Credentials"
          ],
          "fullName": "Anthropic Client with Vended Credentials should throw when creating Anthropic client without vended credentials and no API key",
          "status": "skipped",
          "title": "should throw when creating Anthropic client without vended credentials and no API key",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/__tests__/ai/anthropic-vending.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "RED - Shows the original problem"
          ],
          "fullName": "AITestGenerator - maxTokens fix RED - Shows the original problem should have used low maxTokens before fix (4000)",
          "status": "skipped",
          "title": "should have used low maxTokens before fix (4000)",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should use at least 10000 maxTokens for test generation even with low config",
          "status": "skipped",
          "title": "should use at least 10000 maxTokens for test generation even with low config",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should preserve higher maxTokens if already configured",
          "status": "skipped",
          "title": "should preserve higher maxTokens if already configured",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "GREEN - After the fix"
          ],
          "fullName": "AITestGenerator - maxTokens fix GREEN - After the fix should use 10000 maxTokens when no maxTokens is specified",
          "status": "skipped",
          "title": "should use 10000 maxTokens when no maxTokens is specified",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "REFACTOR - Ensure functionality is preserved"
          ],
          "fullName": "AITestGenerator - maxTokens fix REFACTOR - Ensure functionality is preserved should still generate valid test results with increased maxTokens",
          "status": "skipped",
          "title": "should still generate valid test results with increased maxTokens",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - maxTokens fix",
            "REFACTOR - Ensure functionality is preserved"
          ],
          "fullName": "AITestGenerator - maxTokens fix REFACTOR - Ensure functionality is preserved should maintain other config properties unchanged",
          "status": "skipped",
          "title": "should maintain other config properties unchanged",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/ai-test-generator-maxtokens.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Issue Analyzer"
          ],
          "fullName": "Issue Analyzer analyzeIssue should return analysis from AI client",
          "status": "passed",
          "title": "analyzeIssue should return analysis from AI client",
          "duration": 1.6162449999992532,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995738,
      "endTime": 1759804995739.6162,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/analyzer.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should validate fix iteration for Java SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for Java SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Java SQL Injection Fix Iteration should handle fix iteration with max attempts",
          "status": "passed",
          "title": "should handle fix iteration with max attempts",
          "duration": 0.9773459999998977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should validate fix iteration for PHP SQL injection",
          "status": "skipped",
          "title": "should validate fix iteration for PHP SQL injection",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP PHP SQL Injection Fix Iteration should handle PDO fix patterns",
          "status": "passed",
          "title": "should handle PDO fix patterns",
          "duration": 0.3665000000000873,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Fix Iteration Validation - Java/PHP",
            "Integration with Fix Validation"
          ],
          "fullName": "Fix Iteration Validation - Java/PHP Integration with Fix Validation should integrate with Claude Code fix validation loop",
          "status": "passed",
          "title": "should integrate with Claude Code fix validation loop",
          "duration": 2.5490050000000792,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988189,
      "endTime": 1759804988193.549,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/fix-iteration-java-php.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Anthropic Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Anthropic Live Tests should make real API call to Anthropic",
          "status": "pending",
          "title": "should make real API call to Anthropic",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Anthropic Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Anthropic Live Tests should handle Anthropic with credential vending",
          "status": "pending",
          "title": "should handle Anthropic with credential vending",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "OpenAI Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests OpenAI Live Tests should make real API call to OpenAI",
          "status": "pending",
          "title": "should make real API call to OpenAI",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Ollama Live Tests"
          ],
          "fullName": "Live LLM Adapter Tests Ollama Live Tests should make real API call to local Ollama",
          "status": "pending",
          "title": "should make real API call to local Ollama",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Live LLM Adapter Tests",
            "Provider Comparison"
          ],
          "fullName": "Live LLM Adapter Tests Provider Comparison should compare responses across all available providers",
          "status": "pending",
          "title": "should compare responses across all available providers",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/llm-adapters-live.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle public S3 bucket vulnerability",
          "status": "passed",
          "title": "should handle public S3 bucket vulnerability",
          "duration": 1.2049090000000433,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Terraform Vulnerability Examples"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Terraform Vulnerability Examples should handle open security group vulnerability",
          "status": "passed",
          "title": "should handle open security group vulnerability",
          "duration": 0.8501619999999548,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Terratest framework",
          "status": "passed",
          "title": "should detect Terratest framework",
          "duration": 1.331096000000116,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Test Framework Detection"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Test Framework Detection should detect Kitchen-Terraform",
          "status": "passed",
          "title": "should detect Kitchen-Terraform",
          "duration": 1.1788010000000213,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "IaC Pattern Limitations"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation IaC Pattern Limitations should demonstrate current IaC detection limitations",
          "status": "passed",
          "title": "should demonstrate current IaC detection limitations",
          "duration": 0.7656139999999141,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should generate appropriate test structure for Terraform",
          "status": "passed",
          "title": "should generate appropriate test structure for Terraform",
          "duration": 0.46314699999993536,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Test Generation for IaC"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Test Generation for IaC should identify IaC fix patterns",
          "status": "passed",
          "title": "should identify IaC fix patterns",
          "duration": 0.1616910000000189,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terratest test structure",
          "status": "passed",
          "title": "should understand Terratest test structure",
          "duration": 0.11083699999994678,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6D: IaC/Terraform Validation",
            "Expected IaC Test Frameworks"
          ],
          "fullName": "Phase 6D: IaC/Terraform Validation Expected IaC Test Frameworks should understand Terraform Compliance structure",
          "status": "passed",
          "title": "should understand Terraform Compliance structure",
          "duration": 0.11142599999993763,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988862,
      "endTime": 1759804988868.4631,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6d-iac-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should iterate until Java SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until Java SQL injection is properly fixed",
          "duration": 0.6870060000001104,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Java SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Java SQL Injection Fix Iteration should handle max iterations exceeded for Java",
          "status": "passed",
          "title": "should handle max iterations exceeded for Java",
          "duration": 0.22262099999989005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should iterate until PHP SQL injection is properly fixed",
          "status": "passed",
          "title": "should iterate until PHP SQL injection is properly fixed",
          "duration": 0.16344200000003184,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "PHP SQL Injection Fix Iteration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation PHP SQL Injection Fix Iteration should generate proper test context for PHP",
          "status": "passed",
          "title": "should generate proper test context for PHP",
          "duration": 0.12091799999984687,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply Java-specific secure patterns",
          "status": "passed",
          "title": "should apply Java-specific secure patterns",
          "duration": 0.13796500000012202,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Language-Specific Fix Patterns"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Language-Specific Fix Patterns should apply PHP-specific secure patterns",
          "status": "passed",
          "title": "should apply PHP-specific secure patterns",
          "duration": 0.12198600000010629,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Phase 6E: Java/PHP Fix Validation",
            "Fix Validation Configuration"
          ],
          "fullName": "Phase 6E: Java/PHP Fix Validation Fix Validation Configuration should respect configuration hierarchy",
          "status": "passed",
          "title": "should respect configuration hierarchy",
          "duration": 0.23128199999996468,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988841,
      "endTime": 1759804988843.2312,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/phase-6e-java-php-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should return solution from AI client",
          "status": "passed",
          "title": "generateSolution should return solution from AI client",
          "duration": 202.7918699999991,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should use Claude Code adapter when provider is claude-code",
          "status": "passed",
          "title": "generateSolution should use Claude Code adapter when provider is claude-code",
          "duration": 0.7261379999999917,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Solution Generator"
          ],
          "fullName": "Solution Generator generateSolution should fallback to standard AI client for non-claude-code providers",
          "status": "passed",
          "title": "generateSolution should fallback to standard AI client for non-claude-code providers",
          "duration": 101.84785199999897,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995254,
      "endTime": 1759804995559.848,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/solution.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate command injection tests",
          "status": "passed",
          "title": "should generate command injection tests",
          "duration": 0.8726099999985308,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate path traversal tests",
          "status": "passed",
          "title": "should generate path traversal tests",
          "duration": 0.4409799999993993,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate Ruby tests",
          "status": "passed",
          "title": "should generate Ruby tests",
          "duration": 0.48227500000029977,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate PHP tests",
          "status": "passed",
          "title": "should generate PHP tests",
          "duration": 0.5075259999994159,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should generate comprehensive functional validation tests",
          "status": "passed",
          "title": "should generate comprehensive functional validation tests",
          "duration": 0.6171450000001641,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Enhanced VulnerabilityTestGenerator (Phase 4)"
          ],
          "fullName": "Enhanced VulnerabilityTestGenerator (Phase 4) should handle E2E test generation for new vulnerability types",
          "status": "passed",
          "title": "should handle E2E test generation for new vulnerability types",
          "duration": 0.35253499999998894,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995597,
      "endTime": 1759804995600.6172,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/test-generator-enhanced.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate complete test suite for SQL injection vulnerability",
          "status": "passed",
          "title": "should generate complete test suite for SQL injection vulnerability",
          "duration": 3.1228249999999207,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate red test that demonstrates vulnerability",
          "status": "passed",
          "title": "should generate red test that demonstrates vulnerability",
          "duration": 0.4365219999999681,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate green test that validates fix",
          "status": "passed",
          "title": "should generate green test that validates fix",
          "duration": 0.26582600000006096,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate refactor tests that ensure functionality",
          "status": "passed",
          "title": "should generate refactor tests that ensure functionality",
          "duration": 0.22390299999995023,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should handle different vulnerability types",
          "status": "passed",
          "title": "should handle different vulnerability types",
          "duration": 0.3332860000000437,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should handle different programming languages",
          "status": "passed",
          "title": "should handle different programming languages",
          "duration": 1.0532759999999826,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "VulnerabilityTestGenerator (TDD - Green Phase)"
          ],
          "fullName": "VulnerabilityTestGenerator (TDD - Green Phase) should generate E2E tests when requested",
          "status": "passed",
          "title": "should generate E2E tests when requested",
          "duration": 0.4176550000000816,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should load SQL injection red test template",
          "status": "passed",
          "title": "should load SQL injection red test template",
          "duration": 0.15953800000011142,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should render template with context variables",
          "status": "passed",
          "title": "should render template with context variables",
          "duration": 0.20958099999995738,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestTemplateEngine (TDD - Green Phase)"
          ],
          "fullName": "TestTemplateEngine (TDD - Green Phase) should validate template syntax",
          "status": "passed",
          "title": "should validate template syntax",
          "duration": 0.2290259999999762,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "TestExecutor (TDD - Green Phase)"
          ],
          "fullName": "TestExecutor (TDD - Green Phase) should execute red-green-refactor test suite",
          "status": "passed",
          "title": "should execute red-green-refactor test suite",
          "duration": 0.17142899999998917,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Test Generation Framework Integration (TDD - Green Phase)"
          ],
          "fullName": "Test Generation Framework Integration (TDD - Green Phase) should integrate with existing security analyzer",
          "status": "passed",
          "title": "should integrate with existing security analyzer",
          "duration": 126.44869799999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Test Generation Framework Integration (TDD - Green Phase)"
          ],
          "fullName": "Test Generation Framework Integration (TDD - Green Phase) should integrate with git-based processor for validation",
          "status": "passed",
          "title": "should integrate with git-based processor for validation",
          "duration": 24.273705999999947,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987833,
      "endTime": 1759804987991.2737,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/test-generator.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should use default context gathering timeout of 30 seconds",
          "status": "passed",
          "title": "should use default context gathering timeout of 30 seconds",
          "duration": 2.0244840000000295,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should use custom context gathering timeout when specified",
          "status": "passed",
          "title": "should use custom context gathering timeout when specified",
          "duration": 1.0209160000001702,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle analysis failure gracefully",
          "status": "passed",
          "title": "should handle analysis failure gracefully",
          "duration": 0.6478709999998955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle solution generation failure",
          "status": "passed",
          "title": "should handle solution generation failure",
          "duration": 0.81259399999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should set different configurations based on context depth",
          "status": "passed",
          "title": "should set different configurations based on context depth",
          "duration": 1.7358250000002045,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should process multiple issues with timeout handling",
          "status": "passed",
          "title": "should process multiple issues with timeout handling",
          "duration": 101.61420199999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should handle errors with sanitized messages",
          "status": "passed",
          "title": "should handle errors with sanitized messages",
          "duration": 2.6414819999999963,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Unified Processor Timeout Behavior"
          ],
          "fullName": "Unified Processor Timeout Behavior should include processing time in results",
          "status": "passed",
          "title": "should include processing time in results",
          "duration": 202.52217599999994,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988500,
      "endTime": 1759804988813.5222,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/unified-processor-timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load default config without maxIssues",
          "status": "passed",
          "title": "should load default config without maxIssues",
          "duration": 3.1376209999998537,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from environment variable",
          "status": "passed",
          "title": "should load maxIssues from environment variable",
          "duration": 1.1274349999985134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should load maxIssues from config file",
          "status": "passed",
          "title": "should load maxIssues from config file",
          "duration": 3.8905910000012227,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues environment variable should override config file for maxIssues",
          "status": "passed",
          "title": "environment variable should override config file for maxIssues",
          "duration": 1.3152730000001611,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle invalid maxIssues values",
          "status": "passed",
          "title": "should handle invalid maxIssues values",
          "duration": 1.1901830000006157,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle zero maxIssues",
          "status": "passed",
          "title": "should handle zero maxIssues",
          "duration": 1.4329859999998007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Config Loading with maxIssues"
          ],
          "fullName": "Config Loading with maxIssues should handle negative maxIssues",
          "status": "passed",
          "title": "should handle negative maxIssues",
          "duration": 0.9718200000006618,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995713,
      "endTime": 1759804995725.972,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/config/__tests__/index.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should default to Claude 4 Sonnet model",
          "status": "skipped",
          "title": "should default to Claude 4 Sonnet model",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should use Claude 4 Sonnet even when provider is set via env",
          "status": "skipped",
          "title": "should use Claude 4 Sonnet even when provider is set via env",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should preserve useVendedCredentials when env vars are set",
          "status": "skipped",
          "title": "should preserve useVendedCredentials when env vars are set",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "RED - Test should fail initially"
          ],
          "fullName": "Model Configuration RED - Test should fail initially should respect explicit model override",
          "status": "skipped",
          "title": "should respect explicit model override",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "Model metadata validation"
          ],
          "fullName": "Model Configuration Model metadata validation should have correct Claude 4 Sonnet capabilities",
          "status": "skipped",
          "title": "should have correct Claude 4 Sonnet capabilities",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Model Configuration",
            "GREEN - Config merging"
          ],
          "fullName": "Model Configuration GREEN - Config merging should properly merge configs with env vars taking precedence",
          "status": "skipped",
          "title": "should properly merge configs with env vars taking precedence",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/config/__tests__/model-config.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include educational vulnerability explanation",
          "status": "passed",
          "title": "should include educational vulnerability explanation",
          "duration": 1.7146279999997205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include AI-specific vulnerability context for slopsquatting",
          "status": "passed",
          "title": "should include AI-specific vulnerability context for slopsquatting",
          "duration": 0.7142260000000533,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "RED Phase - Educational Content Generation"
          ],
          "fullName": "Educational PR Creation RED Phase - Educational Content Generation should include RSOLV value proposition",
          "status": "passed",
          "title": "should include RSOLV value proposition",
          "duration": 0.6221069999992324,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Educational PR Creation",
            "GREEN Phase - Complete Flow"
          ],
          "fullName": "Educational PR Creation GREEN Phase - Complete Flow should create educational PR with all components",
          "status": "passed",
          "title": "should create educational PR with all components",
          "duration": 1.0819909999991069,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995632,
      "endTime": 1759804995636.082,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/github/__tests__/pr-git-educational.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute scan mode without prerequisites",
          "status": "passed",
          "title": "should execute scan mode without prerequisites",
          "duration": 114.45541900000012,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue or scan data for validate mode",
          "status": "skipped",
          "title": "should require issue or scan data for validate mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should require issue for mitigate mode",
          "status": "skipped",
          "title": "should require issue for mitigate mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should execute full mode without prerequisites",
          "status": "skipped",
          "title": "should execute full mode without prerequisites",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "execute method"
          ],
          "fullName": "PhaseExecutor execute method should throw error for invalid mode",
          "status": "passed",
          "title": "should throw error for invalid mode",
          "duration": 1.9909049999998842,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeScan should detect vulnerabilities",
          "status": "passed",
          "title": "executeScan should detect vulnerabilities",
          "duration": 0.8014490000000478,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeValidate should generate RED tests",
          "status": "skipped",
          "title": "executeValidate should generate RED tests",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeMitigate should fix vulnerability",
          "status": "passed",
          "title": "executeMitigate should fix vulnerability",
          "duration": 33.37077700000009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "individual phase methods"
          ],
          "fullName": "PhaseExecutor individual phase methods executeAllPhases should run scan, validate, and mitigate",
          "status": "passed",
          "title": "executeAllPhases should run scan, validate, and mitigate",
          "duration": 1.0952099999999518,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should store phase results using PhaseDataClient",
          "status": "passed",
          "title": "should store phase results using PhaseDataClient",
          "duration": 2.1971839999998792,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PhaseExecutor",
            "phase data persistence"
          ],
          "fullName": "PhaseExecutor phase data persistence should retrieve phase results using PhaseDataClient",
          "status": "passed",
          "title": "should retrieve phase results using PhaseDataClient",
          "duration": 0.48106300000017654,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988216,
      "endTime": 1759804988370.481,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/phase-executor.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "VendorDetector functionality"
          ],
          "fullName": "Vendor File Filtering - Integration Tests VendorDetector functionality should correctly identify vendor files",
          "status": "passed",
          "title": "should correctly identify vendor files",
          "duration": 0.5398239999994985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "VendorDetector functionality"
          ],
          "fullName": "Vendor File Filtering - Integration Tests VendorDetector functionality should correctly identify application files",
          "status": "passed",
          "title": "should correctly identify application files",
          "duration": 0.6441349999986414,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Expected behavior in Validation Phase"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Expected behavior in Validation Phase validation result should include vendoredFile flag",
          "status": "passed",
          "title": "validation result should include vendoredFile flag",
          "duration": 0.3730460000006133,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Expected behavior in Mitigation Phase"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Expected behavior in Mitigation Phase should skip fix generation for vendor files",
          "status": "passed",
          "title": "should skip fix generation for vendor files",
          "duration": 0.1797919999989972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "File extraction from various formats"
          ],
          "fullName": "Vendor File Filtering - Integration Tests File extraction from various formats should extract files from different vulnerability structures",
          "status": "passed",
          "title": "should extract files from different vulnerability structures",
          "duration": 0.41915500000141037,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Vendor File Filtering - Integration Tests",
            "Current behavior vs Expected behavior"
          ],
          "fullName": "Vendor File Filtering - Integration Tests Current behavior vs Expected behavior CURRENT: vendor files are processed in all phases",
          "status": "passed",
          "title": "CURRENT: vendor files are processed in all phases",
          "duration": 0.16032600000107777,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995650,
      "endTime": 1759804995652.4192,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/vendor-filtering-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should set ANTHROPIC_API_KEY from vended credentials before executing CLI",
          "status": "skipped",
          "title": "should set ANTHROPIC_API_KEY from vended credentials before executing CLI",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should use vended credentials in production mode",
          "status": "skipped",
          "title": "should use vended credentials in production mode",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Vended Credential Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Vended Credential Handling should prefer environment variable over vended credentials when available",
          "status": "skipped",
          "title": "should prefer environment variable over vended credentials when available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Error Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Error Handling should return error when no API key is available",
          "status": "skipped",
          "title": "should return error when no API key is available",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RetryableClaudeCodeCLI - Vended Credentials",
            "Error Handling"
          ],
          "fullName": "RetryableClaudeCodeCLI - Vended Credentials Error Handling should handle credential manager errors gracefully",
          "status": "skipped",
          "title": "should handle credential manager errors gracefully",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-cli-retry-vended.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should validate credential format before passing to Claude CLI",
          "status": "passed",
          "title": "should validate credential format before passing to Claude CLI",
          "duration": 2.5611529999998766,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should detect Anthropic API key format requirements",
          "status": "passed",
          "title": "should detect Anthropic API key format requirements",
          "duration": 1.9330590000001848,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "RED - Failing tests (TDD)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation RED - Failing tests (TDD) should log detailed debugging info when authentication fails",
          "status": "passed",
          "title": "should log detailed debugging info when authentication fails",
          "duration": 0.7096020000001317,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "GREEN - Passing tests (after implementation)"
          ],
          "fullName": "Claude Code CLI Credential Format Validation GREEN - Passing tests (after implementation) should pass valid Anthropic credentials through successfully",
          "status": "passed",
          "title": "should pass valid Anthropic credentials through successfully",
          "duration": 0.4668059999999059,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Credential Format Validation",
            "Integration test - Real-world scenario"
          ],
          "fullName": "Claude Code CLI Credential Format Validation Integration test - Real-world scenario should handle the exact scenario from workflow 17873531908",
          "status": "passed",
          "title": "should handle the exact scenario from workflow 17873531908",
          "duration": 0.4457640000000538,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804988888,
      "endTime": 1759804988894.4668,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-credential-format-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should generate solution with git metadata",
          "status": "skipped",
          "title": "should generate solution with git metadata",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should handle git command failures gracefully",
          "status": "skipped",
          "title": "should handle git command failures gracefully",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should use enhanced prompt for git-based workflow",
          "status": "skipped",
          "title": "should use enhanced prompt for git-based workflow",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "GitBasedClaudeCodeAdapter"
          ],
          "fullName": "GitBasedClaudeCodeAdapter should extract solution from various response formats",
          "status": "skipped",
          "title": "should extract solution from various response formats",
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804987115,
      "endTime": 1759804987115,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-git.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from file property",
          "status": "passed",
          "title": "should extract from file property",
          "duration": 1.0019069999998464,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from files array",
          "status": "passed",
          "title": "should extract from files array",
          "duration": 0.5417180000004009,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from path property",
          "status": "passed",
          "title": "should extract from path property",
          "duration": 0.3708989999995538,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should extract from nested location",
          "status": "passed",
          "title": "should extract from nested location",
          "duration": 0.2556609999992361,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle empty vulnerabilities",
          "status": "passed",
          "title": "should handle empty vulnerabilities",
          "duration": 0.1599609999993845,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle vulnerabilities with no file info",
          "status": "passed",
          "title": "should handle vulnerabilities with no file info",
          "duration": 0.26718699999946693,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should deduplicate files",
          "status": "passed",
          "title": "should deduplicate files",
          "duration": 0.2188160000005155,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "File Extraction from Vulnerabilities"
          ],
          "fullName": "File Extraction from Vulnerabilities should handle mixed structures",
          "status": "passed",
          "title": "should handle mixed structures",
          "duration": 0.2535680000000866,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759804995752,
      "endTime": 1759804995755.2537,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/phase-executor/__tests__/file-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Current Problem: Multiple credential exchanges"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Current Problem: Multiple credential exchanges should demonstrate the problem - multiple managers create multiple exchanges",
          "status": "passed",
          "title": "should demonstrate the problem - multiple managers create multiple exchanges",
          "duration": 4.321952999999667,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing the Singleton Solution"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing the Singleton Solution should reuse the same credential manager instance",
          "status": "passed",
          "title": "should reuse the same credential manager instance",
          "duration": 1.409689999999955,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing Error Handling"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing Error Handling should throw on network errors without retry",
          "status": "passed",
          "title": "should throw on network errors without retry",
          "duration": 1.2366539999998167,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Lifecycle Issues - TDD",
            "Testing Credential Expiration Handling"
          ],
          "fullName": "Credential Lifecycle Issues - TDD Testing Credential Expiration Handling should detect expired credentials",
          "status": "passed",
          "title": "should detect expired credentials",
          "duration": 151.55040800000006,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805064204,
      "endTime": 1759805064363.5503,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/test/credentials/credential-lifecycle-proper.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should detect issues from GitHub only when no other platforms configured",
          "status": "passed",
          "title": "should detect issues from GitHub only when no other platforms configured",
          "duration": 1.8946909999999662,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should detect issues from both GitHub and Jira when configured",
          "status": "passed",
          "title": "should detect issues from both GitHub and Jira when configured",
          "duration": 1.3164500000000317,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should handle errors gracefully and continue with other platforms",
          "status": "passed",
          "title": "should handle errors gracefully and continue with other platforms",
          "duration": 2.932254999999941,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Multi-Platform Issue Detection"
          ],
          "fullName": "Multi-Platform Issue Detection should extract repository info from Jira issue description",
          "status": "passed",
          "title": "should extract repository info from Jira issue description",
          "duration": 1.3903990000001158,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063580,
      "endTime": 1759805063588.3904,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/tests/platforms/issue-detector.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Enhanced PHPUnit Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Enhanced PHPUnit Support should generate PHPUnit 9+ tests with modern assertions",
          "status": "passed",
          "title": "should generate PHPUnit 9+ tests with modern assertions",
          "duration": 4.301240000000007,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Enhanced PHPUnit Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Enhanced PHPUnit Support should generate PHPUnit tests with Laravel integration",
          "status": "passed",
          "title": "should generate PHPUnit tests with Laravel integration",
          "duration": 1.789102999999841,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests for file inclusion vulnerability",
          "status": "skipped",
          "title": "should generate Pest tests for file inclusion vulnerability",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests with dataset for multiple payloads",
          "status": "skipped",
          "title": "should generate Pest tests with dataset for multiple payloads",
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Pest Framework Support"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Pest Framework Support should generate Pest tests with Laravel helpers",
          "status": "passed",
          "title": "should generate Pest tests with Laravel helpers",
          "duration": 1.4329660000000786,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AdaptiveTestGenerator - PHP Framework Support",
            "Symfony Integration"
          ],
          "fullName": "AdaptiveTestGenerator - PHP Framework Support Symfony Integration should generate PHPUnit tests with Symfony WebTestCase",
          "status": "passed",
          "title": "should generate PHPUnit tests with Symfony WebTestCase",
          "duration": 1.524011999999857,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063308,
      "endTime": 1759805063317.524,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/adaptive-test-generator-php.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract JSON from markdown code blocks",
          "status": "passed",
          "title": "should extract JSON from markdown code blocks",
          "duration": 1.4029480000001513,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract JSON with curly braces in string values",
          "status": "passed",
          "title": "should extract JSON with curly braces in string values",
          "duration": 1.1526949999999943,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should handle JSON with escaped quotes in strings",
          "status": "passed",
          "title": "should handle JSON with escaped quotes in strings",
          "duration": 0.8211550000000898,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should extract the largest valid JSON object when multiple exist",
          "status": "passed",
          "title": "should extract the largest valid JSON object when multiple exist",
          "duration": 0.37782400000014604,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should handle incomplete JSON by attempting recovery",
          "status": "passed",
          "title": "should handle incomplete JSON by attempting recovery",
          "duration": 1.3868890000001102,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "parseTestSuite"
          ],
          "fullName": "AITestGenerator - JSON Extraction parseTestSuite should correctly extract JSON that comes after explanatory text",
          "status": "passed",
          "title": "should correctly extract JSON that comes after explanatory text",
          "duration": 0.8110639999999876,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AITestGenerator - JSON Extraction",
            "extractJsonFromResponse - utility function"
          ],
          "fullName": "AITestGenerator - JSON Extraction extractJsonFromResponse - utility function should use a proper JSON extraction method",
          "status": "passed",
          "title": "should use a proper JSON extraction method",
          "duration": 0.8675909999999476,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063602,
      "endTime": 1759805063608.8677,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/ai-test-generator-json-extraction.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructor should initialize with provided values",
          "status": "passed",
          "title": "constructor should initialize with provided values",
          "duration": 0.9591220000002068,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructPrompt should prioritize enhanced prompt when provided",
          "status": "passed",
          "title": "constructPrompt should prioritize enhanced prompt when provided",
          "duration": 0.7191250000000764,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Adapter"
          ],
          "fullName": "Claude Code Adapter constructPrompt should create default prompt when no enhanced prompt provided",
          "status": "passed",
          "title": "constructPrompt should create default prompt when no enhanced prompt provided",
          "duration": 0.29706499999974767,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805064513,
      "endTime": 1759805064515.297,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-code.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Base Prompt Updates"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Base Prompt Updates should include red-green-refactor validation in base prompt",
          "status": "passed",
          "title": "should include red-green-refactor validation in base prompt",
          "duration": 1.2497690000000148,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Base Prompt Updates"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Base Prompt Updates should include test running instructions in base prompt",
          "status": "passed",
          "title": "should include test running instructions in base prompt",
          "duration": 0.610486999999921,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include generated test code in prompt",
          "status": "passed",
          "title": "should include generated test code in prompt",
          "duration": 0.5749120000000403,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include test failure context on retry",
          "status": "passed",
          "title": "should include test failure context on retry",
          "duration": 0.3674660000001495,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Context Integration"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Context Integration should include iteration context",
          "status": "passed",
          "title": "should include iteration context",
          "duration": 0.2025389999998879,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Validation Instructions"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Validation Instructions should include test running instructions",
          "status": "passed",
          "title": "should include test running instructions",
          "duration": 0.2492010000000846,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Test Validation Instructions"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Test Validation Instructions should emphasize security test validation",
          "status": "passed",
          "title": "should emphasize security test validation",
          "duration": 0.18176200000016252,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Prompts - Test Validation Context",
            "Multiple Test Frameworks"
          ],
          "fullName": "Claude Code Prompts - Test Validation Context Multiple Test Frameworks should handle multiple test frameworks in prompt",
          "status": "passed",
          "title": "should handle multiple test frameworks in prompt",
          "duration": 0.2248850000000857,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063417,
      "endTime": 1759805063421.2249,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/claude-prompts-validation.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should use vended credentials for Anthropic API calls",
          "status": "passed",
          "title": "should use vended credentials for Anthropic API calls",
          "duration": 2.85904000000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should use vended credentials for OpenAI API calls",
          "status": "passed",
          "title": "should use vended credentials for OpenAI API calls",
          "duration": 1.4366929999998774,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should handle credential refresh during long-running tasks",
          "status": "passed",
          "title": "should handle credential refresh during long-running tasks",
          "duration": 1.139086000000134,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should fallback to direct API key if vending is disabled",
          "status": "passed",
          "title": "should fallback to direct API key if vending is disabled",
          "duration": 0.7781000000002223,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "AI Client with Credential Vending"
          ],
          "fullName": "AI Client with Credential Vending should handle vended credential errors gracefully",
          "status": "passed",
          "title": "should handle vended credential errors gracefully",
          "duration": 2.490651000000071,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063628,
      "endTime": 1759805063636.4907,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/client-with-credentials.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify SQL injection from description",
          "status": "passed",
          "title": "should identify SQL injection from description",
          "duration": 8.01201900000001,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify XSS from description",
          "status": "passed",
          "title": "should identify XSS from description",
          "duration": 3.308708999999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should identify multiple vulnerability types",
          "status": "passed",
          "title": "should identify multiple vulnerability types",
          "duration": 2.4274429999999825,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Vulnerability Type Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Vulnerability Type Extraction should handle OWASP terminology",
          "status": "passed",
          "title": "should handle OWASP terminology",
          "duration": 2.507266999999956,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should extract file paths from various formats",
          "status": "passed",
          "title": "should extract file paths from various formats",
          "duration": 1.8589420000000132,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should extract function names from code snippets",
          "status": "passed",
          "title": "should extract function names from code snippets",
          "duration": 1.5048869999999965,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Affected File and Function Extraction"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Affected File and Function Extraction should handle relative and absolute paths",
          "status": "passed",
          "title": "should handle relative and absolute paths",
          "duration": 0.6445909999999913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should detect critical severity",
          "status": "passed",
          "title": "should detect critical severity",
          "duration": 0.4511420000000044,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should detect severity from CVSS scores",
          "status": "passed",
          "title": "should detect severity from CVSS scores",
          "duration": 0.4265060000000176,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Severity Level Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Severity Level Detection should infer severity from language",
          "status": "passed",
          "title": "should infer severity from language",
          "duration": 0.5635809999999992,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Test Framework Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Test Framework Detection should detect mentioned test frameworks",
          "status": "passed",
          "title": "should detect mentioned test frameworks",
          "duration": 1.260834999999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Test Framework Detection"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Test Framework Detection should detect test file mentions",
          "status": "passed",
          "title": "should detect test file mentions",
          "duration": 0.4536549999999693,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Natural Language to Pattern Mapping"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Natural Language to Pattern Mapping should map descriptions to AST patterns",
          "status": "passed",
          "title": "should map descriptions to AST patterns",
          "duration": 0.4543809999999553,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Natural Language to Pattern Mapping"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Natural Language to Pattern Mapping should extract fix suggestions",
          "status": "passed",
          "title": "should extract fix suggestions",
          "duration": 0.5950330000000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should extract additional context from issue metadata",
          "status": "passed",
          "title": "should extract additional context from issue metadata",
          "duration": 0.43948699999998553,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should handle markdown formatting",
          "status": "passed",
          "title": "should handle markdown formatting",
          "duration": 0.5599170000000413,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Context Enhancement"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Context Enhancement should extract referenced URLs and PRs",
          "status": "passed",
          "title": "should extract referenced URLs and PRs",
          "duration": 0.4546009999999683,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Complex Real-World Examples"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Complex Real-World Examples should handle GitHub security advisory format",
          "status": "passed",
          "title": "should handle GitHub security advisory format",
          "duration": 1.5788119999999708,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter (TDD - Red Phase)",
            "Complex Real-World Examples"
          ],
          "fullName": "IssueInterpreter (TDD - Red Phase) Complex Real-World Examples should handle detailed vulnerability report",
          "status": "passed",
          "title": "should handle detailed vulnerability report",
          "duration": 2.9776089999999726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter Error Handling"
          ],
          "fullName": "IssueInterpreter Error Handling should handle empty issue body",
          "status": "passed",
          "title": "should handle empty issue body",
          "duration": 0.29622799999998506,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueInterpreter Error Handling"
          ],
          "fullName": "IssueInterpreter Error Handling should handle non-security issues gracefully",
          "status": "passed",
          "title": "should handle non-security issues gracefully",
          "duration": 0.5045369999999707,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805062230,
      "endTime": 1759805062263.5046,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/__tests__/issue-interpreter.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should complete initialization with timeout",
          "status": "passed",
          "title": "should complete initialization with timeout",
          "duration": 5.37317599999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle timeout on initialization gracefully",
          "status": "passed",
          "title": "should handle timeout on initialization gracefully",
          "duration": 105.26699099999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle timeout on usage reporting gracefully",
          "status": "passed",
          "title": "should handle timeout on usage reporting gracefully",
          "duration": 103.93737399999986,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should handle credential auto-refresh on expiration",
          "status": "passed",
          "title": "should handle credential auto-refresh on expiration",
          "duration": 153.22367000000008,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should not hang when API is slow",
          "status": "passed",
          "title": "should not hang when API is slow",
          "duration": 102.64972699999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Credential Manager Timeout Behavior"
          ],
          "fullName": "Credential Manager Timeout Behavior should clean up credentials on cleanup",
          "status": "passed",
          "title": "should clean up credentials on cleanup",
          "duration": 2.801437999999962,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063718,
      "endTime": 1759805064191.8015,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/credentials/__tests__/timeout.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "initialize"
          ],
          "fullName": "FeedbackStorage initialize should create empty feedback store if file does not exist",
          "status": "passed",
          "title": "should create empty feedback store if file does not exist",
          "duration": 2.4721379999999726,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "initialize"
          ],
          "fullName": "FeedbackStorage initialize should load existing data if file exists",
          "status": "passed",
          "title": "should load existing data if file exists",
          "duration": 0.6964999999999577,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should create feedback with generated ID",
          "status": "passed",
          "title": "should create feedback with generated ID",
          "duration": 1.0629200000000196,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should get feedback by ID",
          "status": "passed",
          "title": "should get feedback by ID",
          "duration": 0.7111320000000205,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return null when getting non-existent feedback",
          "status": "passed",
          "title": "should return null when getting non-existent feedback",
          "duration": 0.3536980000000085,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should update feedback",
          "status": "passed",
          "title": "should update feedback",
          "duration": 1.3522269999999708,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return null when updating non-existent feedback",
          "status": "passed",
          "title": "should return null when updating non-existent feedback",
          "duration": 0.8726629999999886,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should delete feedback",
          "status": "passed",
          "title": "should delete feedback",
          "duration": 2.167733999999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "CRUD operations"
          ],
          "fullName": "FeedbackStorage CRUD operations should return false when deleting non-existent feedback",
          "status": "passed",
          "title": "should return false when deleting non-existent feedback",
          "duration": 0.5025440000000003,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by issueId",
          "status": "passed",
          "title": "should query feedback by issueId",
          "duration": 0.8292189999999664,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by prId",
          "status": "passed",
          "title": "should query feedback by prId",
          "duration": 0.7040630000000192,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by reviewerId",
          "status": "passed",
          "title": "should query feedback by reviewerId",
          "duration": 0.8076859999999897,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by type",
          "status": "passed",
          "title": "should query feedback by type",
          "duration": 0.9107710000000111,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by sentiment",
          "status": "passed",
          "title": "should query feedback by sentiment",
          "duration": 0.6243509999999901,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by actionTaken",
          "status": "passed",
          "title": "should query feedback by actionTaken",
          "duration": 0.5177209999999945,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should query feedback by date range",
          "status": "passed",
          "title": "should query feedback by date range",
          "duration": 0.49533800000000383,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should limit query results",
          "status": "passed",
          "title": "should limit query results",
          "duration": 0.6717259999999783,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should combine multiple query parameters",
          "status": "passed",
          "title": "should combine multiple query parameters",
          "duration": 0.5689069999999674,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should get feedback for an issue",
          "status": "passed",
          "title": "should get feedback for an issue",
          "duration": 0.9524109999999837,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Query operations"
          ],
          "fullName": "FeedbackStorage Query operations should get feedback for a PR",
          "status": "passed",
          "title": "should get feedback for a PR",
          "duration": 2.9789049999999975,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "FeedbackStorage",
            "Stats"
          ],
          "fullName": "FeedbackStorage Stats should generate correct statistics",
          "status": "passed",
          "title": "should generate correct statistics",
          "duration": 9.468743000000018,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805062321,
      "endTime": 1759805062351.4688,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/feedback/__tests__/storage.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Label Manager"
          ],
          "fullName": "Label Manager should create missing labels",
          "status": "passed",
          "title": "should create missing labels",
          "duration": 2.1671540000002096,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Label Manager"
          ],
          "fullName": "Label Manager should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 1.081981000000269,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Label Manager"
          ],
          "fullName": "Label Manager should be case-insensitive when checking existing labels",
          "status": "passed",
          "title": "should be case-insensitive when checking existing labels",
          "duration": 0.8883850000001985,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805064429,
      "endTime": 1759805064433.8884,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/github/__tests__/label-manager.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Normal mode (RSOLV_TESTING_MODE not set)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Normal mode (RSOLV_TESTING_MODE not set) should mark as false positive when tests pass",
          "status": "passed",
          "title": "should mark as false positive when tests pass",
          "duration": 5.787640999999894,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Normal mode (RSOLV_TESTING_MODE not set)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Normal mode (RSOLV_TESTING_MODE not set) should mark as validated when tests fail",
          "status": "passed",
          "title": "should mark as validated when tests fail",
          "duration": 2.4852430000000822,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should mark as validated even when tests pass",
          "status": "passed",
          "title": "should mark as validated even when tests pass",
          "duration": 2.0741860000000543,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should still mark as validated when tests fail",
          "status": "passed",
          "title": "should still mark as validated when tests fail",
          "duration": 1.7912309999999252,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Testing mode (RSOLV_TESTING_MODE=true)"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Testing mode (RSOLV_TESTING_MODE=true) should include testing mode info in validation branch operations",
          "status": "passed",
          "title": "should include testing mode info in validation branch operations",
          "duration": 3.0452969999998913,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should respect RSOLV_TESTING_MODE=false as normal mode",
          "status": "passed",
          "title": "should respect RSOLV_TESTING_MODE=false as normal mode",
          "duration": 1.9758150000000114,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should handle testing mode with test generation failure",
          "status": "passed",
          "title": "should handle testing mode with test generation failure",
          "duration": 1.5061540000001514,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ValidationMode - RSOLV_TESTING_MODE",
            "Edge cases"
          ],
          "fullName": "ValidationMode - RSOLV_TESTING_MODE Edge cases should handle testing mode with analysis failure",
          "status": "passed",
          "title": "should handle testing mode with analysis failure",
          "duration": 1.0234209999998711,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063256,
      "endTime": 1759805063276.0234,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/modes/__tests__/validation-mode-testing-flag.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "findExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection findExistingIssue should find existing issue with matching vulnerability type label",
          "status": "passed",
          "title": "should find existing issue with matching vulnerability type label",
          "duration": 2.0669749999999567,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "findExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection findExistingIssue should return null when no existing issue found",
          "status": "passed",
          "title": "should return null when no existing issue found",
          "duration": 2.6476239999999507,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "updateExistingIssue"
          ],
          "fullName": "IssueCreator - Duplicate Detection updateExistingIssue should update existing issue with new scan results",
          "status": "passed",
          "title": "should update existing issue with new scan results",
          "duration": 1.757528000000093,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "createIssuesFromGroups with duplicate detection"
          ],
          "fullName": "IssueCreator - Duplicate Detection createIssuesFromGroups with duplicate detection should update existing issue instead of creating new one",
          "status": "passed",
          "title": "should update existing issue instead of creating new one",
          "duration": 1.2486480000000029,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "IssueCreator - Duplicate Detection",
            "createIssuesFromGroups with duplicate detection"
          ],
          "fullName": "IssueCreator - Duplicate Detection createIssuesFromGroups with duplicate detection should create new issue when no duplicate exists",
          "status": "passed",
          "title": "should create new issue when no duplicate exists",
          "duration": 1.000682000000097,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063697,
      "endTime": 1759805063706.0007,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/scanner/__tests__/issue-creator-duplicates.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use x-api-key header for pattern fetching",
          "status": "passed",
          "title": "should use x-api-key header for pattern fetching",
          "duration": 2.1148780000000897,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should NOT use Authorization Bearer header",
          "status": "passed",
          "title": "should NOT use Authorization Bearer header",
          "duration": 1.2315380000000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use query parameter for language",
          "status": "passed",
          "title": "should use query parameter for language",
          "duration": 1.0391210000000228,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle API key from environment variable",
          "status": "passed",
          "title": "should handle API key from environment variable",
          "duration": 0.8754619999999704,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle missing API key gracefully",
          "status": "passed",
          "title": "should handle missing API key gracefully",
          "duration": 0.6625409999999192,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should handle 401 unauthorized response",
          "status": "passed",
          "title": "should handle 401 unauthorized response",
          "duration": 4.411628000000064,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "x-api-key header usage"
          ],
          "fullName": "PatternAPIClient Authentication x-api-key header usage should use consistent authentication across all endpoints",
          "status": "passed",
          "title": "should use consistent authentication across all endpoints",
          "duration": 1.7188330000001315,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "Regression prevention for ADR-027"
          ],
          "fullName": "PatternAPIClient Authentication Regression prevention for ADR-027 should never use Bearer token for RSOLV API",
          "status": "passed",
          "title": "should never use Bearer token for RSOLV API",
          "duration": 1.6778799999999592,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "PatternAPIClient Authentication",
            "Regression prevention for ADR-027"
          ],
          "fullName": "PatternAPIClient Authentication Regression prevention for ADR-027 should use correct endpoint format with query parameters",
          "status": "passed",
          "title": "should use correct endpoint format with query parameters",
          "duration": 0.7748129999999946,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063537,
      "endTime": 1759805063551.775,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/__tests__/pattern-api-auth.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate HIGH confidence for scores >= 0.8",
          "status": "passed",
          "title": "should calculate HIGH confidence for scores >= 0.8",
          "duration": 1.0689800000000105,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate MEDIUM confidence for scores 0.5-0.79",
          "status": "passed",
          "title": "should calculate MEDIUM confidence for scores 0.5-0.79",
          "duration": 0.6147519999999531,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate LOW confidence for scores 0.2-0.49",
          "status": "passed",
          "title": "should calculate LOW confidence for scores 0.2-0.49",
          "duration": 0.36519399999997404,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Confidence Level Calculation"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Confidence Level Calculation should calculate REVIEW confidence for scores < 0.2",
          "status": "passed",
          "title": "should calculate REVIEW confidence for scores < 0.2",
          "duration": 0.2897549999997864,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return correct strategy for COMMAND_INJECTION",
          "status": "passed",
          "title": "should return correct strategy for COMMAND_INJECTION",
          "duration": 0.3667319999999563,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return correct strategy for XSS variants",
          "status": "passed",
          "title": "should return correct strategy for XSS variants",
          "duration": 0.30820200000016484,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "Validation Strategy Selection"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring Validation Strategy Selection should return DEFAULT strategy for unknown types",
          "status": "passed",
          "title": "should return DEFAULT strategy for unknown types",
          "duration": 0.227284999999938,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should return confidence scores instead of binary validation",
          "status": "passed",
          "title": "should return confidence scores instead of binary validation",
          "duration": 23.903645000000324,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should never return 0 vulnerabilities if scan found any",
          "status": "passed",
          "title": "should never return 0 vulnerabilities if scan found any",
          "duration": 1.4138229999998657,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "RFC-045: Validation Confidence Scoring",
            "EnhancedValidationEnricher (failing tests)"
          ],
          "fullName": "RFC-045: Validation Confidence Scoring EnhancedValidationEnricher (failing tests) should process command injection without synthetic data workaround",
          "status": "passed",
          "title": "should process command injection without synthetic data workaround",
          "duration": 1.648834000000079,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805064378,
      "endTime": 1759805064408.649,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/validation/__tests__/confidence-scoring.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "successful execution"
          ],
          "fullName": "Claude Code CLI Retry Mechanism successful execution should succeed on first attempt without retry",
          "status": "passed",
          "title": "should succeed on first attempt without retry",
          "duration": 10.655868999999996,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on rate limit error and succeed",
          "status": "passed",
          "title": "should retry on rate limit error and succeed",
          "duration": 31.168243000000018,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on overloaded error",
          "status": "passed",
          "title": "should retry on overloaded error",
          "duration": 61.071199999999976,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "retry on transient failures"
          ],
          "fullName": "Claude Code CLI Retry Mechanism retry on transient failures should retry on network errors",
          "status": "passed",
          "title": "should retry on network errors",
          "duration": 30.924544000000026,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "non-retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism non-retryable errors should not retry on invalid API key error",
          "status": "passed",
          "title": "should not retry on invalid API key error",
          "duration": 10.56788199999994,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "non-retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism non-retryable errors should not retry on permission denied",
          "status": "passed",
          "title": "should not retry on permission denied",
          "duration": 10.629738999999972,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "max attempts"
          ],
          "fullName": "Claude Code CLI Retry Mechanism max attempts should respect max attempts configuration",
          "status": "passed",
          "title": "should respect max attempts configuration",
          "duration": 30.994552,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "max attempts"
          ],
          "fullName": "Claude Code CLI Retry Mechanism max attempts should fail after all retries exhausted",
          "status": "passed",
          "title": "should fail after all retries exhausted",
          "duration": 60.412379999999985,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "exponential backoff"
          ],
          "fullName": "Claude Code CLI Retry Mechanism exponential backoff should apply exponential backoff between retries",
          "status": "passed",
          "title": "should apply exponential backoff between retries",
          "duration": 61.70182199999999,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "exponential backoff"
          ],
          "fullName": "Claude Code CLI Retry Mechanism exponential backoff should cap delay at maxDelayMs",
          "status": "passed",
          "title": "should cap delay at maxDelayMs",
          "duration": 71.39783599999998,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "custom retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism custom retryable errors should use custom retryable error list",
          "status": "passed",
          "title": "should use custom retryable error list",
          "duration": 30.991090999999983,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code CLI Retry Mechanism",
            "custom retryable errors"
          ],
          "fullName": "Claude Code CLI Retry Mechanism custom retryable errors should not retry errors not in custom list",
          "status": "passed",
          "title": "should not retry errors not in custom list",
          "duration": 10.674151999999935,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should detect development mode via RSOLV_DEV_MODE",
          "status": "passed",
          "title": "should detect development mode via RSOLV_DEV_MODE",
          "duration": 0.329654000000005,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should detect development mode via USE_CLAUDE_CODE_MAX",
          "status": "passed",
          "title": "should detect development mode via USE_CLAUDE_CODE_MAX",
          "duration": 0.08234900000002199,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should use Claude Code Max key in dev mode",
          "status": "passed",
          "title": "should use Claude Code Max key in dev mode",
          "duration": 0.0760530000000017,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should fall back to regular key if Max key not set",
          "status": "passed",
          "title": "should fall back to regular key if Max key not set",
          "duration": 0.08518399999991288,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Claude Code Max Development Mode",
            "API key selection"
          ],
          "fullName": "Claude Code Max Development Mode API key selection should use regular key in production mode",
          "status": "passed",
          "title": "should use regular key in production mode",
          "duration": 0.07838600000002316,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805062369,
      "endTime": 1759805062792.3296,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-cli-retry.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "generateSolution"
          ],
          "fullName": "ClaudeCodeCLIAdapter generateSolution should fail without ANTHROPIC_API_KEY",
          "status": "passed",
          "title": "should fail without ANTHROPIC_API_KEY",
          "duration": 1.201148000000103,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "constructPrompt"
          ],
          "fullName": "ClaudeCodeCLIAdapter constructPrompt should generate structured phased prompt when enabled",
          "status": "passed",
          "title": "should generate structured phased prompt when enabled",
          "duration": 0.7614629999998215,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ClaudeCodeCLIAdapter",
            "constructPrompt"
          ],
          "fullName": "ClaudeCodeCLIAdapter constructPrompt should generate regular prompt when structured phases disabled",
          "status": "passed",
          "title": "should generate regular prompt when structured phases disabled",
          "duration": 0.34223100000008344,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805064525,
      "endTime": 1759805064527.3423,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/claude-code-cli.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should generate complete prompt with all vulnerability details",
          "status": "passed",
          "title": "should generate complete prompt with all vulnerability details",
          "duration": 15.813329000000067,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should handle missing specificVulnerabilities gracefully",
          "status": "passed",
          "title": "should handle missing specificVulnerabilities gracefully",
          "duration": 6.118185999999923,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "End-to-end prompt generation with specificVulnerabilities"
          ],
          "fullName": "Prompt Generation Integration Tests End-to-end prompt generation with specificVulnerabilities should preserve vulnerabilities through validation iterations",
          "status": "passed",
          "title": "should preserve vulnerabilities through validation iterations",
          "duration": 7.641719000000194,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "Prompt Generation Integration Tests",
            "Prompt structure validation"
          ],
          "fullName": "Prompt Generation Integration Tests Prompt structure validation should order prompt sections correctly",
          "status": "passed",
          "title": "should order prompt sections correctly",
          "duration": 7.312802999999803,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063440,
      "endTime": 1759805063477.3127,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/ai/adapters/__tests__/prompt-generation-integration.test.ts"
    },
    {
      "assertionResults": [
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "initialization"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality initialization should initialize with config",
          "status": "passed",
          "title": "should initialize with config",
          "duration": 1.6040869999999359,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "initialization"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality initialization should use environment variables as fallback",
          "status": "passed",
          "title": "should use environment variables as fallback",
          "duration": 0.7856670000001031,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should analyze single file",
          "status": "passed",
          "title": "should analyze single file",
          "duration": 2.052814000000126,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should handle empty file content",
          "status": "passed",
          "title": "should handle empty file content",
          "duration": 1.860386999999946,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality file analysis should handle API errors gracefully",
          "status": "passed",
          "title": "should handle API errors gracefully",
          "duration": 2.1661149999999907,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should analyze multiple files using analyze method",
          "status": "passed",
          "title": "should analyze multiple files using analyze method",
          "duration": 1.982148000000052,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should handle empty file list",
          "status": "passed",
          "title": "should handle empty file list",
          "duration": 1.1537889999999607,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "batch file analysis"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality batch file analysis should respect file count limits",
          "status": "passed",
          "title": "should respect file count limits",
          "duration": 0.7224060000000918,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "session management"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality session management should reuse sessions within timeout",
          "status": "passed",
          "title": "should reuse sessions within timeout",
          "duration": 1.452525999999807,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "session management"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality session management should create new session when expired",
          "status": "passed",
          "title": "should create new session when expired",
          "duration": 1.4730709999998908,
          "failureMessages": [],
          "meta": {}
        },
        {
          "ancestorTitles": [
            "ElixirASTAnalyzer - Core Functionality",
            "cleanup"
          ],
          "fullName": "ElixirASTAnalyzer - Core Functionality cleanup should cleanup sessions on cleanup call",
          "status": "passed",
          "title": "should cleanup sessions on cleanup call",
          "duration": 1.6625169999999798,
          "failureMessages": [],
          "meta": {}
        }
      ],
      "startTime": 1759805063505,
      "endTime": 1759805063522.6626,
      "status": "passed",
      "message": "",
      "name": "/home/dylan/dev/rsolv/RSOLV-action/src/security/analyzers/__tests__/elixir-ast-analyzer-core.test.ts"
    }
  ],
  "passRate": "82.81%"
}