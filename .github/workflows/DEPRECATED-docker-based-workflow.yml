# ⚠️ DEPRECATED: Docker-Based RSOLV Workflow
#
# THIS TEMPLATE IS DEPRECATED - DO NOT USE FOR NEW DEPLOYMENTS
#
# ❌ Known Issues:
# - Docker .git mounting problems (VALIDATE/MITIGATE phases fail)
# - Slower: ~10+ minutes vs ~1 minute with GitHub Action
# - More complex: Requires Docker build step
# - Failed in production testing (Phase 4.2)
#
# ✅ USE INSTEAD:
# - TEMPLATE-rsolv-simple-scan.yml (recommended)
# - TEMPLATE-rsolv-full-pipeline.yml (advanced)
#
# Why this is kept:
# - Historical reference showing Docker → GitHub Action evolution
# - May be useful for air-gapped/self-hosted runner environments
# - Documents the git mounting issue for troubleshooting
#
# ============================================================================
# ORIGINAL DOCUMENTATION (FOR REFERENCE ONLY)
# ============================================================================
#
# This was the original Docker-based workflow approach.
# It builds a Docker image and runs RSOLV inside containers.
#
# Problems discovered in Phase 4.2 testing:
# - SCAN phase: ✅ Works (7 seconds, 53 files, 28 vulnerabilities)
# - VALIDATE phase: ❌ Fails with "fatal: not a git repository"
# - MITIGATE phase: ❌ Fails with "fatal: not a git repository"
# - Root cause: .git directory not accessible inside Docker container

name: RSOLV Security Scan

on:
  workflow_dispatch:
  push:
    branches: [main, 'feature/**']

permissions:
  contents: write
  pull-requests: write
  issues: write

env:
  DOCKER_IMAGE: rsolv/action:latest
  WORKSPACE_PATH: /workspace

jobs:
  security-scan:
    runs-on: ubuntu-latest

    steps:
      # Checkout THIS repository (the one being scanned)
      - name: Checkout repository
        uses: actions/checkout@v4

      # Clone the RSOLV-action to build the Docker image
      - name: Clone RSOLV-action
        run: git clone --depth=1 https://github.com/RSOLV-dev/RSOLV-action.git rsolv-action-build

      # Setup Bun for building
      - name: Setup Bun
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      # Build the RSOLV-action Docker image
      - name: Build RSOLV-action
        working-directory: rsolv-action-build
        run: |
          bun install
          docker build -t $DOCKER_IMAGE .

      # Run SCAN phase
      - name: Run SCAN phase
        id: scan
        run: |
          docker run --rm \
            -v $(pwd):$WORKSPACE_PATH \
            -w $WORKSPACE_PATH \
            -e RSOLV_MODE=scan \
            -e INPUT_MODE=scan \
            -e RSOLV_SCAN_MODE=scan \
            -e RSOLV_ENABLE_SECURITY_ANALYSIS=true \
            -e GITHUB_WORKSPACE=$WORKSPACE_PATH \
            -e GITHUB_OUTPUT=/tmp/github_output \
            $DOCKER_IMAGE

          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Run VALIDATE phase
      - name: Run VALIDATE phase
        id: validate
        if: success() || failure()
        run: |
          docker run --rm \
            -v $(pwd):$WORKSPACE_PATH \
            -w $WORKSPACE_PATH \
            -e RSOLV_MODE=validate \
            -e INPUT_MODE=validate \
            -e RSOLV_ENABLE_AST_VALIDATION=true \
            -e GITHUB_WORKSPACE=$WORKSPACE_PATH \
            -e GITHUB_OUTPUT=/tmp/github_output \
            $DOCKER_IMAGE

          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
            exit 1
          fi

      # Run MITIGATE phase
      - name: Run MITIGATE phase
        id: mitigate
        if: success() || failure()
        run: |
          docker run --rm \
            -v $(pwd):$WORKSPACE_PATH \
            -w $WORKSPACE_PATH \
            -e RSOLV_MODE=mitigate \
            -e INPUT_MODE=mitigate \
            -e RSOLV_USE_GIT_BASED_EDITING=true \
            -e ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }} \
            -e GITHUB_WORKSPACE=$WORKSPACE_PATH \
            -e GITHUB_OUTPUT=/tmp/github_output \
            $DOCKER_IMAGE

          if [ $? -eq 0 ]; then
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=failure" >> $GITHUB_OUTPUT
          fi

          # Check if files were modified
          modified=$(git status --short | wc -l)
          echo "modified=$modified" >> $GITHUB_OUTPUT

          if [ "$modified" -eq 0 ]; then
            echo "⚠️ No files modified by MITIGATE phase"
            exit 1
          fi

      # Upload scan results and logs
      - name: Upload artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: rsolv-scan-results
          path: |
            **/*.json
            **/*.log
            .rsolv/**
          retention-days: 30

      # Generate summary
      - name: Generate summary
        if: always()
        run: |
          cat >> $GITHUB_STEP_SUMMARY <<'EOF'
          # RSOLV Security Scan Results

          **Repository:** ${{ github.repository }}
          **Branch:** ${{ github.ref_name }}
          **Run:** ${{ github.run_id }}

          ## Phase Results
          - **SCAN:** ${{ steps.scan.outputs.status }}
          - **VALIDATE:** ${{ steps.validate.outputs.status }}
          - **MITIGATE:** ${{ steps.mitigate.outputs.status }}

          **Files Modified:** ${{ steps.mitigate.outputs.modified }}

          ## Artifacts
          Full scan results are available in the workflow artifacts.
          EOF

      # Comment on PR if running in PR context
      - name: Comment on PR
        if: failure() && github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.createComment({
              issue_number: context.payload.pull_request.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ❌ RSOLV Security scan failed

              **SCAN:** ${{ steps.scan.outputs.status }}
              **VALIDATE:** ${{ steps.validate.outputs.status }}
              **MITIGATE:** ${{ steps.mitigate.outputs.status }}
              **Modified files:** ${{ steps.mitigate.outputs.modified }}

              [View workflow run](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            });
