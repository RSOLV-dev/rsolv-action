# TEMPLATE: RSOLV Full Security Pipeline (Scan → Validate → Mitigate)
#
# ✅ ADVANCED TEMPLATE - Full three-phase security automation
# Based on proven nodegoat deployment patterns
#
# QUICK START:
# 1. Copy to: .github/workflows/rsolv-full-pipeline.yml
# 2. Add secrets in Settings → Secrets → Actions:
#    - RSOLV_API_KEY: Your RSOLV API key
#    - ANTHROPIC_API_KEY: Your Anthropic API key (for AI-powered fixes)
# 3. Commit and push
#
# WHAT THIS DOES:
# Phase 1 (SCAN): Detect vulnerabilities, create GitHub Issues
# Phase 2 (VALIDATE): Use AST analysis to verify findings, reduce false positives
# Phase 3 (MITIGATE): Generate AI-powered fixes, create Pull Requests
#
# RUNTIME: 5-10 minutes total for all three phases

name: RSOLV Full Security Pipeline

on:
  # Manual trigger with options
  workflow_dispatch:
    inputs:
      max_issues:
        description: 'Maximum number of issues to process'
        required: false
        default: '5'
        type: string
      create_prs:
        description: 'Create PRs with fixes'
        required: false
        default: 'true'
        type: choice
        options:
          - 'true'
          - 'false'

  # Optional: Weekly scheduled scan
  # schedule:
  #   - cron: '0 0 * * 1'  # Every Monday at midnight

permissions:
  contents: write       # Create branches and commits
  issues: write         # Create/update issues
  pull-requests: write  # Create pull requests

jobs:
  # Phase 1: SCAN - Detect vulnerabilities
  scan:
    name: "Phase 1: Detect Vulnerabilities"
    runs-on: ubuntu-latest
    outputs:
      issues_created: ${{ steps.scan.outputs.issues_created }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: RSOLV Scan - Detect Vulnerabilities
        id: scan
        uses: RSOLV-dev/rsolv-action@v3.7.47  # ⚠️ Use v3.7.47+
        with:
          rsolvApiKey: ${{ secrets.RSOLV_API_KEY }}
          mode: 'scan'
          max_issues: ${{ inputs.max_issues || 5 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Scan Summary
        run: |
          echo "✅ Phase 1 Complete: Detected vulnerabilities"
          echo "Issues created: ${{ steps.scan.outputs.issues_created || 'Check Issues tab' }}"

  # Phase 2: VALIDATE - Verify with AST analysis
  validate:
    name: "Phase 2: Validate Findings"
    runs-on: ubuntu-latest
    needs: scan
    if: needs.scan.result == 'success'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: RSOLV Validate - AST Analysis
        id: validate
        uses: RSOLV-dev/rsolv-action@v3.7.47
        with:
          rsolvApiKey: ${{ secrets.RSOLV_API_KEY }}
          mode: 'validate'
          issue_label: 'rsolv:detected'  # Process issues with this label
          max_issues: ${{ inputs.max_issues || 5 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Validation Summary
        run: |
          echo "✅ Phase 2 Complete: Validated vulnerabilities"
          echo "False positives filtered, issues updated with 'rsolv:validated' label"

  # Phase 3: MITIGATE - Generate fixes
  mitigate:
    name: "Phase 3: Generate Fixes"
    runs-on: ubuntu-latest
    needs: [scan, validate]
    if: needs.validate.result == 'success' && inputs.create_prs != 'false'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Git for PRs
        run: |
          git config --global user.name "RSOLV Bot"
          git config --global user.email "bot@rsolv.dev"

      - name: RSOLV Mitigate - Generate Fixes
        id: mitigate
        uses: RSOLV-dev/rsolv-action@v3.7.47
        with:
          rsolvApiKey: ${{ secrets.RSOLV_API_KEY }}
          mode: 'mitigate'
          issue_label: 'rsolv:validated'  # Fix validated issues
          max_issues: ${{ inputs.max_issues || 5 }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}  # For AI fixes

      - name: Mitigation Summary
        run: |
          echo "✅ Phase 3 Complete: Generated fixes"
          echo "Check Pull Requests tab for proposed security fixes"

  # Final summary job
  summary:
    name: "Pipeline Summary"
    runs-on: ubuntu-latest
    needs: [scan, validate, mitigate]
    if: always()

    steps:
      - name: Generate Summary Report
        run: |
          echo "# 🔐 RSOLV Security Pipeline Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Phase Status" >> $GITHUB_STEP_SUMMARY
          echo "- **SCAN:** ${{ needs.scan.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **VALIDATE:** ${{ needs.validate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- **MITIGATE:** ${{ needs.mitigate.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Review created issues in Issues tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Check Pull Requests for security fixes" >> $GITHUB_STEP_SUMMARY
          echo "3. Review and merge appropriate fixes" >> $GITHUB_STEP_SUMMARY

# CONFIGURATION OPTIONS:
#
# Workflow Modes:
# - 'scan': Detect vulnerabilities only
# - 'validate': Verify detected issues with AST
# - 'mitigate': Generate fixes for validated issues
# - 'full': Run all phases in single job
#
# Common Parameters:
# - max_issues: Limit number of issues processed (reduce runtime)
# - issue_label: Filter issues by label
# - rsolvApiKey: RSOLV API key (required)
#
# Performance Tips:
# - Use max_issues to limit scope for demos/testing
# - Run phases independently for better control
# - Schedule weekly full scans, manual runs for specific issues
#
# Troubleshooting:
# - Workflow hangs: Update to v3.7.47+ (v3.6.x has bugs)
# - No issues created: Check RSOLV_API_KEY is set
# - Validation fails: Normal for some patterns, issues remain tagged
# - No PRs created: Check ANTHROPIC_API_KEY is set