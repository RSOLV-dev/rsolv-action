# RSOLV Three-Phase Security Workflow Template
#
# This workflow demonstrates the complete RSOLV security automation pipeline:
# 1. SCAN: Detect vulnerabilities and create GitHub issues (one per vulnerability type)
# 2. VALIDATE: Enrich issues with AST analysis and reduce false positives
#    - RFC-058: Creates validation branches with RED tests (when fully integrated)
# 3. MITIGATE: Generate targeted security fixes via AI and create focused PRs
#    - RFC-058: Uses tests from validation branch for test-aware fix generation
#
# Usage:
#   1. Add this file to .github/workflows/ in your repository
#   2. Set up RSOLV_API_KEY secret in your repository settings
#   3. Run workflow manually via Actions tab or let it trigger on pushes
#
# Requirements:
#   - RSOLV_API_KEY secret (get yours at https://rsolv.dev)
#   - Contents: write permission (REQUIRED for RFC-058 validation branch creation)
#   - Issues: write and Pull-requests: write permissions for GitHub Actions
#   - "Allow GitHub Actions to create and approve pull requests" enabled
#
# RFC-058 Status (September 2025):
#   - ValidationMode class implemented with branch persistence
#   - Integration with PhaseExecutor pending
#   - See rsolv-validate-with-branch-persistence.yml for RFC-058 specific workflow

name: RSOLV Three-Phase Security Workflow

on:
  workflow_dispatch:
    inputs:
      mode:
        description: 'Operation mode'
        required: false
        default: 'scan'
        type: choice
        options:
        - scan      # Detect vulnerabilities and create issues
        - validate  # Enrich existing issues with detailed analysis
        - mitigate  # Generate fixes for labeled issues
        - full      # Run all phases sequentially
      demo_mode:
        description: 'Enable demo mode (auto-processes all created issues)'
        required: false
        default: false
        type: boolean

  # Uncomment to enable automatic scanning on code changes
  # push:
  #   branches: [ main, develop ]
  # pull_request:
  #   branches: [ main ]

jobs:
  rsolv-security:
    name: RSOLV Security Analysis
    runs-on: ubuntu-latest

    # Required permissions for RSOLV to create issues and PRs
    permissions:
      contents: write        # Read code and create commits
      pull-requests: write   # Create and update pull requests
      issues: write         # Create and update security issues

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          # Fetch full history for better context analysis
          fetch-depth: 0

      - name: Run RSOLV Three-Phase Security Analysis
        uses: rsolv-dev/rsolv-action@main
        with:
          # ===== CORE CONFIGURATION =====
          rsolvApiKey: ${{ secrets.RSOLV_API_KEY }}
          mode: ${{ github.event.inputs.mode || 'scan' }}

          # ===== SCAN PHASE CONFIGURATION =====
          scan_mode: 'scan'  # Enable issue creation during scan phase

          # ===== VALIDATION CONFIGURATION =====
          enable_security_analysis: 'true'   # Enable AI-powered security analysis
          enable_ast_validation: 'true'      # Use AST parsing to reduce false positives

          # ===== MITIGATION CONFIGURATION =====
          use_git_based_editing: 'true'      # Use Git-based file editing for safer fixes
          use_structured_phases: 'true'      # Enable structured three-phase processing
          enable_educational_pr: 'true'      # Include security education in PR descriptions

          # ===== OPTIONAL LIMITS =====
          max_issues: '10'                   # Maximum issues to process in one run

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

          # ===== DEMO CONFIGURATION =====
          # When demo_mode is enabled, all created issues are automatically labeled
          # with 'rsolv:automate' which triggers immediate processing
          RSOLV_DEMO_MODE: ${{ github.event.inputs.demo_mode || 'false' }}

          # ===== OPTIONAL ENVIRONMENT VARIABLES =====
          # RSOLV_LOG_LEVEL: 'debug'           # Enable debug logging
          # DISABLE_FIX_VALIDATION: 'false'    # Disable fix validation (not recommended)

      # ===== POST-PROCESSING STEPS =====
      - name: Display Scan Results
        if: steps.rsolv.outputs.scan_results != ''
        run: |
          echo "üîç Vulnerability Scan Results:"
          echo "${{ steps.rsolv.outputs.scan_results }}"

      - name: Display Created Issues
        if: steps.rsolv.outputs.created_issues != ''
        run: |
          echo "üìã Created GitHub Issues:"
          echo "${{ steps.rsolv.outputs.created_issues }}"

      - name: Security Analysis Summary
        run: |
          echo "‚úÖ RSOLV Security Analysis Complete"
          echo ""
          echo "üìä What happens next:"
          echo "1. Check the 'Issues' tab for detected vulnerabilities"
          echo "2. Each issue represents one vulnerability type found in your code"
          echo "3. Issues labeled 'rsolv:automate' will trigger automatic fix generation"
          echo "4. Pull requests will be created with targeted security fixes"
          echo ""
          echo "üîó Learn more: https://docs.rsolv.dev/three-phase-workflow"