/**
 * Type definitions for vulnerability data structures
 * These types ensure compile-time safety and prevent runtime errors
 */

/**
 * Vulnerability as it comes from the scanner
 */
export interface ScannedVulnerability {
  type: string;
  severity: 'low' | 'medium' | 'high' | 'critical';
  line: number;
  message: string;
  description: string;
  confidence: number;
  cweId: string;
  owaspCategory: string;
  remediation: string;
  file: string; // Scanner provides singular 'file'
}

/**
 * Vulnerability as stored in validation data
 * This is what comes from validationAny.vulnerabilities
 */
export interface ValidatedVulnerability {
  type: string;
  file: string;
  line: number;
  severity?: string;
  confidence?: number | string;
  description?: string;
  // Allow other properties but maintain type safety
  [key: string]: unknown;
}

/**
 * Validation data structure from the platform
 */
export interface ValidationData {
  confidence: 'high' | 'medium' | 'low' | 'review';
  enriched: boolean;
  hasSpecificVulnerabilities: boolean;
  issueNumber: number;
  timestamp: string;
  validated: boolean;
  vulnerabilities: ValidatedVulnerability[];
  overallConfidence?: string;
}

/**
 * File information with vendor status
 */
export interface FileVendorInfo {
  file: string;
  isVendor: boolean;
}

/**
 * Enhanced issue with validation data
 */
export interface EnhancedIssue {
  title: string;
  body: string;
  labels?: string[];
  validationData: ValidationData;
  specificVulnerabilities: ValidatedVulnerability[];
}

/**
 * Scan phase data structure
 */
export interface ScanPhaseData {
  analysisData: {
    canBeFixed: boolean;
    issueType?: string;
    filesToModify?: string[];
    suggestedApproach?: string;
    estimatedComplexity?: string;
    vulnerabilityType?: string;
    severity?: string;
    reason?: string;
    cwe?: string;
    isAiGenerated?: boolean;
  };
  gitStatus?: {
    clean: boolean;
    modifiedFiles?: string[];
  };
  canBeFixed?: boolean;
}

/**
 * Validation phase data structure
 */
export interface ValidationPhaseData {
  generatedTests?: {
    success: boolean;
    testSuite?: any;
    tests?: Array<{
      testCode: string;
      framework: string;
      [key: string]: any;
    }>;
    redTest?: string;
    greenTest?: string;
    refactorTest?: string;
    falsePositive?: boolean;
    reason?: string;
    testExecutionFailed?: boolean;
    error?: string;
    existingTests?: boolean;
    testFramework?: string;
    testsIntegrated?: boolean;
    testFile?: string;
  };
  validated?: boolean;
  redTests?: any;
  testResults?: any;
  falsePositiveReason?: string;
  timestamp?: string;
  hasSpecificVulnerabilities?: boolean;
  vulnerabilities?: ValidatedVulnerability[];
  confidence?: 'high' | 'medium' | 'low';
  issueNumber?: number;
  falsePositive?: boolean;
  testExecutionFailed?: boolean;
  testGenerationFailed?: boolean;
  canBeFixed?: boolean;
  usedPriorScan?: boolean;
}

/**
 * Phase metadata for storage
 */
export interface PhaseMetadata {
  repo: string;
  issueNumber?: number;
  commitSha?: string;
  timestamp?: string;
}