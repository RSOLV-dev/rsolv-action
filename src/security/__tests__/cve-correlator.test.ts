import { describe, it, expect } from 'bun:test';
import { CveCorrelator } from '../cve-correlator.js';
import { VulnerabilityType } from '../types.js';

describe('CveCorrelator', () => {
  const correlator = new CveCorrelator();

  const sampleVulnerability = {
    type: VulnerabilityType.SQL_INJECTION,
    severity: 'high' as const,
    line: 10,
    message: 'SQL injection vulnerability detected',
    description: 'Potential SQL injection in database query',
    cweId: 'CWE-89',
    owaspCategory: 'A03:2021 - Injection',
    confidence: 85
  };

  describe('CVE Database Correlation', () => {
    it('should correlate vulnerabilities with known CVE entries', async () => {
      const correlationResult = await correlator.correlateWithCve([sampleVulnerability]);

      expect(correlationResult.correlations).toBeDefined();
      expect(correlationResult.correlations.length).toBeGreaterThan(0);
      expect(correlationResult.totalCves).toBeGreaterThan(0);
      expect(correlationResult.highSeverityCves).toBeDefined();
    });

    it('should map CVE severity scores to our risk levels', async () => {
      const correlationResult = await correlator.correlateWithCve([sampleVulnerability]);
      
      const sqlInjectionCorrelations = correlationResult.correlations.filter(
        c => c.vulnerability.type === VulnerabilityType.SQL_INJECTION
      );

      expect(sqlInjectionCorrelations.length).toBeGreaterThan(0);
      
      for (const correlation of sqlInjectionCorrelations) {
        expect(correlation.relatedCves.length).toBeGreaterThan(0);
        expect(correlation.maxCvssScore).toBeGreaterThanOrEqual(0);
        expect(correlation.maxCvssScore).toBeLessThanOrEqual(10);
        expect(correlation.riskLevel).toMatch(/low|medium|high|critical/);
      }
    });

    it('should handle multiple vulnerability types', async () => {
      const vulnerabilities = [
        sampleVulnerability,
        {
          ...sampleVulnerability,
          type: VulnerabilityType.XSS,
          cweId: 'CWE-79',
          owaspCategory: 'A03:2021 - Injection'
        }
      ];

      const correlationResult = await correlator.correlateWithCve(vulnerabilities);

      expect(correlationResult.correlations.length).toBe(2);
      
      const vulnTypes = new Set(correlationResult.correlations.map(c => c.vulnerability.type));
      expect(vulnTypes.size).toBe(2);
      expect(vulnTypes.has(VulnerabilityType.SQL_INJECTION)).toBe(true);
      expect(vulnTypes.has(VulnerabilityType.XSS)).toBe(true);
    });
  });

  describe('CWE to CVE Mapping', () => {
    it('should find CVEs related to CWE-89 (SQL Injection)', async () => {
      const cveEntries = await correlator.findCvesByCwe('CWE-89');

      expect(cveEntries.length).toBeGreaterThan(0);
      
      for (const cve of cveEntries) {
        expect(cve.id).toMatch(/CVE-\d{4}-\d+/);
        expect(cve.description).toBeDefined();
        expect(cve.cvssScore).toBeGreaterThanOrEqual(0);
        expect(cve.cvssScore).toBeLessThanOrEqual(10);
        expect(cve.severity).toMatch(/LOW|MEDIUM|HIGH|CRITICAL/);
      }
    });

    it('should find CVEs related to CWE-79 (XSS)', async () => {
      const cveEntries = await correlator.findCvesByCwe('CWE-79');

      expect(cveEntries.length).toBeGreaterThan(0);
      expect(cveEntries[0].id).toMatch(/CVE-\d{4}-\d+/);
    });

    it('should handle unknown CWE IDs gracefully', async () => {
      const cveEntries = await correlator.findCvesByCwe('CWE-99999');

      expect(cveEntries).toBeDefined();
      expect(Array.isArray(cveEntries)).toBe(true);
      // Should return empty array for unknown CWE IDs
    });
  });

  describe('Risk Assessment Enhancement', () => {
    it('should enhance vulnerability risk assessment with CVE data', async () => {
      const enhancedVulns = await correlator.enhanceWithCveRisk([sampleVulnerability]);

      expect(enhancedVulns.length).toBe(1);
      
      const enhanced = enhancedVulns[0];
      expect(enhanced.cveInfo).toBeDefined();
      expect(enhanced.cveInfo?.relatedCveCount).toBeGreaterThan(0);
      expect(enhanced.cveInfo?.maxCvssScore).toBeGreaterThanOrEqual(0);
      expect(enhanced.cveInfo?.averageCvssScore).toBeGreaterThanOrEqual(0);
      expect(enhanced.cveInfo?.enhancedRisk).toMatch(/low|medium|high|critical/);
    });

    it('should calculate appropriate enhanced risk levels', async () => {
      const vulnerabilities = [
        { ...sampleVulnerability, severity: 'low' as const },
        { ...sampleVulnerability, severity: 'high' as const }
      ];

      const enhancedVulns = await correlator.enhanceWithCveRisk(vulnerabilities);

      const lowSeverityEnhanced = enhancedVulns.find(v => v.severity === 'low');
      const highSeverityEnhanced = enhancedVulns.find(v => v.severity === 'high');

      expect(lowSeverityEnhanced?.cveInfo?.enhancedRisk).toBeDefined();
      expect(highSeverityEnhanced?.cveInfo?.enhancedRisk).toBeDefined();
    });
  });

  describe('CVE Database Management', () => {
    it('should have access to CVE database with recent entries', async () => {
      const stats = await correlator.getDatabaseStats();

      expect(stats.totalCves).toBeGreaterThan(5); // We have 9 CVEs in our simulated database
      expect(stats.lastUpdated).toBeDefined();
      expect(stats.coverageByYear).toBeDefined();
      expect(stats.topCweCategories.length).toBeGreaterThan(2);
    });

    it('should provide CVE search capabilities', async () => {
      const searchResults = await correlator.searchCves({
        keyword: 'sql injection',
        severityMin: 7.0,
        limit: 10
      });

      expect(searchResults.results.length).toBeLessThanOrEqual(10);
      expect(searchResults.total).toBeGreaterThan(0);
      
      for (const result of searchResults.results) {
        expect(result.cvssScore).toBeGreaterThanOrEqual(7.0);
        expect(result.description.toLowerCase()).toMatch(/sql|injection/);
      }
    });
  });

  describe('Integration with Security Analysis', () => {
    it('should generate CVE-enhanced security reports', async () => {
      const vulnerabilities = [sampleVulnerability];
      const report = await correlator.generateCveEnhancedReport(vulnerabilities);

      expect(report.vulnerabilities).toHaveLength(1);
      expect(report.cveCorrelations).toBeDefined();
      expect(report.riskAssessment).toBeDefined();
      expect(report.riskAssessment.overallRisk).toMatch(/low|medium|high|critical/);
      expect(report.recommendations).toBeDefined();
      expect(report.recommendations.length).toBeGreaterThan(0);
    });

    it('should provide actionable CVE-based recommendations', async () => {
      const vulnerabilities = [
        sampleVulnerability,
        { ...sampleVulnerability, type: VulnerabilityType.XSS, cweId: 'CWE-79' }
      ];

      const report = await correlator.generateCveEnhancedReport(vulnerabilities);

      expect(report.recommendations).toContain('Implement parameterized queries to prevent SQL injection (based on CVE analysis)');
      expect(report.riskAssessment.criticalVulnerabilities).toBeDefined();
      expect(report.riskAssessment.exposureScore).toBeGreaterThan(0);
    });
  });

  describe('Performance and Caching', () => {
    it('should cache CVE lookups for better performance', async () => {
      // Clear cache first to ensure clean test
      const newCorrelator = new CveCorrelator();
      
      const startTime = Date.now();
      await newCorrelator.findCvesByCwe('CWE-89');
      const firstCallTime = Date.now() - startTime;

      const startTime2 = Date.now();
      await newCorrelator.findCvesByCwe('CWE-89');
      const secondCallTime = Date.now() - startTime2;

      // Second call should be faster due to caching (or at least not significantly slower)
      expect(secondCallTime).toBeLessThanOrEqual(firstCallTime + 5); // Allow for small timing variations
    });

    it('should handle large vulnerability sets efficiently', async () => {
      const largeVulnSet = Array(50).fill(null).map((_, i) => ({
        ...sampleVulnerability,
        line: i + 1
      }));

      const startTime = Date.now();
      const result = await correlator.correlateWithCve(largeVulnSet);
      const duration = Date.now() - startTime;

      expect(duration).toBeLessThan(5000); // Should complete within 5 seconds
      expect(result.correlations.length).toBe(50);
    });
  });
});