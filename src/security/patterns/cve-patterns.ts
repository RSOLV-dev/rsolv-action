import { SecurityPattern, VulnerabilityType } from '../types.js';

/**
 * CVE-specific and additional OWASP security patterns
 * These patterns detect known vulnerabilities and additional security risks
 */
export const cveAndOwaspPatterns: SecurityPattern[] = [
  // CVE-2021-44228 - Log4Shell detection
  {
    id: 'log4shell-detection',
    name: 'Log4Shell Vulnerability (CVE-2021-44228)',
    type: VulnerabilityType.VULNERABLE_COMPONENTS,
    severity: 'critical',
    patterns: {
      regex: [/(log4j.*2\.(0|1[0-6])\.\d|log4j-core.*2\.(0|1[0-6])\.\d)/gi]
    },
    description: 'Detects potentially vulnerable Log4j versions (CVE-2021-44228 - Log4Shell)',
    cweId: 'CWE-502',
    owaspCategory: 'A06:2021 – Vulnerable and Outdated Components',
    languages: ['java', 'kotlin', 'groovy', 'scala', 'xml', 'gradle', 'maven'], // Log4j is Java-specific
    remediation: 'Update Log4j to version 2.17.0 or later to patch Log4Shell vulnerability',
    examples: {
      vulnerable: 'implementation "org.apache.logging.log4j:log4j-core:2.14.1"',
      secure: 'implementation "org.apache.logging.log4j:log4j-core:2.17.1"'
    }
  },

  // CVE-2022-22965 - Spring4Shell detection
  {
    id: 'spring4shell-detection',
    name: 'Spring4Shell Vulnerability (CVE-2022-22965)',
    type: VulnerabilityType.VULNERABLE_COMPONENTS,
    severity: 'critical',
    patterns: {
      regex: [/(spring-webmvc|spring-boot-starter-web)[\s\S]*?(5\.[0-2]\.\d{1,2}|5\.3\.([0-9]|1[0-7]))/gi]
    },
    languages: ['java', 'kotlin', 'xml', 'gradle', 'maven'], // Spring is Java-specific
    description: 'Detects potentially vulnerable Spring Framework versions (CVE-2022-22965 - Spring4Shell)',
    cweId: 'CWE-94',
    owaspCategory: 'A06:2021 – Vulnerable and Outdated Components',
    remediation: 'Update Spring Framework to 5.3.18+ or 5.2.20+ to patch Spring4Shell vulnerability',
    examples: {
      vulnerable: 'implementation "org.springframework:spring-webmvc:5.3.17"',
      secure: 'implementation "org.springframework:spring-webmvc:5.3.20"'
    }
  },

  // OWASP A07:2021 - Identification and Authentication Failures
  {
    id: 'weak-jwt-secret',
    name: 'Weak JWT Secret Detection',
    type: VulnerabilityType.BROKEN_AUTHENTICATION,
    severity: 'high',
    patterns: {
      regex: [/jwt\.sign\([^,]+,\s*["']([^"']{1,16})["']/gi]
    },
    languages: ['javascript', 'typescript'], // JWT is commonly used in JS/TS
    description: 'Detects weak JWT secrets that are too short or predictable',
    cweId: 'CWE-326',
    owaspCategory: 'A07:2021 – Identification and Authentication Failures',
    remediation: 'Use a strong, randomly generated secret of at least 256 bits (32 characters)',
    examples: {
      vulnerable: 'jwt.sign(payload, "secret")',
      secure: 'jwt.sign(payload, crypto.randomBytes(32).toString("hex"))'
    }
  },

  // OWASP A09:2021 - Security Logging and Monitoring Failures
  {
    id: 'missing-security-event-logging',
    name: 'Missing Security Event Logging',
    type: VulnerabilityType.INSUFFICIENT_LOGGING,
    severity: 'medium',
    patterns: {
      regex: [/(login|authenticate|authorize|payment|transfer|delete)[\s\S]{0,200}(?!.*\b(log|audit|track|record)\b)/gi]
    },
    languages: [], // Applies to all languages - logging is universal
    description: 'Detects security-critical operations without proper logging',
    cweId: 'CWE-778',
    owaspCategory: 'A09:2021 – Security Logging and Monitoring Failures',
    remediation: 'Add comprehensive logging for all security-critical operations including authentication, authorization, and sensitive data access',
    examples: {
      vulnerable: 'function login(username, password) { if (checkCredentials(username, password)) return createSession(username); }',
      secure: 'function login(username, password) { const result = checkCredentials(username, password); logger.info("Login attempt", { username, success: result }); return result ? createSession(username) : false; }'
    }
  }
];

// Export function to get all CVE and OWASP patterns
export function getCveAndOwaspPatterns(): SecurityPattern[] {
  return cveAndOwaspPatterns;
}

// Export function to check for specific CVEs
export function checkForKnownCVEs(code: string): string[] {
  const detectedCVEs: string[] = [];
  
  // Check for Log4Shell
  if (/log4j.*2\.(0|1[0-6])\.\d/gi.test(code)) {
    detectedCVEs.push('CVE-2021-44228 (Log4Shell)');
  }
  
  // Check for Spring4Shell
  if (/(spring-webmvc|spring-boot-starter-web)[\s\S]*?(5\.[0-2]\.\d{1,2}|5\.3\.([0-9]|1[0-7]))/gi.test(code)) {
    detectedCVEs.push('CVE-2022-22965 (Spring4Shell)');
  }
  
  return detectedCVEs;
}