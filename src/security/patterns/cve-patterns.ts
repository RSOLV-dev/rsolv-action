import { SecurityPattern, VulnerabilityType } from '../types.js';

/**
 * CVE-specific and additional OWASP security patterns
 * These patterns detect known vulnerabilities and additional security risks
 */
export const cveAndOwaspPatterns: SecurityPattern[] = [
  // CVE-2021-44228 - Log4Shell detection
  {
    id: 'log4shell-detection',
    name: 'Log4Shell Vulnerability (CVE-2021-44228)',
    type: VulnerabilityType.VULNERABLE_COMPONENTS,
    severity: 'critical',
    pattern: /(log4j.*2\.(0|1[0-6])\.\d|log4j-core.*2\.(0|1[0-6])\.\d)/gi,
    description: 'Detects potentially vulnerable Log4j versions (CVE-2021-44228 - Log4Shell)',
    message: 'Vulnerable Log4j version detected',
    cweId: 'CWE-502',
    owaspCategory: 'A06:2021 – Vulnerable and Outdated Components',
    recommendation: 'Update Log4j to version 2.17.0 or later to patch Log4Shell vulnerability',
    examples: {
      vulnerable: [
        'implementation "org.apache.logging.log4j:log4j-core:2.14.1"',
        '"log4j-core": "2.15.0"',
        'compile group: "org.apache.logging.log4j", name: "log4j-core", version: "2.13.3"'
      ],
      secure: [
        'implementation "org.apache.logging.log4j:log4j-core:2.17.1"',
        '"log4j-core": "2.20.0"'
      ]
    }
  },

  // CVE-2022-22965 - Spring4Shell detection
  {
    id: 'spring4shell-detection',
    name: 'Spring4Shell Vulnerability (CVE-2022-22965)',
    type: VulnerabilityType.VULNERABLE_COMPONENTS,
    severity: 'critical',
    pattern: /(spring-webmvc|spring-boot-starter-web)[\s\S]*?(5\.[0-2]\.\d{1,2}|5\.3\.([0-9]|1[0-7]))/gi,
    description: 'Detects potentially vulnerable Spring Framework versions (CVE-2022-22965 - Spring4Shell)',
    message: 'Vulnerable Spring Framework version detected',
    cweId: 'CWE-94',
    owaspCategory: 'A06:2021 – Vulnerable and Outdated Components',
    recommendation: 'Update Spring Framework to 5.3.18+ or 5.2.20+ to patch Spring4Shell vulnerability',
    examples: {
      vulnerable: [
        '<spring.version>5.3.15</spring.version>',
        '"spring-webmvc": "5.2.19"',
        'implementation "org.springframework:spring-webmvc:5.3.17"'
      ],
      secure: [
        '<spring.version>5.3.20</spring.version>',
        '"spring-webmvc": "5.3.18"'
      ]
    }
  },

  // OWASP A07:2021 - Identification and Authentication Failures
  {
    id: 'weak-jwt-secret',
    name: 'Weak JWT Secret Detection',
    type: VulnerabilityType.BROKEN_AUTHENTICATION,
    severity: 'high',
    pattern: /jwt\.sign\([^,]+,\s*["']([^"']{1,16})["']/gi,
    description: 'Detects weak JWT secrets that are too short or predictable',
    message: 'JWT secret is too short or weak - should be at least 32 characters',
    cweId: 'CWE-326',
    owaspCategory: 'A07:2021 – Identification and Authentication Failures',
    recommendation: 'Use a strong, randomly generated secret of at least 256 bits (32 characters)',
    examples: {
      vulnerable: [
        'jwt.sign(payload, "secret")',
        'jwt.sign(data, "myapp123")',
        'jwt.sign(user, process.env.JWT_SECRET || "default")'
      ],
      secure: [
        'jwt.sign(payload, process.env.JWT_SECRET)', // Assuming env var is properly set
        'jwt.sign(data, crypto.randomBytes(32).toString("hex"))'
      ]
    }
  },

  // OWASP A09:2021 - Security Logging and Monitoring Failures
  {
    id: 'missing-security-event-logging',
    name: 'Missing Security Event Logging',
    type: VulnerabilityType.INSUFFICIENT_LOGGING,
    severity: 'medium',
    pattern: /(login|authenticate|authorize|payment|transfer|delete)[\s\S]{0,200}(?!.*\b(log|audit|track|record)\b)/gi,
    description: 'Detects security-critical operations without proper logging',
    message: 'Security-critical operation detected without logging',
    cweId: 'CWE-778',
    owaspCategory: 'A09:2021 – Security Logging and Monitoring Failures',
    recommendation: 'Add comprehensive logging for all security-critical operations including authentication, authorization, and sensitive data access',
    examples: {
      vulnerable: [
        `function login(username, password) {
          if (checkCredentials(username, password)) {
            return createSession(username);
          }
          return false;
        }`,
        `async function deleteUser(userId) {
          await db.users.delete(userId);
          return { success: true };
        }`
      ],
      secure: [
        `function login(username, password) {
          const result = checkCredentials(username, password);
          logger.info('Login attempt', { username, success: result, timestamp: Date.now() });
          if (result) {
            return createSession(username);
          }
          return false;
        }`,
        `async function deleteUser(userId, performedBy) {
          logger.warn('User deletion initiated', { userId, performedBy, timestamp: Date.now() });
          await db.users.delete(userId);
          auditLog.record('USER_DELETED', { userId, performedBy });
          return { success: true };
        }`
      ]
    }
  }
];

// Export function to get all CVE and OWASP patterns
export function getCveAndOwaspPatterns(): SecurityPattern[] {
  return cveAndOwaspPatterns;
}

// Export function to check for specific CVEs
export function checkForKnownCVEs(code: string): string[] {
  const detectedCVEs: string[] = [];
  
  // Check for Log4Shell
  if (/log4j.*2\.(0|1[0-6])\.\d/gi.test(code)) {
    detectedCVEs.push('CVE-2021-44228 (Log4Shell)');
  }
  
  // Check for Spring4Shell
  if (/(spring-webmvc|spring-boot-starter-web)[\s\S]*?(5\.[0-2]\.\d{1,2}|5\.3\.([0-9]|1[0-7]))/gi.test(code)) {
    detectedCVEs.push('CVE-2022-22965 (Spring4Shell)');
  }
  
  return detectedCVEs;
}