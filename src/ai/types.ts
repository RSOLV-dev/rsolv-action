/**
 * AI provider types and interfaces
 */

// Re-export from security types for convenience
export type { Vulnerability, VulnerabilityType } from '../security/types.js';

/**
 * Supported AI providers
 */
export type AIProvider = 'anthropic' | 'openrouter' | 'openai' | 'mistral' | 'ollama' | 'claude-code';

/**
 * Common issue analysis result
 */
export interface IssueAnalysis {
  summary: string;
  complexity: 'low' | 'medium' | 'high';
  estimatedTime: number; // minutes
  potentialFixes: string[];
  recommendedApproach: string;
  relatedFiles?: string[];
  requiredChanges?: string[];
}

/**
 * PR solution generated by AI
 */
export interface PullRequestSolution {
  title: string;
  description: string;
  files: Array<{
    path: string;
    changes: string;
  }>;
  tests?: string[];
}

/**
 * Common AI client interface
 */
export interface AIClient {
  /**
   * Analyze an issue to determine complexity and approaches
   */
  analyzeIssue(
    issueTitle: string,
    issueBody: string,
    repoContext?: any
  ): Promise<IssueAnalysis>;
  
  /**
   * Generate a solution for an issue
   */
  generateSolution(
    issueTitle: string,
    issueBody: string,
    issueAnalysis: IssueAnalysis,
    repoContext?: any
  ): Promise<PullRequestSolution>;
}

/**
 * Claude Code specific configuration
 */
export interface ClaudeCodeConfig {
  /**
   * Path to Claude Code executable (defaults to 'claude')
   */
  executablePath?: string;
  
  /**
   * Output format for Claude Code (defaults to 'stream-json')
   */
  outputFormat?: 'stream-json' | 'json' | 'text';
  
  /**
   * Context gathering configuration options
   */
  contextOptions?: {
    /**
     * Maximum depth for context exploration (1-5, defaults to 3)
     */
    maxDepth?: number;
    
    /**
     * Controls breadth of context exploration (1-5, defaults to 3)
     */
    explorationBreadth?: number;
    
    /**
     * Include specific directories in context gathering
     */
    includeDirs?: string[];
    
    /**
     * Exclude specific directories from context gathering
     */
    excludeDirs?: string[];
    
    /**
     * Include specific file patterns in context gathering
     */
    includeFiles?: string[];
    
    /**
     * Exclude specific file patterns from context gathering
     */
    excludeFiles?: string[];
  };
  
  /**
   * Retry configuration
   */
  retryOptions?: {
    /**
     * Maximum number of retries (defaults to 2)
     */
    maxRetries?: number;
    
    /**
     * Base delay for exponential backoff in ms (defaults to 1000)
     */
    baseDelay?: number;
  };
  
  /**
   * Timeout in milliseconds (defaults to 1800000 - 30 minutes)
   */
  timeout?: number;
  
  /**
   * Path for temporary files (defaults to './temp')
   */
  tempDir?: string;
  
  /**
   * Enable detailed logging (defaults to false)
   */
  verboseLogging?: boolean;
  
  /**
   * Enable usage tracking and analytics (defaults to true)
   */
  trackUsage?: boolean;
  
  /**
   * Use structured phased prompting to ensure files are edited before JSON
   */
  useStructuredPhases?: boolean;
  
  /**
   * Enhanced context options
   */
  enableDeepContext?: boolean;
  enableUltraThink?: boolean;
  contextGatheringTimeout?: number;
  contextDepth?: 'shallow' | 'medium' | 'deep' | 'ultra';
  
  /**
   * Context analysis options
   */
  analyzeArchitecture?: boolean;
  analyzeTestPatterns?: boolean;
  analyzeStyleGuide?: boolean;
  analyzeDependencies?: boolean;
  
  /**
   * Performance options
   */
  maxParallelExplorations?: number;
  cacheContextResults?: boolean;
  contextCacheDuration?: number;
}

/**
 * AI configuration
 */
export interface AIConfig {
  provider: AIProvider;
  apiKey?: string;
  model?: string;
  modelName?: string;
  temperature?: number;
  maxTokens?: number;
  useVendedCredentials?: boolean;
  useClaudeCode?: boolean;
  useStructuredPhases?: boolean;
  claudeCodeConfig?: ClaudeCodeConfig;
}