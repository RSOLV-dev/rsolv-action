import { describe, test, expect } from 'bun:test';
import { cveAndOwaspPatterns, checkForKnownCVEs } from '../../src/security/patterns/cve-patterns.js';
import { VulnerabilityType } from '../../src/security/types.js';

describe('CVE and OWASP Security Patterns', () => {
  test('should detect Log4Shell vulnerability (CVE-2021-44228)', () => {
    const vulnerableCode = `
      dependencies {
        implementation "org.apache.logging.log4j:log4j-core:2.14.1"
      }
    `;
    
    const log4shellPattern = cveAndOwaspPatterns.find(p => p.id === 'log4shell-detection');
    expect(log4shellPattern).toBeDefined();
    expect(log4shellPattern!.patterns.regex![0].test(vulnerableCode)).toBe(true);
    
    const cves = checkForKnownCVEs(vulnerableCode);
    expect(cves).toContain('CVE-2021-44228 (Log4Shell)');
  });

  test('should detect Spring4Shell vulnerability (CVE-2022-22965)', () => {
    const vulnerableCode = `
      <dependency>
        <groupId>org.springframework</groupId>
        <artifactId>spring-webmvc</artifactId>
        <version>5.3.15</version>
      </dependency>
    `;
    
    const spring4shellPattern = cveAndOwaspPatterns.find(p => p.id === 'spring4shell-detection');
    expect(spring4shellPattern).toBeDefined();
    expect(spring4shellPattern!.patterns.regex![0].test(vulnerableCode)).toBe(true);
    
    const cves = checkForKnownCVEs(vulnerableCode);
    expect(cves).toContain('CVE-2022-22965 (Spring4Shell)');
  });

  test('should detect weak JWT secrets', () => {
    const vulnerableCode = `
      const token = jwt.sign(payload, "secret");
      const userToken = jwt.sign(data, "myapp123");
    `;
    
    const jwtPattern = cveAndOwaspPatterns.find(p => p.id === 'weak-jwt-secret');
    expect(jwtPattern).toBeDefined();
    
    const matches = vulnerableCode.match(jwtPattern!.patterns.regex![0]);
    expect(matches).toBeTruthy();
    expect(matches!.length).toBe(2);
  });

  test('should detect missing security event logging', () => {
    const vulnerableCode = `
      function login(username, password) {
        if (checkCredentials(username, password)) {
          return createSession(username);
        }
        return false;
      }
    `;
    
    const loggingPattern = cveAndOwaspPatterns.find(p => p.id === 'missing-security-event-logging');
    expect(loggingPattern).toBeDefined();
    expect(loggingPattern!.patterns.regex![0].test(vulnerableCode)).toBe(true);
  });

  test('should not detect secure versions', () => {
    const secureCode = `
      dependencies {
        implementation "org.apache.logging.log4j:log4j-core:2.20.0"
      }
      <spring.version>5.3.20</spring.version>
    `;
    
    const cves = checkForKnownCVEs(secureCode);
    expect(cves.length).toBe(0);
  });

  test('should have correct metadata for all patterns', () => {
    cveAndOwaspPatterns.forEach(pattern => {
      expect(pattern.id).toBeDefined();
      expect(pattern.name).toBeDefined();
      expect(pattern.type).toBeDefined();
      expect(pattern.severity).toMatch(/^(low|medium|high|critical)$/);
      expect(pattern.cweId).toBeDefined();
      expect(pattern.owaspCategory).toBeDefined();
      expect(pattern.examples.vulnerable.length).toBeGreaterThan(0);
      expect(pattern.examples.secure.length).toBeGreaterThan(0);
    });
  });
});